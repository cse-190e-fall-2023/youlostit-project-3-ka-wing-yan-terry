
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d4  080040d4  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  080040d4  080040d4  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040d4  080040d4  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  080040dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000190  08004268  00020190  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08004268  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8b3  00000000  00000000  000201ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fcd  00000000  00000000  0002aab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  0002ca80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072d  00000000  00000000  0002d430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275af  00000000  00000000  0002db5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b389  00000000  00000000  0005510c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0dbc  00000000  00000000  00060495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a98  00000000  00000000  00151254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00153cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000190 	.word	0x20000190
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004024 	.word	0x08004024

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000194 	.word	0x20000194
 80001cc:	08004024 	.word	0x08004024

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
uint8_t READ_CHAR_HANDLE[2];

uint16_t stackInitCompleteFlag=0;
uint8_t* rxEvent;

void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fa04 	bl	8003694 <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	; (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	; (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	; (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f905 	bl	80004b4 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	; (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	; (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f984 	bl	80005c8 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	; (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	; (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fade 	bl	8001898 <HAL_Delay>
	free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	; (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 f9df 	bl	80036a4 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	; (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	; (8000468 <ble_init+0x1e8>)
 80002f2:	f000 fa7b 	bl	80007ec <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	; (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	; (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	; (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 f9c8 	bl	80036a4 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	; (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	; (8000470 <ble_init+0x1f0>)
 8000320:	f000 fa64 	bl	80007ec <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	; (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	; (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	; (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	; (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	; (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	; (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	; (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	; (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	; (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 f99c 	bl	80036a4 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	; (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2309      	movs	r3, #9
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	; (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	; (8000474 <ble_init+0x1f4>)
 8000378:	f000 fafe 	bl	8000978 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	; (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	; (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	; (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 f988 	bl	80036a4 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	; (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	; (8000488 <ble_init+0x208>)
 80003a0:	f000 fa24 	bl	80007ec <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	; (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 f971 	bl	80036a4 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	; (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	; (8000490 <ble_init+0x210>)
 80003ce:	f000 fa0d 	bl	80007ec <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 f95a 	bl	80036a4 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	; (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	; 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	; (8000498 <ble_init+0x218>)
 80003fc:	f000 f9f6 	bl	80007ec <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	; (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 f943 	bl	80036a4 <free>

	//This will start the advertisment,
	setConnectable();
 800041e:	f000 f963 	bl	80006e8 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	; (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	; (80004a0 <ble_init+0x220>)
 8000428:	f000 fa2c 	bl	8000884 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	; (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	; (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	; (80004a8 <ble_init+0x228>)
 8000438:	f000 fa5c 	bl	80008f4 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	; (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	; (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	; (80004b0 <ble_init+0x230>)
 8000448:	f000 fa54 	bl	80008f4 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 800044c:	bf00      	nop
}
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002c4 	.word	0x200002c4
 8000458:	200002c8 	.word	0x200002c8
 800045c:	20000000 	.word	0x20000000
 8000460:	200002c2 	.word	0x200002c2
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001ac 	.word	0x200001ac
 8000478:	200001b0 	.word	0x200001b0
 800047c:	200001b4 	.word	0x200001b4
 8000480:	200000ec 	.word	0x200000ec
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	20000070 	.word	0x20000070
 8000498:	2000004c 	.word	0x2000004c
 800049c:	200002b8 	.word	0x200002b8
 80004a0:	200000f8 	.word	0x200000f8
 80004a4:	200002c0 	.word	0x200002c0
 80004a8:	20000118 	.word	0x20000118
 80004ac:	200002bc 	.word	0x200002bc
 80004b0:	20000108 	.word	0x20000108

080004b4 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	; 0x30
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004be:	4a3d      	ldr	r2, [pc, #244]	; (80005b4 <fetchBleEvent+0x100>)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c8:	6018      	str	r0, [r3, #0]
 80004ca:	3304      	adds	r3, #4
 80004cc:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004ce:	2140      	movs	r1, #64	; 0x40
 80004d0:	4839      	ldr	r0, [pc, #228]	; (80005b8 <fetchBleEvent+0x104>)
 80004d2:	f001 fcc1 	bl	8001e58 <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d065      	beq.n	80005a8 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f001 f9db 	bl	8001898 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e8:	4834      	ldr	r0, [pc, #208]	; (80005bc <fetchBleEvent+0x108>)
 80004ea:	f001 fccd 	bl	8001e88 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004ee:	f107 0210 	add.w	r2, r7, #16
 80004f2:	f107 0118 	add.w	r1, r7, #24
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2305      	movs	r3, #5
 80004fc:	4830      	ldr	r0, [pc, #192]	; (80005c0 <fetchBleEvent+0x10c>)
 80004fe:	f002 fd43 	bl	8002f88 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000508:	482c      	ldr	r0, [pc, #176]	; (80005bc <fetchBleEvent+0x108>)
 800050a:	f001 fcbd 	bl	8001e88 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 f9c2 	bl	8001898 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051a:	4828      	ldr	r0, [pc, #160]	; (80005bc <fetchBleEvent+0x108>)
 800051c:	f001 fcb4 	bl	8001e88 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000520:	f107 0210 	add.w	r2, r7, #16
 8000524:	f107 0118 	add.w	r1, r7, #24
 8000528:	2301      	movs	r3, #1
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2305      	movs	r3, #5
 800052e:	4824      	ldr	r0, [pc, #144]	; (80005c0 <fetchBleEvent+0x10c>)
 8000530:	f002 fd2a 	bl	8002f88 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000534:	7cfb      	ldrb	r3, [r7, #19]
 8000536:	461a      	mov	r2, r3
 8000538:	7d3b      	ldrb	r3, [r7, #20]
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	4313      	orrs	r3, r2
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
  int i;
  char dummy=0xff;
 8000540:	23ff      	movs	r3, #255	; 0xff
 8000542:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd01      	ble.n	8000550 <fetchBleEvent+0x9c>
	  dataSize=size;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(dataSize>0){
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd1f      	ble.n	8000596 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
 800055a:	e00d      	b.n	8000578 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	441a      	add	r2, r3
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4814      	ldr	r0, [pc, #80]	; (80005c0 <fetchBleEvent+0x10c>)
 800056e:	f002 fd0b 	bl	8002f88 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3301      	adds	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	6a3a      	ldr	r2, [r7, #32]
 800057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057c:	429a      	cmp	r2, r3
 800057e:	dbed      	blt.n	800055c <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000586:	480d      	ldr	r0, [pc, #52]	; (80005bc <fetchBleEvent+0x108>)
 8000588:	f001 fc7e 	bl	8001e88 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <fetchBleEvent+0x110>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e00a      	b.n	80005ac <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059c:	4807      	ldr	r0, [pc, #28]	; (80005bc <fetchBleEvent+0x108>)
 800059e:	f001 fc73 	bl	8001e88 <HAL_GPIO_WritePin>
        return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	e001      	b.n	80005ac <fetchBleEvent+0xf8>
  }else{
  return -2;
 80005a8:	f06f 0301 	mvn.w	r3, #1
  }
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3728      	adds	r7, #40	; 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	0800403c 	.word	0x0800403c
 80005b8:	48001000 	.word	0x48001000
 80005bc:	48000c00 	.word	0x48000c00
 80005c0:	20000314 	.word	0x20000314
 80005c4:	200002c8 	.word	0x200002c8

080005c8 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	int j=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e00f      	b.n	80005fe <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	440b      	add	r3, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d002      	beq.n	80005f8 <checkEventResp+0x30>
			return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e007      	b.n	8000608 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbeb      	blt.n	80005de <checkEventResp+0x16>
		}
	}

return BLE_OK;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	371c      	adds	r7, #28
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800061e:	4a1f      	ldr	r2, [pc, #124]	; (800069c <sendCommand+0x88>)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000634:	481a      	ldr	r0, [pc, #104]	; (80006a0 <sendCommand+0x8c>)
 8000636:	f001 fc27 	bl	8001e88 <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	f107 0110 	add.w	r1, r7, #16
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2305      	movs	r3, #5
 8000648:	4816      	ldr	r0, [pc, #88]	; (80006a4 <sendCommand+0x90>)
 800064a:	f002 fc9d 	bl	8002f88 <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	7a7a      	ldrb	r2, [r7, #9]
 8000654:	4313      	orrs	r3, r2
 8000656:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	db09      	blt.n	8000674 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	2301      	movs	r3, #1
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	480e      	ldr	r0, [pc, #56]	; (80006a4 <sendCommand+0x90>)
 800066a:	f002 fb18 	bl	8002c9e <HAL_SPI_Transmit>
		result=0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e002      	b.n	800067a <sendCommand+0x66>
	  }else{
		result=-1;
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000680:	4807      	ldr	r0, [pc, #28]	; (80006a0 <sendCommand+0x8c>)
 8000682:	f001 fc01 	bl	8001e88 <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <sendCommand+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1cd      	bne.n	800062e <sendCommand+0x1a>

}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08004044 	.word	0x08004044
 80006a0:	48000c00 	.word	0x48000c00
 80006a4:	20000314 	.word	0x20000314
 80006a8:	200002c8 	.word	0x200002c8

080006ac <catchBLE>:

void catchBLE(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 80006b2:	217f      	movs	r1, #127	; 0x7f
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <catchBLE+0x34>)
 80006b6:	f7ff fefd 	bl	80004b4 <fetchBleEvent>
 80006ba:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d109      	bne.n	80006d6 <catchBLE+0x2a>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006c2:	2203      	movs	r2, #3
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <catchBLE+0x38>)
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <catchBLE+0x34>)
 80006c8:	f7ff ff7e 	bl	80005c8 <checkEventResp>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d101      	bne.n	80006d6 <catchBLE+0x2a>
			  setConnectable();
 80006d2:	f000 f809 	bl	80006e8 <setConnectable>
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200001b8 	.word	0x200001b8
 80006e4:	200000e8 	.word	0x200000e8

080006e8 <setConnectable>:

void setConnectable(){
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 80006ee:	200e      	movs	r0, #14
 80006f0:	f002 ffd0 	bl	8003694 <malloc>
 80006f4:	4603      	mov	r3, r0
 80006f6:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4937      	ldr	r1, [pc, #220]	; (80007d8 <setConnectable+0xf0>)
 80006fc:	461a      	mov	r2, r3
 80006fe:	460b      	mov	r3, r1
 8000700:	cb03      	ldmia	r3!, {r0, r1}
 8000702:	6010      	str	r0, [r2, #0]
 8000704:	6051      	str	r1, [r2, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	7213      	strb	r3, [r2, #8]
	   localname[sizeof(deviceName)+1]=0x00;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	330a      	adds	r3, #10
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	330b      	adds	r3, #11
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	330c      	adds	r3, #12
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	330d      	adds	r3, #13
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3309      	adds	r3, #9
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <setConnectable+0xf4>)
 8000734:	220a      	movs	r2, #10
 8000736:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <setConnectable+0xf4>)
 800073a:	2217      	movs	r2, #23
 800073c:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 800073e:	201b      	movs	r0, #27
 8000740:	f002 ffa8 	bl	8003694 <malloc>
 8000744:	4603      	mov	r3, r0
 8000746:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	4a24      	ldr	r2, [pc, #144]	; (80007dc <setConnectable+0xf4>)
 800074c:	461c      	mov	r4, r3
 800074e:	4613      	mov	r3, r2
 8000750:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000752:	6020      	str	r0, [r4, #0]
 8000754:	6061      	str	r1, [r4, #4]
 8000756:	60a2      	str	r2, [r4, #8]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	330d      	adds	r3, #13
 8000760:	220e      	movs	r2, #14
 8000762:	68f9      	ldr	r1, [r7, #12]
 8000764:	4618      	mov	r0, r3
 8000766:	f003 f8c9 	bl	80038fc <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 800076a:	211b      	movs	r1, #27
 800076c:	68b8      	ldr	r0, [r7, #8]
 800076e:	f7ff ff51 	bl	8000614 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 8000772:	2007      	movs	r0, #7
 8000774:	f002 ff8e 	bl	8003694 <malloc>
 8000778:	4603      	mov	r3, r0
 800077a:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 800077c:	bf00      	nop
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <setConnectable+0xf8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0fb      	beq.n	800077e <setConnectable+0x96>
	   res=fetchBleEvent(rxEvent,7);
 8000786:	2107      	movs	r1, #7
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fe93 	bl	80004b4 <fetchBleEvent>
 800078e:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d10f      	bne.n	80007b6 <setConnectable+0xce>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000796:	2207      	movs	r2, #7
 8000798:	4912      	ldr	r1, [pc, #72]	; (80007e4 <setConnectable+0xfc>)
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ff14 	bl	80005c8 <checkEventResp>
 80007a0:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d106      	bne.n	80007b6 <setConnectable+0xce>
		   stackInitCompleteFlag|=0x80;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <setConnectable+0x100>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <setConnectable+0x100>)
 80007b4:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f002 ff74 	bl	80036a4 <free>
	   free(discoverableCommand);
 80007bc:	68b8      	ldr	r0, [r7, #8]
 80007be:	f002 ff71 	bl	80036a4 <free>
	   free(localname);
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f002 ff6e 	bl	80036a4 <free>
	   HAL_Delay(10);
 80007c8:	200a      	movs	r0, #10
 80007ca:	f001 f865 	bl	8001898 <HAL_Delay>
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000ec 	.word	0x200000ec
 80007dc:	20000078 	.word	0x20000078
 80007e0:	200002c8 	.word	0x200002c8
 80007e4:	20000088 	.word	0x20000088
 80007e8:	200002c2 	.word	0x200002c2

080007ec <BLE_command>:

int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 80007fa:	68b9      	ldr	r1, [r7, #8]
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff ff09 	bl	8000614 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000802:	6a3b      	ldr	r3, [r7, #32]
 8000804:	005a      	lsls	r2, r3, #1
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	4413      	add	r3, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f002 ff42 	bl	8003694 <malloc>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <BLE_command+0x90>)
 8000816:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800081c:	e007      	b.n	800082e <BLE_command+0x42>
		   contatore++;
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	3301      	adds	r3, #1
 8000822:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	f247 5230 	movw	r2, #30000	; 0x7530
 800082a:	4293      	cmp	r3, r2
 800082c:	dc07      	bgt.n	800083e <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	4813      	ldr	r0, [pc, #76]	; (8000880 <BLE_command+0x94>)
 8000832:	f001 fb11 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f0      	beq.n	800081e <BLE_command+0x32>
 800083c:	e000      	b.n	8000840 <BLE_command+0x54>
			   break;
 800083e:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <BLE_command+0x90>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	005a      	lsls	r2, r3, #1
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4619      	mov	r1, r3
 800084e:	f7ff fe31 	bl	80004b4 <fetchBleEvent>
 8000852:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d107      	bne.n	800086a <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <BLE_command+0x90>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	6879      	ldr	r1, [r7, #4]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff feb0 	bl	80005c8 <checkEventResp>
 8000868:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 800086a:	200a      	movs	r0, #10
 800086c:	f001 f814 	bl	8001898 <HAL_Delay>


	return response;
 8000870:	697b      	ldr	r3, [r7, #20]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200002c4 	.word	0x200002c4
 8000880:	48001000 	.word	0x48001000

08000884 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af02      	add	r7, sp, #8
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <addService+0x60>)
 8000892:	2210      	movs	r2, #16
 8000894:	68f9      	ldr	r1, [r7, #12]
 8000896:	4618      	mov	r0, r3
 8000898:	f003 f830 	bl	80038fc <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <addService+0x64>)
 80008a2:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008a4:	2301      	movs	r3, #1
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2307      	movs	r3, #7
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <addService+0x68>)
 80008ac:	2117      	movs	r1, #23
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <addService+0x64>)
 80008b0:	f7ff ff9c 	bl	80007ec <BLE_command>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d10a      	bne.n	80008d0 <addService+0x4c>
		   handle[0]=rxEvent[7];
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <addService+0x6c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	79da      	ldrb	r2, [r3, #7]
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <addService+0x6c>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3301      	adds	r3, #1
 80008cc:	7a12      	ldrb	r2, [r2, #8]
 80008ce:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <addService+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fee5 	bl	80036a4 <free>
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000095 	.word	0x20000095
 80008e8:	20000090 	.word	0x20000090
 80008ec:	200000a8 	.word	0x200000a8
 80008f0:	200002c4 	.word	0x200002c4

080008f4 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <addCharacteristic+0x74>)
 8000904:	2210      	movs	r2, #16
 8000906:	68f9      	ldr	r1, [r7, #12]
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fff7 	bl	80038fc <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <addCharacteristic+0x78>)
 8000914:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	785a      	ldrb	r2, [r3, #1]
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <addCharacteristic+0x78>)
 800091c:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 800091e:	4a13      	ldr	r2, [pc, #76]	; (800096c <addCharacteristic+0x78>)
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000924:	4a11      	ldr	r2, [pc, #68]	; (800096c <addCharacteristic+0x78>)
 8000926:	7e3b      	ldrb	r3, [r7, #24]
 8000928:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 800092a:	2301      	movs	r3, #1
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2307      	movs	r3, #7
 8000930:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <addCharacteristic+0x7c>)
 8000932:	211e      	movs	r1, #30
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <addCharacteristic+0x78>)
 8000936:	f7ff ff59 	bl	80007ec <BLE_command>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10a      	bne.n	8000956 <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <addCharacteristic+0x80>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	79da      	ldrb	r2, [r3, #7]
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <addCharacteristic+0x80>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3301      	adds	r3, #1
 8000952:	7a12      	ldrb	r2, [r2, #8]
 8000954:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <addCharacteristic+0x80>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fea2 	bl	80036a4 <free>
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000b7 	.word	0x200000b7
 800096c:	200000b0 	.word	0x200000b0
 8000970:	200000d0 	.word	0x200000d0
 8000974:	200002c4 	.word	0x200002c4

08000978 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af02      	add	r7, sp, #8
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	3306      	adds	r3, #6
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <updateCharValue+0x9c>)
 8000990:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <updateCharValue+0x9c>)
 8000998:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	785a      	ldrb	r2, [r3, #1]
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <updateCharValue+0x9c>)
 80009a0:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <updateCharValue+0x9c>)
 80009a8:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785a      	ldrb	r2, [r3, #1]
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <updateCharValue+0x9c>)
 80009b0:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <updateCharValue+0x9c>)
 80009b8:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <updateCharValue+0x9c>)
 80009c0:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	330a      	adds	r3, #10
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fe64 	bl	8003694 <malloc>
 80009cc:	4603      	mov	r3, r0
 80009ce:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 80009d0:	220a      	movs	r2, #10
 80009d2:	4910      	ldr	r1, [pc, #64]	; (8000a14 <updateCharValue+0x9c>)
 80009d4:	6978      	ldr	r0, [r7, #20]
 80009d6:	f002 ff91 	bl	80038fc <memcpy>
	memcpy(commandComplete+10,data,size);
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	330a      	adds	r3, #10
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	6a39      	ldr	r1, [r7, #32]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 ff8a 	bl	80038fc <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	f103 010a 	add.w	r1, r3, #10
 80009ee:	2300      	movs	r3, #0
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2307      	movs	r3, #7
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <updateCharValue+0xa0>)
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f7ff fef8 	bl	80007ec <BLE_command>

	free(commandComplete);
 80009fc:	6978      	ldr	r0, [r7, #20]
 80009fe:	f002 fe51 	bl	80036a4 <free>
	free(rxEvent);
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <updateCharValue+0xa4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fe4c 	bl	80036a4 <free>
}
 8000a0c:	bf00      	nop
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000d8 	.word	0x200000d8
 8000a18:	200000d0 	.word	0x200000d0
 8000a1c:	200002c4 	.word	0x200002c4

08000a20 <i2c_init>:
#include <stm32l475xx.h>

#include "stdio.h"

void i2c_init()
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
    // Enable I2C2 clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000a24:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <i2c_init+0xd4>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a28:	4a32      	ldr	r2, [pc, #200]	; (8000af4 <i2c_init+0xd4>)
 8000a2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a2e:	6593      	str	r3, [r2, #88]	; 0x58
    // Enable clock for GPIOB
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000a30:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <i2c_init+0xd4>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	4a2f      	ldr	r2, [pc, #188]	; (8000af4 <i2c_init+0xd4>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
    // Clear PE bit in I2C_CR1
    I2C2->CR1 &= !I2C_CR1_PE;
 8000a3c:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <i2c_init+0xd8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <i2c_init+0xd8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
    /*
     * Configure I2C2 SDA pin and I2C2 SCL pin.
     * Specifically, configure pins PB10 and PB11.
     */
    // Set PB10 and PB11 to alternate function mode
    GPIOB->MODER = (GPIOB->MODER & ~(GPIO_MODER_MODE10_Msk | GPIO_MODER_MODE11_Msk)) | (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <i2c_init+0xdc>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000a4e:	4a2b      	ldr	r2, [pc, #172]	; (8000afc <i2c_init+0xdc>)
 8000a50:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
 8000a54:	6013      	str	r3, [r2, #0]
    // Set PB10 and PB11 to output open-drain
    GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 8000a56:	4b29      	ldr	r3, [pc, #164]	; (8000afc <i2c_init+0xdc>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4a28      	ldr	r2, [pc, #160]	; (8000afc <i2c_init+0xdc>)
 8000a5c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000a60:	6053      	str	r3, [r2, #4]
    // PB10-AF4, PB11-AF4
    GPIOB->AFR[1] |= (4 << GPIO_AFRH_AFSEL10_Pos | 4 << GPIO_AFRH_AFSEL11_Pos);
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <i2c_init+0xdc>)
 8000a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a66:	4a25      	ldr	r2, [pc, #148]	; (8000afc <i2c_init+0xdc>)
 8000a68:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8000a6c:	6253      	str	r3, [r2, #36]	; 0x24
    // Pull-up
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 |GPIO_PUPDR_PUPD11_0 );
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <i2c_init+0xdc>)
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	4a22      	ldr	r2, [pc, #136]	; (8000afc <i2c_init+0xdc>)
 8000a74:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000a78:	60d3      	str	r3, [r2, #12]
     * Note: I2C APB clock (PCLK) default value 4 MHz, t_PCLK = 250 ns
     *
     */

    // Configure frequency of I2CCLK to 400 kHz
    RCC->CCIPR |= RCC_CCIPR_I2C2SEL_1; // Select HSI16 (16 MHz) as I2C2 clock, t_I2CCLK = 62.5 ns
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <i2c_init+0xd4>)
 8000a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a80:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <i2c_init+0xd4>)
 8000a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    RCC->CR |= RCC_CR_HSION; // Enable HSI16
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <i2c_init+0xd4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <i2c_init+0xd4>)
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	6013      	str	r3, [r2, #0]
    I2C2->TIMINGR |= 1<<I2C_TIMINGR_PRESC_Pos;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <i2c_init+0xd8>)
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <i2c_init+0xd8>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0x9<<I2C_TIMINGR_SCLL_Pos;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <i2c_init+0xd8>)
 8000aa4:	691b      	ldr	r3, [r3, #16]
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <i2c_init+0xd8>)
 8000aa8:	f043 0309 	orr.w	r3, r3, #9
 8000aac:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0x3<<I2C_TIMINGR_SCLH_Pos;
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <i2c_init+0xd8>)
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <i2c_init+0xd8>)
 8000ab4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000ab8:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0x2<<I2C_TIMINGR_SDADEL_Pos;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <i2c_init+0xd8>)
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <i2c_init+0xd8>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0x3<<I2C_TIMINGR_SCLDEL_Pos;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <i2c_init+0xd8>)
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <i2c_init+0xd8>)
 8000acc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000ad0:	6113      	str	r3, [r2, #16]

    // Configure NOSTRETCH in I2C_CR1
    I2C2->CR1 &= !I2C_CR1_NOSTRETCH;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <i2c_init+0xd8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <i2c_init+0xd8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]

    // Set PE bit in I2C_CR1
    I2C2->CR1 |= I2C_CR1_PE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <i2c_init+0xd8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <i2c_init+0xd8>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]

}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40005800 	.word	0x40005800
 8000afc:	48000400 	.word	0x48000400

08000b00 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	603a      	str	r2, [r7, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	71bb      	strb	r3, [r7, #6]
 8000b12:	4613      	mov	r3, r2
 8000b14:	717b      	strb	r3, [r7, #5]

    while (I2C2->ISR & I2C_ISR_BUSY) { } // Wait until I2C2 bus is free
 8000b16:	bf00      	nop
 8000b18:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <i2c_transaction+0x114>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f9      	bne.n	8000b18 <i2c_transaction+0x18>

	/* Master communication initialization */
    // Set 7-bit slave address, R/W bit to write, NBYTES, and START bit.
    I2C2->CR2 = (address << 1) | (0 << I2C_CR2_RD_WRN_Pos) | (len << I2C_CR2_NBYTES_Pos) | I2C_CR2_START;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	005a      	lsls	r2, r3, #1
 8000b28:	797b      	ldrb	r3, [r7, #5]
 8000b2a:	041b      	lsls	r3, r3, #16
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	4a39      	ldr	r2, [pc, #228]	; (8000c14 <i2c_transaction+0x114>)
 8000b30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b34:	6053      	str	r3, [r2, #4]

    if (dir == 0) { // Write
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d116      	bne.n	8000b6a <i2c_transaction+0x6a>

    	// Write register address and other data to I2C bus
        for (uint8_t i = 0; i < len; i++) {
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e00f      	b.n	8000b62 <i2c_transaction+0x62>
            while (!(I2C2->ISR & I2C_ISR_TXIS)) { } // Wait for TXIS = 1
 8000b42:	bf00      	nop
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <i2c_transaction+0x114>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0f9      	beq.n	8000b44 <i2c_transaction+0x44>
            I2C2->TXDR = data[i];
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <i2c_transaction+0x114>)
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
        for (uint8_t i = 0; i < len; i++) {
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	7bfa      	ldrb	r2, [r7, #15]
 8000b64:	797b      	ldrb	r3, [r7, #5]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d3eb      	bcc.n	8000b42 <i2c_transaction+0x42>
        }

    }
    if (dir == 1) { // Read
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d134      	bne.n	8000bda <i2c_transaction+0xda>

    	// Wait for TXIS = 1
    	while (!(I2C2->ISR & I2C_ISR_TXIS)) { }
 8000b70:	bf00      	nop
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <i2c_transaction+0x114>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f9      	beq.n	8000b72 <i2c_transaction+0x72>
    	// Write register address to I2C bus
    	I2C2->TXDR = data[0];
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <i2c_transaction+0x114>)
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
    	// Wait for ACK
    	while(!(I2C2->ISR & I2C_ISR_TC));
 8000b86:	bf00      	nop
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <i2c_transaction+0x114>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0f9      	beq.n	8000b88 <i2c_transaction+0x88>
    	// Set 7-bit slave address, R/W bit to read, NBYTES, and START bit.
        I2C2->CR2 = (address << 1) | (1 << I2C_CR2_RD_WRN_Pos) | (len << I2C_CR2_NBYTES_Pos) | I2C_CR2_START;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b9c:	797b      	ldrb	r3, [r7, #5]
 8000b9e:	041b      	lsls	r3, r3, #16
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <i2c_transaction+0x114>)
 8000ba4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ba8:	6053      	str	r3, [r2, #4]

    	// Read data from I2C bus
        for (uint8_t i = 0; i < len; i++) {
 8000baa:	2300      	movs	r3, #0
 8000bac:	73bb      	strb	r3, [r7, #14]
 8000bae:	e010      	b.n	8000bd2 <i2c_transaction+0xd2>
            while (!(I2C2->ISR & I2C_ISR_RXNE)) { } // Wait for RXNE = 1
 8000bb0:	bf00      	nop
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <i2c_transaction+0x114>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f9      	beq.n	8000bb2 <i2c_transaction+0xb2>
            data[i] = I2C2->RXDR;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <i2c_transaction+0x114>)
 8000bc0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b2ca      	uxtb	r2, r1
 8000bca:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8000bcc:	7bbb      	ldrb	r3, [r7, #14]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	73bb      	strb	r3, [r7, #14]
 8000bd2:	7bba      	ldrb	r2, [r7, #14]
 8000bd4:	797b      	ldrb	r3, [r7, #5]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d3ea      	bcc.n	8000bb0 <i2c_transaction+0xb0>
        }

    }

    // Wait for TC = 1
    while(!(I2C2->ISR & I2C_ISR_TC));
 8000bda:	bf00      	nop
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <i2c_transaction+0x114>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0f9      	beq.n	8000bdc <i2c_transaction+0xdc>

    if(I2C2->ISR & I2C_ISR_TC) {
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <i2c_transaction+0x114>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d007      	beq.n	8000c04 <i2c_transaction+0x104>
		I2C2->CR2 |= I2C_CR2_STOP;// Generate stop condition
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <i2c_transaction+0x114>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <i2c_transaction+0x114>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfe:	6053      	str	r3, [r2, #4]
		return 1; // Success
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <i2c_transaction+0x106>
    }
    else {
    	return 0;
 8000c04:	2300      	movs	r3, #0
    }
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40005800 	.word	0x40005800

08000c18 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* Enable the GPIOA clock */
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <leds_init+0xd0>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c20:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <leds_init+0xd0>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	64d3      	str	r3, [r2, #76]	; 0x4c

  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <leds_init+0xd0>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <leds_init+0xd0>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* From schematic: LED 1 - PA5 (GPIO A Pin 5); LED2 - PB14 */
  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5; // GPIO_MODER_MODE5 has all bits set to 0 except those corresponding to pin 5 set to 1
 8000c34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c3e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000c42:	6013      	str	r3, [r2, #0]
  // Set bits corresponding to PA5 to 0 while other bits retain
  GPIOA->MODER |= GPIO_MODER_MODE5_0; // Set 01 to the position of PA5
 8000c44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c52:	6013      	str	r3, [r2, #0]

  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <leds_init+0xd4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a24      	ldr	r2, [pc, #144]	; (8000cec <leds_init+0xd4>)
 8000c5a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000c5e:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <leds_init+0xd4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a21      	ldr	r2, [pc, #132]	; (8000cec <leds_init+0xd4>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000c6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c76:	f023 0320 	bic.w	r3, r3, #32
 8000c7a:	6053      	str	r3, [r2, #4]

  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <leds_init+0xd4>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <leds_init+0xd4>)
 8000c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c86:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000c88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c96:	60d3      	str	r3, [r2, #12]

  GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <leds_init+0xd4>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	4a13      	ldr	r2, [pc, #76]	; (8000cec <leds_init+0xd4>)
 8000c9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ca2:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO pin to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000ca4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cae:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000cb2:	6093      	str	r3, [r2, #8]

  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <leds_init+0xd4>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <leds_init+0xd4>)
 8000cba:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000cbe:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000cc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cca:	f023 0320 	bic.w	r3, r3, #32
 8000cce:	6153      	str	r3, [r2, #20]

  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <leds_init+0xd4>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	4a05      	ldr	r2, [pc, #20]	; (8000cec <leds_init+0xd4>)
 8000cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cda:	6153      	str	r3, [r2, #20]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48000400 	.word	0x48000400

08000cf0 <leds_set>:

void leds_set(uint8_t led)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]

	if(led == 0b01) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10e      	bne.n	8000d1e <leds_set+0x2e>
		GPIOA->ODR |= GPIO_ODR_OD5;
 8000d00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d0a:	f043 0320 	orr.w	r3, r3, #32
 8000d0e:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <leds_set+0xa0>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <leds_set+0xa0>)
 8000d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d1a:	6153      	str	r3, [r2, #20]
	}
	else {
		GPIOA->ODR &= ~GPIO_ODR_OD5;
		GPIOB->ODR &= ~GPIO_ODR_OD14;
	}
}
 8000d1c:	e031      	b.n	8000d82 <leds_set+0x92>
	else if(led == 0b10) {
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d10e      	bne.n	8000d42 <leds_set+0x52>
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d2e:	f023 0320 	bic.w	r3, r3, #32
 8000d32:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= GPIO_ODR_OD14;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <leds_set+0xa0>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <leds_set+0xa0>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3e:	6153      	str	r3, [r2, #20]
}
 8000d40:	e01f      	b.n	8000d82 <leds_set+0x92>
	else if(led == 0b11){
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d10e      	bne.n	8000d66 <leds_set+0x76>
		GPIOA->ODR |= GPIO_ODR_OD5;
 8000d48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= GPIO_ODR_OD14;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <leds_set+0xa0>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <leds_set+0xa0>)
 8000d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d62:	6153      	str	r3, [r2, #20]
}
 8000d64:	e00d      	b.n	8000d82 <leds_set+0x92>
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d70:	f023 0320 	bic.w	r3, r3, #32
 8000d74:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <leds_set+0xa0>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <leds_set+0xa0>)
 8000d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d80:	6153      	str	r3, [r2, #20]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	48000400 	.word	0x48000400

08000d94 <lsm6dsl_init>:
#include "i2c.h"
#include "stdio.h"

#define LSM6DSL_ADDRESS 0b1101010 // Slave address. SA0 connected to ground by default

void lsm6dsl_init() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

	// 1. Write CTRL1_XL = 60h, Acc = 416 Hz (High-Performance mode)
	uint8_t ctrl1_xl_data[2] = {0x10, 0x60}; // CTRL1_XL register address, value
 8000d9a:	f246 0310 	movw	r3, #24592	; 0x6010
 8000d9e:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(LSM6DSL_ADDRESS, 0, ctrl1_xl_data, 2);
 8000da0:	1d3a      	adds	r2, r7, #4
 8000da2:	2302      	movs	r3, #2
 8000da4:	2100      	movs	r1, #0
 8000da6:	206a      	movs	r0, #106	; 0x6a
 8000da8:	f7ff feaa 	bl	8000b00 <i2c_transaction>

	// 2. Write INT1_CTRL = 01h, Acc data-ready interrupt on INT1
	uint8_t int1_ctrl_data[2] = {0x0D, 0x01};
 8000dac:	f240 130d 	movw	r3, #269	; 0x10d
 8000db0:	803b      	strh	r3, [r7, #0]
	i2c_transaction(LSM6DSL_ADDRESS, 0, int1_ctrl_data, 2);
 8000db2:	463a      	mov	r2, r7
 8000db4:	2302      	movs	r3, #2
 8000db6:	2100      	movs	r1, #0
 8000db8:	206a      	movs	r0, #106	; 0x6a
 8000dba:	f7ff fea1 	bl	8000b00 <i2c_transaction>

}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b08a      	sub	sp, #40	; 0x28
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]

	/* Arrays initially filled with addresses of acceleration data registers,
	 * later used to store acceleration values
	 */
	uint8_t acceleration_x_l[1] = {0x28};
 8000dd2:	2328      	movs	r3, #40	; 0x28
 8000dd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t acceleration_x_h[1] = {0x29};
 8000dd8:	2329      	movs	r3, #41	; 0x29
 8000dda:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t acceleration_y_l[1] = {0x2A};
 8000dde:	232a      	movs	r3, #42	; 0x2a
 8000de0:	773b      	strb	r3, [r7, #28]
	uint8_t acceleration_y_h[1] = {0x2B};
 8000de2:	232b      	movs	r3, #43	; 0x2b
 8000de4:	763b      	strb	r3, [r7, #24]
	uint8_t acceleration_z_l[1] = {0x2C};
 8000de6:	232c      	movs	r3, #44	; 0x2c
 8000de8:	753b      	strb	r3, [r7, #20]
	uint8_t acceleration_z_h[1] = {0x2D};
 8000dea:	232d      	movs	r3, #45	; 0x2d
 8000dec:	743b      	strb	r3, [r7, #16]

	// Write address of register for lower part of acceleration in x-direction
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_x_l, 1);
 8000dee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000df2:	2301      	movs	r3, #1
 8000df4:	2100      	movs	r1, #0
 8000df6:	206a      	movs	r0, #106	; 0x6a
 8000df8:	f7ff fe82 	bl	8000b00 <i2c_transaction>
	// Read lower part of acceleration in x-direction
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_x_l, 1);
 8000dfc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e00:	2301      	movs	r3, #1
 8000e02:	2101      	movs	r1, #1
 8000e04:	206a      	movs	r0, #106	; 0x6a
 8000e06:	f7ff fe7b 	bl	8000b00 <i2c_transaction>
	// Write address of register for higher part of acceleration in x-direction
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_x_h, 1);
 8000e0a:	f107 0220 	add.w	r2, r7, #32
 8000e0e:	2301      	movs	r3, #1
 8000e10:	2100      	movs	r1, #0
 8000e12:	206a      	movs	r0, #106	; 0x6a
 8000e14:	f7ff fe74 	bl	8000b00 <i2c_transaction>
	// Read higher part of acceleration in x-direction
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_x_h, 1);
 8000e18:	f107 0220 	add.w	r2, r7, #32
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	2101      	movs	r1, #1
 8000e20:	206a      	movs	r0, #106	; 0x6a
 8000e22:	f7ff fe6d 	bl	8000b00 <i2c_transaction>

	/* Similar for acceleration in y-direction */
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_y_l, 1);
 8000e26:	f107 021c 	add.w	r2, r7, #28
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	206a      	movs	r0, #106	; 0x6a
 8000e30:	f7ff fe66 	bl	8000b00 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_y_l, 1);
 8000e34:	f107 021c 	add.w	r2, r7, #28
 8000e38:	2301      	movs	r3, #1
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	206a      	movs	r0, #106	; 0x6a
 8000e3e:	f7ff fe5f 	bl	8000b00 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_y_h, 1);
 8000e42:	f107 0218 	add.w	r2, r7, #24
 8000e46:	2301      	movs	r3, #1
 8000e48:	2100      	movs	r1, #0
 8000e4a:	206a      	movs	r0, #106	; 0x6a
 8000e4c:	f7ff fe58 	bl	8000b00 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_y_h, 1);
 8000e50:	f107 0218 	add.w	r2, r7, #24
 8000e54:	2301      	movs	r3, #1
 8000e56:	2101      	movs	r1, #1
 8000e58:	206a      	movs	r0, #106	; 0x6a
 8000e5a:	f7ff fe51 	bl	8000b00 <i2c_transaction>

	/* Similar for acceleration in z-direction */
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_z_l, 1);
 8000e5e:	f107 0214 	add.w	r2, r7, #20
 8000e62:	2301      	movs	r3, #1
 8000e64:	2100      	movs	r1, #0
 8000e66:	206a      	movs	r0, #106	; 0x6a
 8000e68:	f7ff fe4a 	bl	8000b00 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_z_l, 1);
 8000e6c:	f107 0214 	add.w	r2, r7, #20
 8000e70:	2301      	movs	r3, #1
 8000e72:	2101      	movs	r1, #1
 8000e74:	206a      	movs	r0, #106	; 0x6a
 8000e76:	f7ff fe43 	bl	8000b00 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_z_h, 1);
 8000e7a:	f107 0210 	add.w	r2, r7, #16
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2100      	movs	r1, #0
 8000e82:	206a      	movs	r0, #106	; 0x6a
 8000e84:	f7ff fe3c 	bl	8000b00 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_z_h, 1);
 8000e88:	f107 0210 	add.w	r2, r7, #16
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	206a      	movs	r0, #106	; 0x6a
 8000e92:	f7ff fe35 	bl	8000b00 <i2c_transaction>

	/* Combine acceleration data and put them into pointers x, y, and z respectively */
	*x = (int16_t)((acceleration_x_h[0] << 8) | acceleration_x_l[0]);
 8000e96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e9a:	021b      	lsls	r3, r3, #8
 8000e9c:	b21a      	sxth	r2, r3
 8000e9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)((acceleration_y_h[0] << 8) | acceleration_y_l[0]);
 8000eac:	7e3b      	ldrb	r3, [r7, #24]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	7f3b      	ldrb	r3, [r7, #28]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)((acceleration_z_h[0] << 8) | acceleration_z_l[0]);
 8000ebe:	7c3b      	ldrb	r3, [r7, #16]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	7d3b      	ldrb	r3, [r7, #20]
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	801a      	strh	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <DisconnectAndSuspend>:
volatile int loss_time_past = 0; // Time (in sec) since entering loss state
char message[50]; // Note: Adjust the buffer size as needed
uint8_t standby = 0;
volatile int flag_print = 0;

void DisconnectAndSuspend(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f000 ffcf 	bl	8001e88 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000eea:	200a      	movs	r0, #10
 8000eec:	f000 fcd4 	bl	8001898 <HAL_Delay>
	  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f000 ffc5 	bl	8001e88 <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <TIM2_IRQHandler>:
void TIM2_IRQHandler(){
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	if((TIM2->SR & TIM_SR_UIF) == 1){
 8000f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d17e      	bne.n	8001016 <TIM2_IRQHandler+0x112>
		timer_reset(TIM2); // Reset the timer's counter
 8000f18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f1c:	f000 fbfc 	bl	8001718 <timer_reset>
		TIM2->SR &= !TIM_SR_UIF; // Clear the update event flag
 8000f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]

		interval_count+=1;
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <TIM2_IRQHandler+0x11c>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	1c54      	adds	r4, r2, #1
 8000f36:	f143 0500 	adc.w	r5, r3, #0
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <TIM2_IRQHandler+0x11c>)
 8000f3c:	e9c3 4500 	strd	r4, r5, [r3]

		/* Set 1-min flag after the first minute */
		if(one_min_passed == 0 && interval_count == INTERVAL_COUNT_ONE_MIN){
 8000f40:	4b38      	ldr	r3, [pc, #224]	; (8001024 <TIM2_IRQHandler+0x120>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d110      	bne.n	8000f6a <TIM2_IRQHandler+0x66>
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <TIM2_IRQHandler+0x11c>)
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f5a2 6116 	sub.w	r1, r2, #2400	; 0x960
 8000f52:	430b      	orrs	r3, r1
 8000f54:	d109      	bne.n	8000f6a <TIM2_IRQHandler+0x66>
			one_min_passed = 1;
 8000f56:	4b33      	ldr	r3, [pc, #204]	; (8001024 <TIM2_IRQHandler+0x120>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
			interval_count = 0;
 8000f5c:	4930      	ldr	r1, [pc, #192]	; (8001020 <TIM2_IRQHandler+0x11c>)
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
		}

		/* When one minute has passed*/
		if(one_min_passed) {
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <TIM2_IRQHandler+0x120>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d051      	beq.n	8001016 <TIM2_IRQHandler+0x112>
			/* When ten seconds have passed */
			if(interval_count == INTERVAL_COUNT_TEN_SEC) {
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <TIM2_IRQHandler+0x11c>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	d10e      	bne.n	8000f9e <TIM2_IRQHandler+0x9a>
				interval_count = 0;
 8000f80:	4927      	ldr	r1, [pc, #156]	; (8001020 <TIM2_IRQHandler+0x11c>)
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	e9c1 2300 	strd	r2, r3, [r1]
				loss_time_past+=10;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <TIM2_IRQHandler+0x124>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	330a      	adds	r3, #10
 8000f94:	4a24      	ldr	r2, [pc, #144]	; (8001028 <TIM2_IRQHandler+0x124>)
 8000f96:	6013      	str	r3, [r2, #0]
				flag_print = 1; // Signal message printing
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <TIM2_IRQHandler+0x128>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
			}

			/* Flash LEDs */
			if(ptr1 > 0) {
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <TIM2_IRQHandler+0x12c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d014      	beq.n	8000fd0 <TIM2_IRQHandler+0xcc>
				ptr1-=1;
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <TIM2_IRQHandler+0x12c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	4a20      	ldr	r2, [pc, #128]	; (8001030 <TIM2_IRQHandler+0x12c>)
 8000fae:	6013      	str	r3, [r2, #0]
				// Find current pair of bits
				uint8_t value = (preamble >> (ptr1 * 2)) & 0b11;
 8000fb0:	2399      	movs	r3, #153	; 0x99
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <TIM2_IRQHandler+0x12c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa42 f303 	asr.w	r3, r2, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	71bb      	strb	r3, [r7, #6]
				// Set LEDs
				leds_set(value);
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fe91 	bl	8000cf0 <leds_set>
					}
				}
			}
		}
	}
}
 8000fce:	e022      	b.n	8001016 <TIM2_IRQHandler+0x112>
				if(ptr2 > 0) {
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <TIM2_IRQHandler+0x130>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d01e      	beq.n	8001016 <TIM2_IRQHandler+0x112>
					ptr2-=1;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <TIM2_IRQHandler+0x130>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	4a15      	ldr	r2, [pc, #84]	; (8001034 <TIM2_IRQHandler+0x130>)
 8000fe0:	6013      	str	r3, [r2, #0]
					uint8_t value = (pid >> (ptr2 * 2)) & 0b11;
 8000fe2:	f641 53fc 	movw	r3, #7676	; 0x1dfc
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <TIM2_IRQHandler+0x130>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa42 f303 	asr.w	r3, r2, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	71fb      	strb	r3, [r7, #7]
					leds_set(value);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fe77 	bl	8000cf0 <leds_set>
					if(ptr2 == 0) {
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <TIM2_IRQHandler+0x130>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <TIM2_IRQHandler+0x112>
						ptr1 = 4;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <TIM2_IRQHandler+0x12c>)
 800100c:	2204      	movs	r2, #4
 800100e:	601a      	str	r2, [r3, #0]
						ptr2 = 8;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <TIM2_IRQHandler+0x130>)
 8001012:	2208      	movs	r2, #8
 8001014:	601a      	str	r2, [r3, #0]
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bdb0      	pop	{r4, r5, r7, pc}
 800101e:	bf00      	nop
 8001020:	200002d0 	.word	0x200002d0
 8001024:	200002cc 	.word	0x200002cc
 8001028:	200002d8 	.word	0x200002d8
 800102c:	20000310 	.word	0x20000310
 8001030:	20000128 	.word	0x20000128
 8001034:	2000012c 	.word	0x2000012c

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f000 fbb6 	bl	80017ae <HAL_Init>
  //project 2 init

  leds_init();
 8001042:	f7ff fde9 	bl	8000c18 <leds_init>
  	i2c_init();
 8001046:	f7ff fceb 	bl	8000a20 <i2c_init>
  	lsm6dsl_init();
 800104a:	f7ff fea3 	bl	8000d94 <lsm6dsl_init>
  	timer_init(TIM2);
 800104e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001052:	f000 fb0b 	bl	800166c <timer_init>

  	timer_set_ms(TIM2, 50); // Set time interval to 50 ms
 8001056:	2132      	movs	r1, #50	; 0x32
 8001058:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800105c:	f000 fb69 	bl	8001732 <timer_set_ms>
  	int16_t acceleration_x;
  	int16_t acceleration_y;
  	int16_t acceleration_z;
  	// project 2 init end
  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f89a 	bl	8001198 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 f91c 	bl	80012a0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001068:	f000 f8dc 	bl	8001224 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f000 ff07 	bl	8001e88 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f000 fc0c 	bl	8001898 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f000 fefd 	bl	8001e88 <HAL_GPIO_WritePin>

  ble_init();
 800108e:	f7ff f8f7 	bl	8000280 <ble_init>

  HAL_Delay(10);
 8001092:	200a      	movs	r0, #10
 8001094:	f000 fc00 	bl	8001898 <HAL_Delay>

  while (1)
  {
	  lsm6dsl_read_xyz(&acceleration_x, &acceleration_y, &acceleration_z);
 8001098:	1dba      	adds	r2, r7, #6
 800109a:	f107 0108 	add.w	r1, r7, #8
 800109e:	f107 030a 	add.w	r3, r7, #10
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fe8f 	bl	8000dc6 <lsm6dsl_read_xyz>

	  		int32_t net_acceleration_squared = acceleration_x * acceleration_x
 80010a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80010b0:	fb03 f202 	mul.w	r2, r3, r2
	  				+ acceleration_y * acceleration_y + acceleration_z * acceleration_z;
 80010b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80010b8:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80010bc:	fb01 f303 	mul.w	r3, r1, r3
 80010c0:	441a      	add	r2, r3
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010ca:	fb01 f303 	mul.w	r3, r1, r3
	  		int32_t net_acceleration_squared = acceleration_x * acceleration_x
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
	  		// Stationary
	  		if(net_acceleration_squared >= 113550336 && net_acceleration_squared <= 489736900) {
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4a24      	ldr	r2, [pc, #144]	; (8001168 <main+0x130>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	dd2d      	ble.n	8001136 <main+0xfe>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4a23      	ldr	r2, [pc, #140]	; (800116c <main+0x134>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	dc29      	bgt.n	8001136 <main+0xfe>
	  			// printf("S\n");
	  			if(!standby && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <main+0x138>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d120      	bne.n	800112c <main+0xf4>
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	4821      	ldr	r0, [pc, #132]	; (8001174 <main+0x13c>)
 80010ee:	f000 feb3 	bl	8001e58 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d019      	beq.n	800112c <main+0xf4>
	  				catchBLE();
 80010f8:	f7ff fad8 	bl	80006ac <catchBLE>
	  			if(!standby && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80010fc:	e033      	b.n	8001166 <main+0x12e>
	  			}
	  			else {
	  				// When printing flag is set
	  				while(flag_print == 1) {
	  					// Note: Adjust the buffer size as needed
	  					snprintf(message, sizeof(message), "Missing %d seconds", loss_time_past);
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <main+0x140>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <main+0x144>)
 8001104:	2132      	movs	r1, #50	; 0x32
 8001106:	481e      	ldr	r0, [pc, #120]	; (8001180 <main+0x148>)
 8001108:	f002 fb80 	bl	800380c <sniprintf>
	  					updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(message), (uint8_t*)message);
 800110c:	481c      	ldr	r0, [pc, #112]	; (8001180 <main+0x148>)
 800110e:	f7ff f85f 	bl	80001d0 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <main+0x148>)
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	4613      	mov	r3, r2
 800111c:	2200      	movs	r2, #0
 800111e:	4919      	ldr	r1, [pc, #100]	; (8001184 <main+0x14c>)
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <main+0x150>)
 8001122:	f7ff fc29 	bl	8000978 <updateCharValue>
	  					// Reset printing flag after message printed
	  					flag_print = 0;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <main+0x154>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
	  				while(flag_print == 1) {
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <main+0x154>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d0e4      	beq.n	80010fe <main+0xc6>
	  			if(!standby && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8001134:	e017      	b.n	8001166 <main+0x12e>
	  				}
	  			}
	  		}
	  		else{ // Moving
	  			/* Reset counters and time status */
	  			timer_reset(TIM2);
 8001136:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800113a:	f000 faed 	bl	8001718 <timer_reset>
	  			interval_count = 0;
 800113e:	4914      	ldr	r1, [pc, #80]	; (8001190 <main+0x158>)
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c1 2300 	strd	r2, r3, [r1]
	  			one_min_passed = 0;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <main+0x15c>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
	  			loss_time_past = 0;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <main+0x140>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

	  			leds_set(0b00); // Turn off LEDs
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fdc9 	bl	8000cf0 <leds_set>
	  			DisconnectAndSuspend();
 800115e:	f7ff febb 	bl	8000ed8 <DisconnectAndSuspend>
	  			ble_init();
 8001162:	f7ff f88d 	bl	8000280 <ble_init>
  {
 8001166:	e797      	b.n	8001098 <main+0x60>
 8001168:	06c4a3ff 	.word	0x06c4a3ff
 800116c:	1d30cac4 	.word	0x1d30cac4
 8001170:	2000030e 	.word	0x2000030e
 8001174:	48001000 	.word	0x48001000
 8001178:	200002d8 	.word	0x200002d8
 800117c:	0800404c 	.word	0x0800404c
 8001180:	200002dc 	.word	0x200002dc
 8001184:	200002c0 	.word	0x200002c0
 8001188:	200002b8 	.word	0x200002b8
 800118c:	20000310 	.word	0x20000310
 8001190:	200002d0 	.word	0x200002d0
 8001194:	200002cc 	.word	0x200002cc

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	2244      	movs	r2, #68	; 0x44
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fb64 	bl	8003874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011be:	f000 fead 	bl	8001f1c <HAL_PWREx_ControlVoltageScaling>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011c8:	f000 f902 	bl	80013d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011cc:	2310      	movs	r3, #16
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80011d8:	2370      	movs	r3, #112	; 0x70
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011dc:	2300      	movs	r3, #0
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 feef 	bl	8001fc8 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80011f0:	f000 f8ee 	bl	80013d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fab7 	bl	8002780 <HAL_RCC_ClockConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001218:	f000 f8da 	bl	80013d0 <Error_Handler>
  }
}
 800121c:	bf00      	nop
 800121e:	3758      	adds	r7, #88	; 0x58
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_SPI3_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_SPI3_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_SPI3_Init+0x74>)
 8001230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001234:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_SPI3_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_SPI3_Init+0x74>)
 800123e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001242:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_SPI3_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_SPI3_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_SPI3_Init+0x74>)
 8001252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001256:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_SPI3_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_SPI3_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_SPI3_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_SPI3_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_SPI3_Init+0x74>)
 8001272:	2207      	movs	r2, #7
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_SPI3_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_SPI3_Init+0x74>)
 800127e:	2208      	movs	r2, #8
 8001280:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_SPI3_Init+0x74>)
 8001284:	f001 fc68 	bl	8002b58 <HAL_SPI_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 f89f 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000314 	.word	0x20000314
 800129c:	40003c00 	.word	0x40003c00

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b6:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <MX_GPIO_Init+0x124>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	4a42      	ldr	r2, [pc, #264]	; (80013c4 <MX_GPIO_Init+0x124>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c2:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <MX_GPIO_Init+0x124>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <MX_GPIO_Init+0x124>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	4a3c      	ldr	r2, [pc, #240]	; (80013c4 <MX_GPIO_Init+0x124>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <MX_GPIO_Init+0x124>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <MX_GPIO_Init+0x124>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a36      	ldr	r2, [pc, #216]	; (80013c4 <MX_GPIO_Init+0x124>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <MX_GPIO_Init+0x124>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <MX_GPIO_Init+0x124>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a30      	ldr	r2, [pc, #192]	; (80013c4 <MX_GPIO_Init+0x124>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <MX_GPIO_Init+0x124>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <MX_GPIO_Init+0x124>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <MX_GPIO_Init+0x124>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <MX_GPIO_Init+0x124>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2120      	movs	r1, #32
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f000 fda7 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001340:	4821      	ldr	r0, [pc, #132]	; (80013c8 <MX_GPIO_Init+0x128>)
 8001342:	f000 fda1 	bl	8001e88 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f000 fd9a 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001354:	2340      	movs	r3, #64	; 0x40
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001358:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <MX_GPIO_Init+0x12c>)
 800136a:	f000 fbcb 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800136e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f000 fbbb 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800138e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <MX_GPIO_Init+0x128>)
 80013a8:	f000 fbac 	bl	8001b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2017      	movs	r0, #23
 80013b2:	f000 fb70 	bl	8001a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013b6:	2017      	movs	r0, #23
 80013b8:	f000 fb89 	bl	8001ace <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000c00 	.word	0x48000c00
 80013cc:	48001000 	.word	0x48001000

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_MspInit+0x44>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e6:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <HAL_MspInit+0x44>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6613      	str	r3, [r2, #96]	; 0x60
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_MspInit+0x44>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x44>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x44>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6593      	str	r3, [r2, #88]	; 0x58
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x44>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_SPI_MspInit+0x7c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d128      	bne.n	8001498 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_SPI_MspInit+0x80>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_SPI_MspInit+0x80>)
 800144c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001450:	6593      	str	r3, [r2, #88]	; 0x58
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_SPI_MspInit+0x80>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_SPI_MspInit+0x80>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_SPI_MspInit+0x80>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_SPI_MspInit+0x80>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001476:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001488:	2306      	movs	r3, #6
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_SPI_MspInit+0x84>)
 8001494:	f000 fb36 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40003c00 	.word	0x40003c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000800 	.word	0x48000800

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <NMI_Handler+0x4>

080014b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <MemManage_Handler+0x4>

080014be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <UsageFault_Handler+0x4>

080014ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f000 f9ae 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <EXTI9_5_IRQHandler+0x14>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 800150a:	2040      	movs	r0, #64	; 0x40
 800150c:	f000 fcd4 	bl	8001eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002c8 	.word	0x200002c8

08001518 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <_sbrk+0x50>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x16>
		heap_end = &end;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <_sbrk+0x50>)
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <_sbrk+0x54>)
 800152c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <_sbrk+0x50>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <_sbrk+0x50>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	466a      	mov	r2, sp
 800153e:	4293      	cmp	r3, r2
 8001540:	d907      	bls.n	8001552 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001542:	f002 f9af 	bl	80038a4 <__errno>
 8001546:	4603      	mov	r3, r0
 8001548:	220c      	movs	r2, #12
 800154a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	e006      	b.n	8001560 <_sbrk+0x48>
	}

	heap_end += incr;
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <_sbrk+0x50>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a03      	ldr	r2, [pc, #12]	; (8001568 <_sbrk+0x50>)
 800155c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000378 	.word	0x20000378
 800156c:	200004c8 	.word	0x200004c8

08001570 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <SystemInit+0x64>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <SystemInit+0x64>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <SystemInit+0x68>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <SystemInit+0x68>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <SystemInit+0x68>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <SystemInit+0x68>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <SystemInit+0x68>)
 800159c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <SystemInit+0x68>)
 80015a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <SystemInit+0x68>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <SystemInit+0x68>)
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <SystemInit+0x68>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SystemInit+0x64>)
 80015c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c6:	609a      	str	r2, [r3, #8]
#endif
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00
 80015d8:	40021000 	.word	0x40021000

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	; (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

	if(timer == TIM2) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167a:	d105      	bne.n	8001688 <timer_init+0x1c>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // Enable TIM2 clock
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <timer_init+0xa4>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	4a23      	ldr	r2, [pc, #140]	; (8001710 <timer_init+0xa4>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6593      	str	r3, [r2, #88]	; 0x58
	}

	if(timer == TIM3) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a22      	ldr	r2, [pc, #136]	; (8001714 <timer_init+0xa8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d105      	bne.n	800169c <timer_init+0x30>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN; // Enable TIM3 clock
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <timer_init+0xa4>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <timer_init+0xa4>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
	}

	timer->CR1 &= ~TIM_CR1_CEN; // Stop timer
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 0201 	bic.w	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	601a      	str	r2, [r3, #0]
	timer->SR = 0; // Clear timer status register
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
	timer->CNT = 0; // Clear timer count register
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

	timer->ARR = 0xFFFFFFFF; // Set auto-reload value to maximum (32-bit timer, upcounting)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c

	timer->DIER |= TIM_DIER_UIE; // Enable timer update interrupt internally
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	60da      	str	r2, [r3, #12]

	if(timer == TIM2) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ce:	d106      	bne.n	80016de <timer_init+0x72>
		NVIC_EnableIRQ(TIM2_IRQn); // Enable TIM2 update interrupt NVIC
 80016d0:	201c      	movs	r0, #28
 80016d2:	f7ff ff83 	bl	80015dc <__NVIC_EnableIRQ>
		NVIC_SetPriority(TIM2_IRQn, 0); // Set priority of the interrupt
 80016d6:	2100      	movs	r1, #0
 80016d8:	201c      	movs	r0, #28
 80016da:	f7ff ff9d 	bl	8001618 <__NVIC_SetPriority>
	}

	if(timer == TIM3) {
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <timer_init+0xa8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d106      	bne.n	80016f4 <timer_init+0x88>
		NVIC_EnableIRQ(TIM3_IRQn); // Enable TIM3 update interrupt NVIC
 80016e6:	201d      	movs	r0, #29
 80016e8:	f7ff ff78 	bl	80015dc <__NVIC_EnableIRQ>
		NVIC_SetPriority(TIM3_IRQn, 0); // Set priority of the interrupt
 80016ec:	2100      	movs	r1, #0
 80016ee:	201d      	movs	r0, #29
 80016f0:	f7ff ff92 	bl	8001618 <__NVIC_SetPriority>
	}

	timer->PSC = 200;// Decrease timer frequency to 8000000 / 200 = 40000 Hz
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	22c8      	movs	r2, #200	; 0xc8
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28

	timer->CR1 |= TIM_CR1_CEN; // Enable timer
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]

}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	40000400 	.word	0x40000400

08001718 <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	timer->CNT = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
	timer->ARR = 20 * period_ms - 1; // In each cycle, timer counts {ARR} times to reach {peroid_ms}/2 ms
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	3b01      	subs	r3, #1
 800174a:	461a      	mov	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001794 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001760:	f7ff ff06 	bl	8001570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <LoopForever+0x6>)
  ldr r1, =_edata
 8001766:	490d      	ldr	r1, [pc, #52]	; (800179c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <LoopForever+0xe>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800177c:	4c0a      	ldr	r4, [pc, #40]	; (80017a8 <LoopForever+0x16>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800178a:	f002 f891 	bl	80038b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178e:	f7ff fc53 	bl	8001038 <main>

08001792 <LoopForever>:

LoopForever:
    b LoopForever
 8001792:	e7fe      	b.n	8001792 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001794:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80017a0:	080040dc 	.word	0x080040dc
  ldr r2, =_sbss
 80017a4:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80017a8:	200004c8 	.word	0x200004c8

080017ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC1_2_IRQHandler>

080017ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 f961 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 f80e 	bl	80017e0 <HAL_InitTick>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	e001      	b.n	80017d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017d0:	f7ff fe04 	bl	80013dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d4:	79fb      	ldrb	r3, [r7, #7]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_InitTick+0x6c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d023      	beq.n	800183c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_InitTick+0x70>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_InitTick+0x6c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f96d 	bl	8001aea <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b0f      	cmp	r3, #15
 800181a:	d809      	bhi.n	8001830 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f000 f937 	bl	8001a96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_InitTick+0x74>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e007      	b.n	8001840 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e004      	b.n	8001840 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	e001      	b.n	8001840 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000138 	.word	0x20000138
 8001850:	20000130 	.word	0x20000130
 8001854:	20000134 	.word	0x20000134

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000138 	.word	0x20000138
 800187c:	2000037c 	.word	0x2000037c

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	2000037c 	.word	0x2000037c

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000138 	.word	0x20000138

080018e0 <__NVIC_SetPriorityGrouping>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f7ff ff8e 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff29 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff3e 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff8e 	bl	80019d4 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5d 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff31 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa2 	bl	8001a3c <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e17f      	b.n	8001e14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2101      	movs	r1, #1
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8171 	beq.w	8001e0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d005      	beq.n	8001b44 <HAL_GPIO_Init+0x40>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d130      	bne.n	8001ba6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	f003 0201 	and.w	r2, r3, #1
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d118      	bne.n	8001be4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f003 0201 	and.w	r2, r3, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d017      	beq.n	8001c20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d123      	bne.n	8001c74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	08da      	lsrs	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3208      	adds	r2, #8
 8001c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	6939      	ldr	r1, [r7, #16]
 8001c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80ac 	beq.w	8001e0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	4b5f      	ldr	r3, [pc, #380]	; (8001e34 <HAL_GPIO_Init+0x330>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cba:	4a5e      	ldr	r2, [pc, #376]	; (8001e34 <HAL_GPIO_Init+0x330>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc2:	4b5c      	ldr	r3, [pc, #368]	; (8001e34 <HAL_GPIO_Init+0x330>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cce:	4a5a      	ldr	r2, [pc, #360]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x242>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4f      	ldr	r2, [pc, #316]	; (8001e3c <HAL_GPIO_Init+0x338>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x23e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4e      	ldr	r2, [pc, #312]	; (8001e40 <HAL_GPIO_Init+0x33c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x23a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4d      	ldr	r2, [pc, #308]	; (8001e44 <HAL_GPIO_Init+0x340>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x236>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4c      	ldr	r2, [pc, #304]	; (8001e48 <HAL_GPIO_Init+0x344>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x232>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4b      	ldr	r2, [pc, #300]	; (8001e4c <HAL_GPIO_Init+0x348>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x22e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4a      	ldr	r2, [pc, #296]	; (8001e50 <HAL_GPIO_Init+0x34c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x22a>
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	e00c      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d2e:	2307      	movs	r3, #7
 8001d30:	e00a      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d32:	2305      	movs	r3, #5
 8001d34:	e008      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d36:	2304      	movs	r3, #4
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e004      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d46:	2300      	movs	r3, #0
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	f002 0203 	and.w	r2, r2, #3
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	4093      	lsls	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d58:	4937      	ldr	r1, [pc, #220]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d66:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_GPIO_Init+0x350>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d8a:	4a32      	ldr	r2, [pc, #200]	; (8001e54 <HAL_GPIO_Init+0x350>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d90:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <HAL_GPIO_Init+0x350>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001db4:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <HAL_GPIO_Init+0x350>)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_GPIO_Init+0x350>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dde:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <HAL_GPIO_Init+0x350>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_GPIO_Init+0x350>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <HAL_GPIO_Init+0x350>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f47f ae78 	bne.w	8001b14 <HAL_GPIO_Init+0x10>
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	48000400 	.word	0x48000400
 8001e40:	48000800 	.word	0x48000800
 8001e44:	48000c00 	.word	0x48000c00
 8001e48:	48001000 	.word	0x48001000
 8001e4c:	48001400 	.word	0x48001400
 8001e50:	48001800 	.word	0x48001800
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e001      	b.n	8001e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
 8001e94:	4613      	mov	r3, r2
 8001e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d006      	beq.n	8001edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f806 	bl	8001ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40007000 	.word	0x40007000

08001f1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f2a:	d130      	bne.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2c:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f38:	d038      	beq.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f42:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2232      	movs	r2, #50	; 0x32
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0c9b      	lsrs	r3, r3, #18
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f60:	e002      	b.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f74:	d102      	bne.n	8001f7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f2      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f88:	d110      	bne.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e00f      	b.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9a:	d007      	beq.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fa4:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001faa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	20000130 	.word	0x20000130
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e3ca      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fda:	4b97      	ldr	r3, [pc, #604]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe4:	4b94      	ldr	r3, [pc, #592]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80e4 	beq.w	80021c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_RCC_OscConfig+0x4a>
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b0c      	cmp	r3, #12
 8002006:	f040 808b 	bne.w	8002120 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b01      	cmp	r3, #1
 800200e:	f040 8087 	bne.w	8002120 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002012:	4b89      	ldr	r3, [pc, #548]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_RCC_OscConfig+0x62>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e3a2      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1a      	ldr	r2, [r3, #32]
 800202e:	4b82      	ldr	r3, [pc, #520]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_RCC_OscConfig+0x7c>
 800203a:	4b7f      	ldr	r3, [pc, #508]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002042:	e005      	b.n	8002050 <HAL_RCC_OscConfig+0x88>
 8002044:	4b7c      	ldr	r3, [pc, #496]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002050:	4293      	cmp	r3, r2
 8002052:	d223      	bcs.n	800209c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fd1d 	bl	8002a98 <RCC_SetFlashLatencyFromMSIRange>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e383      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002068:	4b73      	ldr	r3, [pc, #460]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a72      	ldr	r2, [pc, #456]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b70      	ldr	r3, [pc, #448]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	496d      	ldr	r1, [pc, #436]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002086:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	4968      	ldr	r1, [pc, #416]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
 800209a:	e025      	b.n	80020e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209c:	4b66      	ldr	r3, [pc, #408]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a65      	ldr	r2, [pc, #404]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b63      	ldr	r3, [pc, #396]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4960      	ldr	r1, [pc, #384]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ba:	4b5f      	ldr	r3, [pc, #380]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	495b      	ldr	r1, [pc, #364]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fcdd 	bl	8002a98 <RCC_SetFlashLatencyFromMSIRange>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e343      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e8:	f000 fc4a 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b52      	ldr	r3, [pc, #328]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	4950      	ldr	r1, [pc, #320]	; (800223c <HAL_RCC_OscConfig+0x274>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	4a4e      	ldr	r2, [pc, #312]	; (8002240 <HAL_RCC_OscConfig+0x278>)
 8002106:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002108:	4b4e      	ldr	r3, [pc, #312]	; (8002244 <HAL_RCC_OscConfig+0x27c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fb67 	bl	80017e0 <HAL_InitTick>
 8002112:	4603      	mov	r3, r0
 8002114:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d052      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	e327      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d032      	beq.n	800218e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a42      	ldr	r2, [pc, #264]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002134:	f7ff fba4 	bl	8001880 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800213c:	f7ff fba0 	bl	8001880 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e310      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a36      	ldr	r2, [pc, #216]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4931      	ldr	r1, [pc, #196]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002174:	4313      	orrs	r3, r2
 8002176:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	492c      	ldr	r1, [pc, #176]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	e01a      	b.n	80021c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a29      	ldr	r2, [pc, #164]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800219a:	f7ff fb71 	bl	8001880 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a2:	f7ff fb6d 	bl	8001880 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e2dd      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x1da>
 80021c0:	e000      	b.n	80021c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d074      	beq.n	80022ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d005      	beq.n	80021e2 <HAL_RCC_OscConfig+0x21a>
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	d10e      	bne.n	80021fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d10b      	bne.n	80021fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d064      	beq.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d160      	bne.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e2ba      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x24a>
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e026      	b.n	8002260 <HAL_RCC_OscConfig+0x298>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800221a:	d115      	bne.n	8002248 <HAL_RCC_OscConfig+0x280>
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 8002222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a02      	ldr	r2, [pc, #8]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800222e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x298>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	08004060 	.word	0x08004060
 8002240:	20000130 	.word	0x20000130
 8002244:	20000134 	.word	0x20000134
 8002248:	4ba0      	ldr	r3, [pc, #640]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a9f      	ldr	r2, [pc, #636]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b9d      	ldr	r3, [pc, #628]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a9c      	ldr	r2, [pc, #624]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff fb0a 	bl	8001880 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7ff fb06 	bl	8001880 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e276      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002282:	4b92      	ldr	r3, [pc, #584]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x2a8>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff faf6 	bl	8001880 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff faf2 	bl	8001880 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e262      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022aa:	4b88      	ldr	r3, [pc, #544]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x2d0>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d060      	beq.n	8002388 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_OscConfig+0x310>
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d119      	bne.n	8002306 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d116      	bne.n	8002306 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d8:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_OscConfig+0x328>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e23f      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	4973      	ldr	r1, [pc, #460]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002304:	e040      	b.n	8002388 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d023      	beq.n	8002356 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230e:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6e      	ldr	r2, [pc, #440]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231a:	f7ff fab1 	bl	8001880 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002322:	f7ff faad 	bl	8001880 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e21d      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002334:	4b65      	ldr	r3, [pc, #404]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	495f      	ldr	r1, [pc, #380]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
 8002354:	e018      	b.n	8002388 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002356:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5c      	ldr	r2, [pc, #368]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 800235c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7ff fa8d 	bl	8001880 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236a:	f7ff fa89 	bl	8001880 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e1f9      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d03c      	beq.n	800240e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239c:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 800239e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a2:	4a4a      	ldr	r2, [pc, #296]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7ff fa68 	bl	8001880 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7ff fa64 	bl	8001880 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1d4      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80023c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ef      	beq.n	80023b4 <HAL_RCC_OscConfig+0x3ec>
 80023d4:	e01b      	b.n	800240e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d6:	4b3d      	ldr	r3, [pc, #244]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023dc:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7ff fa4b 	bl	8001880 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ee:	f7ff fa47 	bl	8001880 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e1b7      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002400:	4b32      	ldr	r3, [pc, #200]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ef      	bne.n	80023ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80a6 	beq.w	8002568 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	4a26      	ldr	r2, [pc, #152]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002436:	6593      	str	r3, [r2, #88]	; 0x58
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002444:	2301      	movs	r3, #1
 8002446:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_RCC_OscConfig+0x508>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d118      	bne.n	8002486 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002454:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <HAL_RCC_OscConfig+0x508>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_RCC_OscConfig+0x508>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002460:	f7ff fa0e 	bl	8001880 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002468:	f7ff fa0a 	bl	8001880 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e17a      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_RCC_OscConfig+0x508>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4d8>
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800249e:	e029      	b.n	80024f4 <HAL_RCC_OscConfig+0x52c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d115      	bne.n	80024d4 <HAL_RCC_OscConfig+0x50c>
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ae:	4a07      	ldr	r2, [pc, #28]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	4a03      	ldr	r2, [pc, #12]	; (80024cc <HAL_RCC_OscConfig+0x504>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_OscConfig+0x52c>
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	4b9c      	ldr	r3, [pc, #624]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	4a9b      	ldr	r2, [pc, #620]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e4:	4b98      	ldr	r3, [pc, #608]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	4a97      	ldr	r2, [pc, #604]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d016      	beq.n	800252a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7ff f9c0 	bl	8001880 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002502:	e00a      	b.n	800251a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7ff f9bc 	bl	8001880 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e12a      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800251a:	4b8b      	ldr	r3, [pc, #556]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ed      	beq.n	8002504 <HAL_RCC_OscConfig+0x53c>
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7ff f9a9 	bl	8001880 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7ff f9a5 	bl	8001880 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e113      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002548:	4b7f      	ldr	r3, [pc, #508]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ed      	bne.n	8002532 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002556:	7ffb      	ldrb	r3, [r7, #31]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255c:	4b7a      	ldr	r3, [pc, #488]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	4a79      	ldr	r2, [pc, #484]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 8002562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002566:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80fe 	beq.w	800276e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	2b02      	cmp	r3, #2
 8002578:	f040 80d0 	bne.w	800271c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800257c:	4b72      	ldr	r3, [pc, #456]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0203 	and.w	r2, r3, #3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	429a      	cmp	r2, r3
 800258e:	d130      	bne.n	80025f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	3b01      	subs	r3, #1
 800259c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d127      	bne.n	80025f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d11f      	bne.n	80025f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025bc:	2a07      	cmp	r2, #7
 80025be:	bf14      	ite	ne
 80025c0:	2201      	movne	r2, #1
 80025c2:	2200      	moveq	r2, #0
 80025c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d113      	bne.n	80025f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	3b01      	subs	r3, #1
 80025d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d06e      	beq.n	80026d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	2b0c      	cmp	r3, #12
 80025f6:	d069      	beq.n	80026cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0ad      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002614:	4b4c      	ldr	r3, [pc, #304]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a4b      	ldr	r2, [pc, #300]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 800261a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800261e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002620:	f7ff f92e 	bl	8001880 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7ff f92a 	bl	8001880 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e09a      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263a:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002646:	4b40      	ldr	r3, [pc, #256]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	4b40      	ldr	r3, [pc, #256]	; (800274c <HAL_RCC_OscConfig+0x784>)
 800264c:	4013      	ands	r3, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002656:	3a01      	subs	r2, #1
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002660:	0212      	lsls	r2, r2, #8
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002668:	0852      	lsrs	r2, r2, #1
 800266a:	3a01      	subs	r2, #1
 800266c:	0552      	lsls	r2, r2, #21
 800266e:	4311      	orrs	r1, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002674:	0852      	lsrs	r2, r2, #1
 8002676:	3a01      	subs	r2, #1
 8002678:	0652      	lsls	r2, r2, #25
 800267a:	4311      	orrs	r1, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002680:	0912      	lsrs	r2, r2, #4
 8002682:	0452      	lsls	r2, r2, #17
 8002684:	430a      	orrs	r2, r1
 8002686:	4930      	ldr	r1, [pc, #192]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 8002688:	4313      	orrs	r3, r2
 800268a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800268c:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2d      	ldr	r2, [pc, #180]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002696:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026a4:	f7ff f8ec 	bl	8001880 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7ff f8e8 	bl	8001880 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e058      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ca:	e050      	b.n	800276e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e04f      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d148      	bne.n	800276e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80026e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 80026ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026f4:	f7ff f8c4 	bl	8001880 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7ff f8c0 	bl	8001880 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e030      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x734>
 800271a:	e028      	b.n	800276e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b0c      	cmp	r3, #12
 8002720:	d023      	beq.n	800276a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_RCC_OscConfig+0x780>)
 8002728:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800272c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7ff f8a7 	bl	8001880 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002734:	e00c      	b.n	8002750 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002736:	f7ff f8a3 	bl	8001880 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d905      	bls.n	8002750 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e013      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
 8002748:	40021000 	.word	0x40021000
 800274c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCC_OscConfig+0x7b0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ec      	bne.n	8002736 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_OscConfig+0x7b0>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	4905      	ldr	r1, [pc, #20]	; (8002778 <HAL_RCC_OscConfig+0x7b0>)
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_RCC_OscConfig+0x7b4>)
 8002764:	4013      	ands	r3, r2
 8002766:	60cb      	str	r3, [r1, #12]
 8002768:	e001      	b.n	800276e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	feeefffc 	.word	0xfeeefffc

08002780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0e7      	b.n	8002964 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b75      	ldr	r3, [pc, #468]	; (800296c <HAL_RCC_ClockConfig+0x1ec>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d910      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b72      	ldr	r3, [pc, #456]	; (800296c <HAL_RCC_ClockConfig+0x1ec>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 0207 	bic.w	r2, r3, #7
 80027aa:	4970      	ldr	r1, [pc, #448]	; (800296c <HAL_RCC_ClockConfig+0x1ec>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b6e      	ldr	r3, [pc, #440]	; (800296c <HAL_RCC_ClockConfig+0x1ec>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0cf      	b.n	8002964 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d010      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	4b66      	ldr	r3, [pc, #408]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027dc:	429a      	cmp	r2, r3
 80027de:	d908      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	4b63      	ldr	r3, [pc, #396]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4960      	ldr	r1, [pc, #384]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d04c      	beq.n	8002898 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002806:	4b5a      	ldr	r3, [pc, #360]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d121      	bne.n	8002856 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0a6      	b.n	8002964 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281e:	4b54      	ldr	r3, [pc, #336]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d115      	bne.n	8002856 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e09a      	b.n	8002964 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002836:	4b4e      	ldr	r3, [pc, #312]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e08e      	b.n	8002964 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002846:	4b4a      	ldr	r3, [pc, #296]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e086      	b.n	8002964 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002856:	4b46      	ldr	r3, [pc, #280]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4943      	ldr	r1, [pc, #268]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002868:	f7ff f80a 	bl	8001880 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7ff f806 	bl	8001880 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e06e      	b.n	8002964 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b3a      	ldr	r3, [pc, #232]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 020c 	and.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d1eb      	bne.n	8002870 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d010      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d208      	bcs.n	80028c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b4:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	492b      	ldr	r1, [pc, #172]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_RCC_ClockConfig+0x1ec>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d210      	bcs.n	80028f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_RCC_ClockConfig+0x1ec>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 0207 	bic.w	r2, r3, #7
 80028dc:	4923      	ldr	r1, [pc, #140]	; (800296c <HAL_RCC_ClockConfig+0x1ec>)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_RCC_ClockConfig+0x1ec>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e036      	b.n	8002964 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	4918      	ldr	r1, [pc, #96]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4910      	ldr	r1, [pc, #64]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002934:	f000 f824 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	490b      	ldr	r1, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x1f4>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
 8002950:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002952:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1fc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe ff41 	bl	80017e0 <HAL_InitTick>
 800295e:	4603      	mov	r3, r0
 8002960:	72fb      	strb	r3, [r7, #11]

  return status;
 8002962:	7afb      	ldrb	r3, [r7, #11]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40022000 	.word	0x40022000
 8002970:	40021000 	.word	0x40021000
 8002974:	08004060 	.word	0x08004060
 8002978:	20000130 	.word	0x20000130
 800297c:	20000134 	.word	0x20000134

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800298e:	4b3e      	ldr	r3, [pc, #248]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002998:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x108>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x34>
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d121      	bne.n	80029f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d11e      	bne.n	80029f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029b4:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029c0:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e005      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029dc:	4a2b      	ldr	r2, [pc, #172]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x10c>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10d      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d102      	bne.n	80029fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x110>)
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	e004      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	d134      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d003      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0xac>
 8002a24:	e005      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a28:	617b      	str	r3, [r7, #20]
      break;
 8002a2a:	e005      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a2e:	617b      	str	r3, [r7, #20]
      break;
 8002a30:	e002      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	617b      	str	r3, [r7, #20]
      break;
 8002a36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	3301      	adds	r3, #1
 8002a44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	fb03 f202 	mul.w	r2, r3, r2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	0e5b      	lsrs	r3, r3, #25
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a78:	69bb      	ldr	r3, [r7, #24]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08004070 	.word	0x08004070
 8002a90:	00f42400 	.word	0x00f42400
 8002a94:	007a1200 	.word	0x007a1200

08002a98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ab0:	f7ff fa26 	bl	8001f00 <HAL_PWREx_GetVoltageRange>
 8002ab4:	6178      	str	r0, [r7, #20]
 8002ab6:	e014      	b.n	8002ae2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac4:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ad0:	f7ff fa16 	bl	8001f00 <HAL_PWREx_GetVoltageRange>
 8002ad4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae8:	d10b      	bne.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d919      	bls.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2ba0      	cmp	r3, #160	; 0xa0
 8002af4:	d902      	bls.n	8002afc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002af6:	2302      	movs	r3, #2
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	e013      	b.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002afc:	2301      	movs	r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	e010      	b.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d902      	bls.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b08:	2303      	movs	r3, #3
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	e00a      	b.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d102      	bne.n	8002b1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b14:	2302      	movs	r3, #2
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	e004      	b.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b70      	cmp	r3, #112	; 0x70
 8002b1e:	d101      	bne.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b20:	2301      	movs	r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 0207 	bic.w	r2, r3, #7
 8002b2c:	4909      	ldr	r1, [pc, #36]	; (8002b54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b34:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d001      	beq.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40022000 	.word	0x40022000

08002b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e095      	b.n	8002c96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d108      	bne.n	8002b84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b7a:	d009      	beq.n	8002b90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
 8002b82:	e005      	b.n	8002b90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe fc3a 	bl	8001424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bd0:	d902      	bls.n	8002bd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	e002      	b.n	8002bde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002be6:	d007      	beq.n	8002bf8 <HAL_SPI_Init+0xa0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	ea42 0103 	orr.w	r1, r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	f003 0204 	and.w	r2, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c74:	ea42 0103 	orr.w	r1, r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b088      	sub	sp, #32
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_SPI_Transmit+0x22>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e15f      	b.n	8002f80 <HAL_SPI_Transmit+0x2e2>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc8:	f7fe fdda 	bl	8001880 <HAL_GetTick>
 8002ccc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d002      	beq.n	8002ce4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ce2:	e148      	b.n	8002f76 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Transmit+0x52>
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cf4:	e13f      	b.n	8002f76 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d40:	d10f      	bne.n	8002d62 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d007      	beq.n	8002d80 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d88:	d94f      	bls.n	8002e2a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Transmit+0xfa>
 8002d92:	8afb      	ldrh	r3, [r7, #22]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d142      	bne.n	8002e1e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	881a      	ldrh	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	1c9a      	adds	r2, r3, #2
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dbc:	e02f      	b.n	8002e1e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d112      	bne.n	8002df2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	1c9a      	adds	r2, r3, #2
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002df0:	e015      	b.n	8002e1e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df2:	f7fe fd45 	bl	8001880 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d803      	bhi.n	8002e0a <HAL_SPI_Transmit+0x16c>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d102      	bne.n	8002e10 <HAL_SPI_Transmit+0x172>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002e1c:	e0ab      	b.n	8002f76 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ca      	bne.n	8002dbe <HAL_SPI_Transmit+0x120>
 8002e28:	e080      	b.n	8002f2c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_SPI_Transmit+0x19a>
 8002e32:	8afb      	ldrh	r3, [r7, #22]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d174      	bne.n	8002f22 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d912      	bls.n	8002e68 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	881a      	ldrh	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	1c9a      	adds	r2, r3, #2
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b02      	subs	r3, #2
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e66:	e05c      	b.n	8002f22 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e8e:	e048      	b.n	8002f22 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d12b      	bne.n	8002ef6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d912      	bls.n	8002ece <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	1c9a      	adds	r2, r3, #2
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b02      	subs	r3, #2
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ecc:	e029      	b.n	8002f22 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ef4:	e015      	b.n	8002f22 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ef6:	f7fe fcc3 	bl	8001880 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d803      	bhi.n	8002f0e <HAL_SPI_Transmit+0x270>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d102      	bne.n	8002f14 <HAL_SPI_Transmit+0x276>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002f20:	e029      	b.n	8002f76 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1b1      	bne.n	8002e90 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	6839      	ldr	r1, [r7, #0]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fb69 	bl	8003608 <SPI_EndRxTxTransaction>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10a      	bne.n	8002f60 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	77fb      	strb	r3, [r7, #31]
 8002f6c:	e003      	b.n	8002f76 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f96:	2301      	movs	r3, #1
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x26>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e20a      	b.n	80033c4 <HAL_SPI_TransmitReceive+0x43c>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb6:	f7fe fc63 	bl	8001880 <HAL_GetTick>
 8002fba:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fc2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fd2:	7efb      	ldrb	r3, [r7, #27]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0x6e>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fde:	d106      	bne.n	8002fee <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_TransmitReceive+0x66>
 8002fe8:	7efb      	ldrb	r3, [r7, #27]
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d003      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ff4:	e1e0      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_SPI_TransmitReceive+0x80>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_TransmitReceive+0x80>
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800300e:	e1d3      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b04      	cmp	r3, #4
 800301a:	d003      	beq.n	8003024 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2205      	movs	r2, #5
 8003020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	887a      	ldrh	r2, [r7, #2]
 800304a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003066:	d802      	bhi.n	800306e <HAL_SPI_TransmitReceive+0xe6>
 8003068:	8a3b      	ldrh	r3, [r7, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d908      	bls.n	8003080 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	e007      	b.n	8003090 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800308e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d007      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030b6:	f240 8081 	bls.w	80031bc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x140>
 80030c2:	8a7b      	ldrh	r3, [r7, #18]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d16d      	bne.n	80031a4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	1c9a      	adds	r2, r3, #2
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ec:	e05a      	b.n	80031a4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d11b      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x1ac>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x1ac>
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	2b01      	cmp	r3, #1
 800310a:	d113      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	1c9a      	adds	r2, r3, #2
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d11c      	bne.n	800317c <HAL_SPI_TransmitReceive+0x1f4>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	b292      	uxth	r2, r2
 800315a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	1c9a      	adds	r2, r3, #2
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003178:	2301      	movs	r3, #1
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800317c:	f7fe fb80 	bl	8001880 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003188:	429a      	cmp	r2, r3
 800318a:	d80b      	bhi.n	80031a4 <HAL_SPI_TransmitReceive+0x21c>
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003192:	d007      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80031a2:	e109      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d19f      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x166>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d199      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x166>
 80031ba:	e0e3      	b.n	8003384 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_SPI_TransmitReceive+0x244>
 80031c4:	8a7b      	ldrh	r3, [r7, #18]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	f040 80cf 	bne.w	800336a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d912      	bls.n	80031fc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	881a      	ldrh	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	1c9a      	adds	r2, r3, #2
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b02      	subs	r3, #2
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031fa:	e0b6      	b.n	800336a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003222:	e0a2      	b.n	800336a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d134      	bne.n	800329c <HAL_SPI_TransmitReceive+0x314>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d02f      	beq.n	800329c <HAL_SPI_TransmitReceive+0x314>
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	2b01      	cmp	r3, #1
 8003240:	d12c      	bne.n	800329c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d912      	bls.n	8003272 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	1c9a      	adds	r2, r3, #2
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b02      	subs	r3, #2
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003270:	e012      	b.n	8003298 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	7812      	ldrb	r2, [r2, #0]
 800327e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d148      	bne.n	800333c <HAL_SPI_TransmitReceive+0x3b4>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d042      	beq.n	800333c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d923      	bls.n	800330a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	b292      	uxth	r2, r2
 80032ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b02      	subs	r3, #2
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d81f      	bhi.n	8003338 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	e016      	b.n	8003338 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f103 020c 	add.w	r2, r3, #12
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fe faa0 	bl	8001880 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x3cc>
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x3d2>
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	2b00      	cmp	r3, #0
 8003358:	d107      	bne.n	800336a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003368:	e026      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	f47f af57 	bne.w	8003224 <HAL_SPI_TransmitReceive+0x29c>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	f47f af50 	bne.w	8003224 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f93d 	bl	8003608 <SPI_EndRxTxTransaction>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ae:	e003      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3728      	adds	r7, #40	; 0x28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033dc:	f7fe fa50 	bl	8001880 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4413      	add	r3, r2
 80033ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033ec:	f7fe fa48 	bl	8001880 <HAL_GetTick>
 80033f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033f2:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	015b      	lsls	r3, r3, #5
 80033f8:	0d1b      	lsrs	r3, r3, #20
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003402:	e054      	b.n	80034ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d050      	beq.n	80034ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800340c:	f7fe fa38 	bl	8001880 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	429a      	cmp	r2, r3
 800341a:	d902      	bls.n	8003422 <SPI_WaitFlagStateUntilTimeout+0x56>
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d13d      	bne.n	800349e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003430:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343a:	d111      	bne.n	8003460 <SPI_WaitFlagStateUntilTimeout+0x94>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003444:	d004      	beq.n	8003450 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d107      	bne.n	8003460 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003468:	d10f      	bne.n	800348a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e017      	b.n	80034ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4013      	ands	r3, r2
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d19b      	bne.n	8003404 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000130 	.word	0x20000130

080034dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	; 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034ee:	f7fe f9c7 	bl	8001880 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80034fe:	f7fe f9bf 	bl	8001880 <HAL_GetTick>
 8003502:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800350c:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00da      	lsls	r2, r3, #3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	0d1b      	lsrs	r3, r3, #20
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003524:	e060      	b.n	80035e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800352c:	d107      	bne.n	800353e <SPI_WaitFifoStateUntilTimeout+0x62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d104      	bne.n	800353e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800353c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d050      	beq.n	80035e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003546:	f7fe f99b 	bl	8001880 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	429a      	cmp	r2, r3
 8003554:	d902      	bls.n	800355c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	2b00      	cmp	r3, #0
 800355a:	d13d      	bne.n	80035d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800356a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003574:	d111      	bne.n	800359a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357e:	d004      	beq.n	800358a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003588:	d107      	bne.n	800359a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003598:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a2:	d10f      	bne.n	80035c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e010      	b.n	80035fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d196      	bne.n	8003526 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3728      	adds	r7, #40	; 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000130 	.word	0x20000130

08003608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff ff5b 	bl	80034dc <SPI_WaitFifoStateUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e027      	b.n	800368c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2200      	movs	r2, #0
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff fec0 	bl	80033cc <SPI_WaitFlagStateUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e014      	b.n	800368c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2200      	movs	r2, #0
 800366a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff ff34 	bl	80034dc <SPI_WaitFifoStateUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e000      	b.n	800368c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <malloc>:
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <malloc+0xc>)
 8003696:	4601      	mov	r1, r0
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	f000 b82b 	b.w	80036f4 <_malloc_r>
 800369e:	bf00      	nop
 80036a0:	20000188 	.word	0x20000188

080036a4 <free>:
 80036a4:	4b02      	ldr	r3, [pc, #8]	; (80036b0 <free+0xc>)
 80036a6:	4601      	mov	r1, r0
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	f000 b935 	b.w	8003918 <_free_r>
 80036ae:	bf00      	nop
 80036b0:	20000188 	.word	0x20000188

080036b4 <sbrk_aligned>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	4e0e      	ldr	r6, [pc, #56]	; (80036f0 <sbrk_aligned+0x3c>)
 80036b8:	460c      	mov	r4, r1
 80036ba:	6831      	ldr	r1, [r6, #0]
 80036bc:	4605      	mov	r5, r0
 80036be:	b911      	cbnz	r1, 80036c6 <sbrk_aligned+0x12>
 80036c0:	f000 f8e0 	bl	8003884 <_sbrk_r>
 80036c4:	6030      	str	r0, [r6, #0]
 80036c6:	4621      	mov	r1, r4
 80036c8:	4628      	mov	r0, r5
 80036ca:	f000 f8db 	bl	8003884 <_sbrk_r>
 80036ce:	1c43      	adds	r3, r0, #1
 80036d0:	d00a      	beq.n	80036e8 <sbrk_aligned+0x34>
 80036d2:	1cc4      	adds	r4, r0, #3
 80036d4:	f024 0403 	bic.w	r4, r4, #3
 80036d8:	42a0      	cmp	r0, r4
 80036da:	d007      	beq.n	80036ec <sbrk_aligned+0x38>
 80036dc:	1a21      	subs	r1, r4, r0
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 f8d0 	bl	8003884 <_sbrk_r>
 80036e4:	3001      	adds	r0, #1
 80036e6:	d101      	bne.n	80036ec <sbrk_aligned+0x38>
 80036e8:	f04f 34ff 	mov.w	r4, #4294967295
 80036ec:	4620      	mov	r0, r4
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	20000384 	.word	0x20000384

080036f4 <_malloc_r>:
 80036f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f8:	1ccd      	adds	r5, r1, #3
 80036fa:	f025 0503 	bic.w	r5, r5, #3
 80036fe:	3508      	adds	r5, #8
 8003700:	2d0c      	cmp	r5, #12
 8003702:	bf38      	it	cc
 8003704:	250c      	movcc	r5, #12
 8003706:	2d00      	cmp	r5, #0
 8003708:	4607      	mov	r7, r0
 800370a:	db01      	blt.n	8003710 <_malloc_r+0x1c>
 800370c:	42a9      	cmp	r1, r5
 800370e:	d905      	bls.n	800371c <_malloc_r+0x28>
 8003710:	230c      	movs	r3, #12
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	2600      	movs	r6, #0
 8003716:	4630      	mov	r0, r6
 8003718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800371c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037f0 <_malloc_r+0xfc>
 8003720:	f000 f868 	bl	80037f4 <__malloc_lock>
 8003724:	f8d8 3000 	ldr.w	r3, [r8]
 8003728:	461c      	mov	r4, r3
 800372a:	bb5c      	cbnz	r4, 8003784 <_malloc_r+0x90>
 800372c:	4629      	mov	r1, r5
 800372e:	4638      	mov	r0, r7
 8003730:	f7ff ffc0 	bl	80036b4 <sbrk_aligned>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	4604      	mov	r4, r0
 8003738:	d155      	bne.n	80037e6 <_malloc_r+0xf2>
 800373a:	f8d8 4000 	ldr.w	r4, [r8]
 800373e:	4626      	mov	r6, r4
 8003740:	2e00      	cmp	r6, #0
 8003742:	d145      	bne.n	80037d0 <_malloc_r+0xdc>
 8003744:	2c00      	cmp	r4, #0
 8003746:	d048      	beq.n	80037da <_malloc_r+0xe6>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	4631      	mov	r1, r6
 800374c:	4638      	mov	r0, r7
 800374e:	eb04 0903 	add.w	r9, r4, r3
 8003752:	f000 f897 	bl	8003884 <_sbrk_r>
 8003756:	4581      	cmp	r9, r0
 8003758:	d13f      	bne.n	80037da <_malloc_r+0xe6>
 800375a:	6821      	ldr	r1, [r4, #0]
 800375c:	1a6d      	subs	r5, r5, r1
 800375e:	4629      	mov	r1, r5
 8003760:	4638      	mov	r0, r7
 8003762:	f7ff ffa7 	bl	80036b4 <sbrk_aligned>
 8003766:	3001      	adds	r0, #1
 8003768:	d037      	beq.n	80037da <_malloc_r+0xe6>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	442b      	add	r3, r5
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	f8d8 3000 	ldr.w	r3, [r8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d038      	beq.n	80037ea <_malloc_r+0xf6>
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	42a2      	cmp	r2, r4
 800377c:	d12b      	bne.n	80037d6 <_malloc_r+0xe2>
 800377e:	2200      	movs	r2, #0
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	e00f      	b.n	80037a4 <_malloc_r+0xb0>
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	1b52      	subs	r2, r2, r5
 8003788:	d41f      	bmi.n	80037ca <_malloc_r+0xd6>
 800378a:	2a0b      	cmp	r2, #11
 800378c:	d917      	bls.n	80037be <_malloc_r+0xca>
 800378e:	1961      	adds	r1, r4, r5
 8003790:	42a3      	cmp	r3, r4
 8003792:	6025      	str	r5, [r4, #0]
 8003794:	bf18      	it	ne
 8003796:	6059      	strne	r1, [r3, #4]
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	bf08      	it	eq
 800379c:	f8c8 1000 	streq.w	r1, [r8]
 80037a0:	5162      	str	r2, [r4, r5]
 80037a2:	604b      	str	r3, [r1, #4]
 80037a4:	4638      	mov	r0, r7
 80037a6:	f104 060b 	add.w	r6, r4, #11
 80037aa:	f000 f829 	bl	8003800 <__malloc_unlock>
 80037ae:	f026 0607 	bic.w	r6, r6, #7
 80037b2:	1d23      	adds	r3, r4, #4
 80037b4:	1af2      	subs	r2, r6, r3
 80037b6:	d0ae      	beq.n	8003716 <_malloc_r+0x22>
 80037b8:	1b9b      	subs	r3, r3, r6
 80037ba:	50a3      	str	r3, [r4, r2]
 80037bc:	e7ab      	b.n	8003716 <_malloc_r+0x22>
 80037be:	42a3      	cmp	r3, r4
 80037c0:	6862      	ldr	r2, [r4, #4]
 80037c2:	d1dd      	bne.n	8003780 <_malloc_r+0x8c>
 80037c4:	f8c8 2000 	str.w	r2, [r8]
 80037c8:	e7ec      	b.n	80037a4 <_malloc_r+0xb0>
 80037ca:	4623      	mov	r3, r4
 80037cc:	6864      	ldr	r4, [r4, #4]
 80037ce:	e7ac      	b.n	800372a <_malloc_r+0x36>
 80037d0:	4634      	mov	r4, r6
 80037d2:	6876      	ldr	r6, [r6, #4]
 80037d4:	e7b4      	b.n	8003740 <_malloc_r+0x4c>
 80037d6:	4613      	mov	r3, r2
 80037d8:	e7cc      	b.n	8003774 <_malloc_r+0x80>
 80037da:	230c      	movs	r3, #12
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	4638      	mov	r0, r7
 80037e0:	f000 f80e 	bl	8003800 <__malloc_unlock>
 80037e4:	e797      	b.n	8003716 <_malloc_r+0x22>
 80037e6:	6025      	str	r5, [r4, #0]
 80037e8:	e7dc      	b.n	80037a4 <_malloc_r+0xb0>
 80037ea:	605b      	str	r3, [r3, #4]
 80037ec:	deff      	udf	#255	; 0xff
 80037ee:	bf00      	nop
 80037f0:	20000380 	.word	0x20000380

080037f4 <__malloc_lock>:
 80037f4:	4801      	ldr	r0, [pc, #4]	; (80037fc <__malloc_lock+0x8>)
 80037f6:	f000 b87f 	b.w	80038f8 <__retarget_lock_acquire_recursive>
 80037fa:	bf00      	nop
 80037fc:	200004c4 	.word	0x200004c4

08003800 <__malloc_unlock>:
 8003800:	4801      	ldr	r0, [pc, #4]	; (8003808 <__malloc_unlock+0x8>)
 8003802:	f000 b87a 	b.w	80038fa <__retarget_lock_release_recursive>
 8003806:	bf00      	nop
 8003808:	200004c4 	.word	0x200004c4

0800380c <sniprintf>:
 800380c:	b40c      	push	{r2, r3}
 800380e:	b530      	push	{r4, r5, lr}
 8003810:	4b17      	ldr	r3, [pc, #92]	; (8003870 <sniprintf+0x64>)
 8003812:	1e0c      	subs	r4, r1, #0
 8003814:	681d      	ldr	r5, [r3, #0]
 8003816:	b09d      	sub	sp, #116	; 0x74
 8003818:	da08      	bge.n	800382c <sniprintf+0x20>
 800381a:	238b      	movs	r3, #139	; 0x8b
 800381c:	602b      	str	r3, [r5, #0]
 800381e:	f04f 30ff 	mov.w	r0, #4294967295
 8003822:	b01d      	add	sp, #116	; 0x74
 8003824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003828:	b002      	add	sp, #8
 800382a:	4770      	bx	lr
 800382c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003830:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003834:	bf14      	ite	ne
 8003836:	f104 33ff 	addne.w	r3, r4, #4294967295
 800383a:	4623      	moveq	r3, r4
 800383c:	9304      	str	r3, [sp, #16]
 800383e:	9307      	str	r3, [sp, #28]
 8003840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003844:	9002      	str	r0, [sp, #8]
 8003846:	9006      	str	r0, [sp, #24]
 8003848:	f8ad 3016 	strh.w	r3, [sp, #22]
 800384c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800384e:	ab21      	add	r3, sp, #132	; 0x84
 8003850:	a902      	add	r1, sp, #8
 8003852:	4628      	mov	r0, r5
 8003854:	9301      	str	r3, [sp, #4]
 8003856:	f000 f905 	bl	8003a64 <_svfiprintf_r>
 800385a:	1c43      	adds	r3, r0, #1
 800385c:	bfbc      	itt	lt
 800385e:	238b      	movlt	r3, #139	; 0x8b
 8003860:	602b      	strlt	r3, [r5, #0]
 8003862:	2c00      	cmp	r4, #0
 8003864:	d0dd      	beq.n	8003822 <sniprintf+0x16>
 8003866:	9b02      	ldr	r3, [sp, #8]
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e7d9      	b.n	8003822 <sniprintf+0x16>
 800386e:	bf00      	nop
 8003870:	20000188 	.word	0x20000188

08003874 <memset>:
 8003874:	4402      	add	r2, r0
 8003876:	4603      	mov	r3, r0
 8003878:	4293      	cmp	r3, r2
 800387a:	d100      	bne.n	800387e <memset+0xa>
 800387c:	4770      	bx	lr
 800387e:	f803 1b01 	strb.w	r1, [r3], #1
 8003882:	e7f9      	b.n	8003878 <memset+0x4>

08003884 <_sbrk_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4d06      	ldr	r5, [pc, #24]	; (80038a0 <_sbrk_r+0x1c>)
 8003888:	2300      	movs	r3, #0
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	f7fd fe42 	bl	8001518 <_sbrk>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_sbrk_r+0x1a>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_sbrk_r+0x1a>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	200004c0 	.word	0x200004c0

080038a4 <__errno>:
 80038a4:	4b01      	ldr	r3, [pc, #4]	; (80038ac <__errno+0x8>)
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000188 	.word	0x20000188

080038b0 <__libc_init_array>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	4d0d      	ldr	r5, [pc, #52]	; (80038e8 <__libc_init_array+0x38>)
 80038b4:	4c0d      	ldr	r4, [pc, #52]	; (80038ec <__libc_init_array+0x3c>)
 80038b6:	1b64      	subs	r4, r4, r5
 80038b8:	10a4      	asrs	r4, r4, #2
 80038ba:	2600      	movs	r6, #0
 80038bc:	42a6      	cmp	r6, r4
 80038be:	d109      	bne.n	80038d4 <__libc_init_array+0x24>
 80038c0:	4d0b      	ldr	r5, [pc, #44]	; (80038f0 <__libc_init_array+0x40>)
 80038c2:	4c0c      	ldr	r4, [pc, #48]	; (80038f4 <__libc_init_array+0x44>)
 80038c4:	f000 fbae 	bl	8004024 <_init>
 80038c8:	1b64      	subs	r4, r4, r5
 80038ca:	10a4      	asrs	r4, r4, #2
 80038cc:	2600      	movs	r6, #0
 80038ce:	42a6      	cmp	r6, r4
 80038d0:	d105      	bne.n	80038de <__libc_init_array+0x2e>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d8:	4798      	blx	r3
 80038da:	3601      	adds	r6, #1
 80038dc:	e7ee      	b.n	80038bc <__libc_init_array+0xc>
 80038de:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e2:	4798      	blx	r3
 80038e4:	3601      	adds	r6, #1
 80038e6:	e7f2      	b.n	80038ce <__libc_init_array+0x1e>
 80038e8:	080040d4 	.word	0x080040d4
 80038ec:	080040d4 	.word	0x080040d4
 80038f0:	080040d4 	.word	0x080040d4
 80038f4:	080040d8 	.word	0x080040d8

080038f8 <__retarget_lock_acquire_recursive>:
 80038f8:	4770      	bx	lr

080038fa <__retarget_lock_release_recursive>:
 80038fa:	4770      	bx	lr

080038fc <memcpy>:
 80038fc:	440a      	add	r2, r1
 80038fe:	4291      	cmp	r1, r2
 8003900:	f100 33ff 	add.w	r3, r0, #4294967295
 8003904:	d100      	bne.n	8003908 <memcpy+0xc>
 8003906:	4770      	bx	lr
 8003908:	b510      	push	{r4, lr}
 800390a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800390e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003912:	4291      	cmp	r1, r2
 8003914:	d1f9      	bne.n	800390a <memcpy+0xe>
 8003916:	bd10      	pop	{r4, pc}

08003918 <_free_r>:
 8003918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800391a:	2900      	cmp	r1, #0
 800391c:	d044      	beq.n	80039a8 <_free_r+0x90>
 800391e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003922:	9001      	str	r0, [sp, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f1a1 0404 	sub.w	r4, r1, #4
 800392a:	bfb8      	it	lt
 800392c:	18e4      	addlt	r4, r4, r3
 800392e:	f7ff ff61 	bl	80037f4 <__malloc_lock>
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <_free_r+0x94>)
 8003934:	9801      	ldr	r0, [sp, #4]
 8003936:	6813      	ldr	r3, [r2, #0]
 8003938:	b933      	cbnz	r3, 8003948 <_free_r+0x30>
 800393a:	6063      	str	r3, [r4, #4]
 800393c:	6014      	str	r4, [r2, #0]
 800393e:	b003      	add	sp, #12
 8003940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003944:	f7ff bf5c 	b.w	8003800 <__malloc_unlock>
 8003948:	42a3      	cmp	r3, r4
 800394a:	d908      	bls.n	800395e <_free_r+0x46>
 800394c:	6825      	ldr	r5, [r4, #0]
 800394e:	1961      	adds	r1, r4, r5
 8003950:	428b      	cmp	r3, r1
 8003952:	bf01      	itttt	eq
 8003954:	6819      	ldreq	r1, [r3, #0]
 8003956:	685b      	ldreq	r3, [r3, #4]
 8003958:	1949      	addeq	r1, r1, r5
 800395a:	6021      	streq	r1, [r4, #0]
 800395c:	e7ed      	b.n	800393a <_free_r+0x22>
 800395e:	461a      	mov	r2, r3
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	b10b      	cbz	r3, 8003968 <_free_r+0x50>
 8003964:	42a3      	cmp	r3, r4
 8003966:	d9fa      	bls.n	800395e <_free_r+0x46>
 8003968:	6811      	ldr	r1, [r2, #0]
 800396a:	1855      	adds	r5, r2, r1
 800396c:	42a5      	cmp	r5, r4
 800396e:	d10b      	bne.n	8003988 <_free_r+0x70>
 8003970:	6824      	ldr	r4, [r4, #0]
 8003972:	4421      	add	r1, r4
 8003974:	1854      	adds	r4, r2, r1
 8003976:	42a3      	cmp	r3, r4
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	d1e0      	bne.n	800393e <_free_r+0x26>
 800397c:	681c      	ldr	r4, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	6053      	str	r3, [r2, #4]
 8003982:	440c      	add	r4, r1
 8003984:	6014      	str	r4, [r2, #0]
 8003986:	e7da      	b.n	800393e <_free_r+0x26>
 8003988:	d902      	bls.n	8003990 <_free_r+0x78>
 800398a:	230c      	movs	r3, #12
 800398c:	6003      	str	r3, [r0, #0]
 800398e:	e7d6      	b.n	800393e <_free_r+0x26>
 8003990:	6825      	ldr	r5, [r4, #0]
 8003992:	1961      	adds	r1, r4, r5
 8003994:	428b      	cmp	r3, r1
 8003996:	bf04      	itt	eq
 8003998:	6819      	ldreq	r1, [r3, #0]
 800399a:	685b      	ldreq	r3, [r3, #4]
 800399c:	6063      	str	r3, [r4, #4]
 800399e:	bf04      	itt	eq
 80039a0:	1949      	addeq	r1, r1, r5
 80039a2:	6021      	streq	r1, [r4, #0]
 80039a4:	6054      	str	r4, [r2, #4]
 80039a6:	e7ca      	b.n	800393e <_free_r+0x26>
 80039a8:	b003      	add	sp, #12
 80039aa:	bd30      	pop	{r4, r5, pc}
 80039ac:	20000380 	.word	0x20000380

080039b0 <__ssputs_r>:
 80039b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b4:	688e      	ldr	r6, [r1, #8]
 80039b6:	461f      	mov	r7, r3
 80039b8:	42be      	cmp	r6, r7
 80039ba:	680b      	ldr	r3, [r1, #0]
 80039bc:	4682      	mov	sl, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	4690      	mov	r8, r2
 80039c2:	d82c      	bhi.n	8003a1e <__ssputs_r+0x6e>
 80039c4:	898a      	ldrh	r2, [r1, #12]
 80039c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039ca:	d026      	beq.n	8003a1a <__ssputs_r+0x6a>
 80039cc:	6965      	ldr	r5, [r4, #20]
 80039ce:	6909      	ldr	r1, [r1, #16]
 80039d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039d4:	eba3 0901 	sub.w	r9, r3, r1
 80039d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039dc:	1c7b      	adds	r3, r7, #1
 80039de:	444b      	add	r3, r9
 80039e0:	106d      	asrs	r5, r5, #1
 80039e2:	429d      	cmp	r5, r3
 80039e4:	bf38      	it	cc
 80039e6:	461d      	movcc	r5, r3
 80039e8:	0553      	lsls	r3, r2, #21
 80039ea:	d527      	bpl.n	8003a3c <__ssputs_r+0x8c>
 80039ec:	4629      	mov	r1, r5
 80039ee:	f7ff fe81 	bl	80036f4 <_malloc_r>
 80039f2:	4606      	mov	r6, r0
 80039f4:	b360      	cbz	r0, 8003a50 <__ssputs_r+0xa0>
 80039f6:	6921      	ldr	r1, [r4, #16]
 80039f8:	464a      	mov	r2, r9
 80039fa:	f7ff ff7f 	bl	80038fc <memcpy>
 80039fe:	89a3      	ldrh	r3, [r4, #12]
 8003a00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a08:	81a3      	strh	r3, [r4, #12]
 8003a0a:	6126      	str	r6, [r4, #16]
 8003a0c:	6165      	str	r5, [r4, #20]
 8003a0e:	444e      	add	r6, r9
 8003a10:	eba5 0509 	sub.w	r5, r5, r9
 8003a14:	6026      	str	r6, [r4, #0]
 8003a16:	60a5      	str	r5, [r4, #8]
 8003a18:	463e      	mov	r6, r7
 8003a1a:	42be      	cmp	r6, r7
 8003a1c:	d900      	bls.n	8003a20 <__ssputs_r+0x70>
 8003a1e:	463e      	mov	r6, r7
 8003a20:	6820      	ldr	r0, [r4, #0]
 8003a22:	4632      	mov	r2, r6
 8003a24:	4641      	mov	r1, r8
 8003a26:	f000 faab 	bl	8003f80 <memmove>
 8003a2a:	68a3      	ldr	r3, [r4, #8]
 8003a2c:	1b9b      	subs	r3, r3, r6
 8003a2e:	60a3      	str	r3, [r4, #8]
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	4433      	add	r3, r6
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	2000      	movs	r0, #0
 8003a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a3c:	462a      	mov	r2, r5
 8003a3e:	f000 fab9 	bl	8003fb4 <_realloc_r>
 8003a42:	4606      	mov	r6, r0
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d1e0      	bne.n	8003a0a <__ssputs_r+0x5a>
 8003a48:	6921      	ldr	r1, [r4, #16]
 8003a4a:	4650      	mov	r0, sl
 8003a4c:	f7ff ff64 	bl	8003918 <_free_r>
 8003a50:	230c      	movs	r3, #12
 8003a52:	f8ca 3000 	str.w	r3, [sl]
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a62:	e7e9      	b.n	8003a38 <__ssputs_r+0x88>

08003a64 <_svfiprintf_r>:
 8003a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a68:	4698      	mov	r8, r3
 8003a6a:	898b      	ldrh	r3, [r1, #12]
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	b09d      	sub	sp, #116	; 0x74
 8003a70:	4607      	mov	r7, r0
 8003a72:	460d      	mov	r5, r1
 8003a74:	4614      	mov	r4, r2
 8003a76:	d50e      	bpl.n	8003a96 <_svfiprintf_r+0x32>
 8003a78:	690b      	ldr	r3, [r1, #16]
 8003a7a:	b963      	cbnz	r3, 8003a96 <_svfiprintf_r+0x32>
 8003a7c:	2140      	movs	r1, #64	; 0x40
 8003a7e:	f7ff fe39 	bl	80036f4 <_malloc_r>
 8003a82:	6028      	str	r0, [r5, #0]
 8003a84:	6128      	str	r0, [r5, #16]
 8003a86:	b920      	cbnz	r0, 8003a92 <_svfiprintf_r+0x2e>
 8003a88:	230c      	movs	r3, #12
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	e0d0      	b.n	8003c34 <_svfiprintf_r+0x1d0>
 8003a92:	2340      	movs	r3, #64	; 0x40
 8003a94:	616b      	str	r3, [r5, #20]
 8003a96:	2300      	movs	r3, #0
 8003a98:	9309      	str	r3, [sp, #36]	; 0x24
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aa4:	2330      	movs	r3, #48	; 0x30
 8003aa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c4c <_svfiprintf_r+0x1e8>
 8003aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aae:	f04f 0901 	mov.w	r9, #1
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	469a      	mov	sl, r3
 8003ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aba:	b10a      	cbz	r2, 8003ac0 <_svfiprintf_r+0x5c>
 8003abc:	2a25      	cmp	r2, #37	; 0x25
 8003abe:	d1f9      	bne.n	8003ab4 <_svfiprintf_r+0x50>
 8003ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ac4:	d00b      	beq.n	8003ade <_svfiprintf_r+0x7a>
 8003ac6:	465b      	mov	r3, fp
 8003ac8:	4622      	mov	r2, r4
 8003aca:	4629      	mov	r1, r5
 8003acc:	4638      	mov	r0, r7
 8003ace:	f7ff ff6f 	bl	80039b0 <__ssputs_r>
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	f000 80a9 	beq.w	8003c2a <_svfiprintf_r+0x1c6>
 8003ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ada:	445a      	add	r2, fp
 8003adc:	9209      	str	r2, [sp, #36]	; 0x24
 8003ade:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80a1 	beq.w	8003c2a <_svfiprintf_r+0x1c6>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f04f 32ff 	mov.w	r2, #4294967295
 8003aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003af2:	f10a 0a01 	add.w	sl, sl, #1
 8003af6:	9304      	str	r3, [sp, #16]
 8003af8:	9307      	str	r3, [sp, #28]
 8003afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003afe:	931a      	str	r3, [sp, #104]	; 0x68
 8003b00:	4654      	mov	r4, sl
 8003b02:	2205      	movs	r2, #5
 8003b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b08:	4850      	ldr	r0, [pc, #320]	; (8003c4c <_svfiprintf_r+0x1e8>)
 8003b0a:	f7fc fb69 	bl	80001e0 <memchr>
 8003b0e:	9a04      	ldr	r2, [sp, #16]
 8003b10:	b9d8      	cbnz	r0, 8003b4a <_svfiprintf_r+0xe6>
 8003b12:	06d0      	lsls	r0, r2, #27
 8003b14:	bf44      	itt	mi
 8003b16:	2320      	movmi	r3, #32
 8003b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b1c:	0711      	lsls	r1, r2, #28
 8003b1e:	bf44      	itt	mi
 8003b20:	232b      	movmi	r3, #43	; 0x2b
 8003b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b26:	f89a 3000 	ldrb.w	r3, [sl]
 8003b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b2c:	d015      	beq.n	8003b5a <_svfiprintf_r+0xf6>
 8003b2e:	9a07      	ldr	r2, [sp, #28]
 8003b30:	4654      	mov	r4, sl
 8003b32:	2000      	movs	r0, #0
 8003b34:	f04f 0c0a 	mov.w	ip, #10
 8003b38:	4621      	mov	r1, r4
 8003b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b3e:	3b30      	subs	r3, #48	; 0x30
 8003b40:	2b09      	cmp	r3, #9
 8003b42:	d94d      	bls.n	8003be0 <_svfiprintf_r+0x17c>
 8003b44:	b1b0      	cbz	r0, 8003b74 <_svfiprintf_r+0x110>
 8003b46:	9207      	str	r2, [sp, #28]
 8003b48:	e014      	b.n	8003b74 <_svfiprintf_r+0x110>
 8003b4a:	eba0 0308 	sub.w	r3, r0, r8
 8003b4e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b52:	4313      	orrs	r3, r2
 8003b54:	9304      	str	r3, [sp, #16]
 8003b56:	46a2      	mov	sl, r4
 8003b58:	e7d2      	b.n	8003b00 <_svfiprintf_r+0x9c>
 8003b5a:	9b03      	ldr	r3, [sp, #12]
 8003b5c:	1d19      	adds	r1, r3, #4
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	9103      	str	r1, [sp, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bfbb      	ittet	lt
 8003b66:	425b      	neglt	r3, r3
 8003b68:	f042 0202 	orrlt.w	r2, r2, #2
 8003b6c:	9307      	strge	r3, [sp, #28]
 8003b6e:	9307      	strlt	r3, [sp, #28]
 8003b70:	bfb8      	it	lt
 8003b72:	9204      	strlt	r2, [sp, #16]
 8003b74:	7823      	ldrb	r3, [r4, #0]
 8003b76:	2b2e      	cmp	r3, #46	; 0x2e
 8003b78:	d10c      	bne.n	8003b94 <_svfiprintf_r+0x130>
 8003b7a:	7863      	ldrb	r3, [r4, #1]
 8003b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b7e:	d134      	bne.n	8003bea <_svfiprintf_r+0x186>
 8003b80:	9b03      	ldr	r3, [sp, #12]
 8003b82:	1d1a      	adds	r2, r3, #4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	9203      	str	r2, [sp, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bfb8      	it	lt
 8003b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b90:	3402      	adds	r4, #2
 8003b92:	9305      	str	r3, [sp, #20]
 8003b94:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003c5c <_svfiprintf_r+0x1f8>
 8003b98:	7821      	ldrb	r1, [r4, #0]
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	4650      	mov	r0, sl
 8003b9e:	f7fc fb1f 	bl	80001e0 <memchr>
 8003ba2:	b138      	cbz	r0, 8003bb4 <_svfiprintf_r+0x150>
 8003ba4:	9b04      	ldr	r3, [sp, #16]
 8003ba6:	eba0 000a 	sub.w	r0, r0, sl
 8003baa:	2240      	movs	r2, #64	; 0x40
 8003bac:	4082      	lsls	r2, r0
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	3401      	adds	r4, #1
 8003bb2:	9304      	str	r3, [sp, #16]
 8003bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb8:	4825      	ldr	r0, [pc, #148]	; (8003c50 <_svfiprintf_r+0x1ec>)
 8003bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bbe:	2206      	movs	r2, #6
 8003bc0:	f7fc fb0e 	bl	80001e0 <memchr>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d038      	beq.n	8003c3a <_svfiprintf_r+0x1d6>
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <_svfiprintf_r+0x1f0>)
 8003bca:	bb1b      	cbnz	r3, 8003c14 <_svfiprintf_r+0x1b0>
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	3307      	adds	r3, #7
 8003bd0:	f023 0307 	bic.w	r3, r3, #7
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	9303      	str	r3, [sp, #12]
 8003bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bda:	4433      	add	r3, r6
 8003bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8003bde:	e768      	b.n	8003ab2 <_svfiprintf_r+0x4e>
 8003be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003be4:	460c      	mov	r4, r1
 8003be6:	2001      	movs	r0, #1
 8003be8:	e7a6      	b.n	8003b38 <_svfiprintf_r+0xd4>
 8003bea:	2300      	movs	r3, #0
 8003bec:	3401      	adds	r4, #1
 8003bee:	9305      	str	r3, [sp, #20]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f04f 0c0a 	mov.w	ip, #10
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bfc:	3a30      	subs	r2, #48	; 0x30
 8003bfe:	2a09      	cmp	r2, #9
 8003c00:	d903      	bls.n	8003c0a <_svfiprintf_r+0x1a6>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0c6      	beq.n	8003b94 <_svfiprintf_r+0x130>
 8003c06:	9105      	str	r1, [sp, #20]
 8003c08:	e7c4      	b.n	8003b94 <_svfiprintf_r+0x130>
 8003c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c0e:	4604      	mov	r4, r0
 8003c10:	2301      	movs	r3, #1
 8003c12:	e7f0      	b.n	8003bf6 <_svfiprintf_r+0x192>
 8003c14:	ab03      	add	r3, sp, #12
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	462a      	mov	r2, r5
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <_svfiprintf_r+0x1f4>)
 8003c1c:	a904      	add	r1, sp, #16
 8003c1e:	4638      	mov	r0, r7
 8003c20:	f3af 8000 	nop.w
 8003c24:	1c42      	adds	r2, r0, #1
 8003c26:	4606      	mov	r6, r0
 8003c28:	d1d6      	bne.n	8003bd8 <_svfiprintf_r+0x174>
 8003c2a:	89ab      	ldrh	r3, [r5, #12]
 8003c2c:	065b      	lsls	r3, r3, #25
 8003c2e:	f53f af2d 	bmi.w	8003a8c <_svfiprintf_r+0x28>
 8003c32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c34:	b01d      	add	sp, #116	; 0x74
 8003c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3a:	ab03      	add	r3, sp, #12
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	462a      	mov	r2, r5
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <_svfiprintf_r+0x1f4>)
 8003c42:	a904      	add	r1, sp, #16
 8003c44:	4638      	mov	r0, r7
 8003c46:	f000 f879 	bl	8003d3c <_printf_i>
 8003c4a:	e7eb      	b.n	8003c24 <_svfiprintf_r+0x1c0>
 8003c4c:	080040a0 	.word	0x080040a0
 8003c50:	080040aa 	.word	0x080040aa
 8003c54:	00000000 	.word	0x00000000
 8003c58:	080039b1 	.word	0x080039b1
 8003c5c:	080040a6 	.word	0x080040a6

08003c60 <_printf_common>:
 8003c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	4616      	mov	r6, r2
 8003c66:	4699      	mov	r9, r3
 8003c68:	688a      	ldr	r2, [r1, #8]
 8003c6a:	690b      	ldr	r3, [r1, #16]
 8003c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bfb8      	it	lt
 8003c74:	4613      	movlt	r3, r2
 8003c76:	6033      	str	r3, [r6, #0]
 8003c78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c7c:	4607      	mov	r7, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	b10a      	cbz	r2, 8003c86 <_printf_common+0x26>
 8003c82:	3301      	adds	r3, #1
 8003c84:	6033      	str	r3, [r6, #0]
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	0699      	lsls	r1, r3, #26
 8003c8a:	bf42      	ittt	mi
 8003c8c:	6833      	ldrmi	r3, [r6, #0]
 8003c8e:	3302      	addmi	r3, #2
 8003c90:	6033      	strmi	r3, [r6, #0]
 8003c92:	6825      	ldr	r5, [r4, #0]
 8003c94:	f015 0506 	ands.w	r5, r5, #6
 8003c98:	d106      	bne.n	8003ca8 <_printf_common+0x48>
 8003c9a:	f104 0a19 	add.w	sl, r4, #25
 8003c9e:	68e3      	ldr	r3, [r4, #12]
 8003ca0:	6832      	ldr	r2, [r6, #0]
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	42ab      	cmp	r3, r5
 8003ca6:	dc26      	bgt.n	8003cf6 <_printf_common+0x96>
 8003ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cac:	1e13      	subs	r3, r2, #0
 8003cae:	6822      	ldr	r2, [r4, #0]
 8003cb0:	bf18      	it	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	0692      	lsls	r2, r2, #26
 8003cb6:	d42b      	bmi.n	8003d10 <_printf_common+0xb0>
 8003cb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	47c0      	blx	r8
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	d01e      	beq.n	8003d04 <_printf_common+0xa4>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	6922      	ldr	r2, [r4, #16]
 8003cca:	f003 0306 	and.w	r3, r3, #6
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	bf02      	ittt	eq
 8003cd2:	68e5      	ldreq	r5, [r4, #12]
 8003cd4:	6833      	ldreq	r3, [r6, #0]
 8003cd6:	1aed      	subeq	r5, r5, r3
 8003cd8:	68a3      	ldr	r3, [r4, #8]
 8003cda:	bf0c      	ite	eq
 8003cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ce0:	2500      	movne	r5, #0
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	bfc4      	itt	gt
 8003ce6:	1a9b      	subgt	r3, r3, r2
 8003ce8:	18ed      	addgt	r5, r5, r3
 8003cea:	2600      	movs	r6, #0
 8003cec:	341a      	adds	r4, #26
 8003cee:	42b5      	cmp	r5, r6
 8003cf0:	d11a      	bne.n	8003d28 <_printf_common+0xc8>
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	e008      	b.n	8003d08 <_printf_common+0xa8>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4652      	mov	r2, sl
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	47c0      	blx	r8
 8003d00:	3001      	adds	r0, #1
 8003d02:	d103      	bne.n	8003d0c <_printf_common+0xac>
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0c:	3501      	adds	r5, #1
 8003d0e:	e7c6      	b.n	8003c9e <_printf_common+0x3e>
 8003d10:	18e1      	adds	r1, r4, r3
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	2030      	movs	r0, #48	; 0x30
 8003d16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d1a:	4422      	add	r2, r4
 8003d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d24:	3302      	adds	r3, #2
 8003d26:	e7c7      	b.n	8003cb8 <_printf_common+0x58>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	4638      	mov	r0, r7
 8003d30:	47c0      	blx	r8
 8003d32:	3001      	adds	r0, #1
 8003d34:	d0e6      	beq.n	8003d04 <_printf_common+0xa4>
 8003d36:	3601      	adds	r6, #1
 8003d38:	e7d9      	b.n	8003cee <_printf_common+0x8e>
	...

08003d3c <_printf_i>:
 8003d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d40:	7e0f      	ldrb	r7, [r1, #24]
 8003d42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d44:	2f78      	cmp	r7, #120	; 0x78
 8003d46:	4691      	mov	r9, r2
 8003d48:	4680      	mov	r8, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	469a      	mov	sl, r3
 8003d4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d52:	d807      	bhi.n	8003d64 <_printf_i+0x28>
 8003d54:	2f62      	cmp	r7, #98	; 0x62
 8003d56:	d80a      	bhi.n	8003d6e <_printf_i+0x32>
 8003d58:	2f00      	cmp	r7, #0
 8003d5a:	f000 80d4 	beq.w	8003f06 <_printf_i+0x1ca>
 8003d5e:	2f58      	cmp	r7, #88	; 0x58
 8003d60:	f000 80c0 	beq.w	8003ee4 <_printf_i+0x1a8>
 8003d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d6c:	e03a      	b.n	8003de4 <_printf_i+0xa8>
 8003d6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d72:	2b15      	cmp	r3, #21
 8003d74:	d8f6      	bhi.n	8003d64 <_printf_i+0x28>
 8003d76:	a101      	add	r1, pc, #4	; (adr r1, 8003d7c <_printf_i+0x40>)
 8003d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d7c:	08003dd5 	.word	0x08003dd5
 8003d80:	08003de9 	.word	0x08003de9
 8003d84:	08003d65 	.word	0x08003d65
 8003d88:	08003d65 	.word	0x08003d65
 8003d8c:	08003d65 	.word	0x08003d65
 8003d90:	08003d65 	.word	0x08003d65
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003d65 	.word	0x08003d65
 8003d9c:	08003d65 	.word	0x08003d65
 8003da0:	08003d65 	.word	0x08003d65
 8003da4:	08003d65 	.word	0x08003d65
 8003da8:	08003eed 	.word	0x08003eed
 8003dac:	08003e15 	.word	0x08003e15
 8003db0:	08003ea7 	.word	0x08003ea7
 8003db4:	08003d65 	.word	0x08003d65
 8003db8:	08003d65 	.word	0x08003d65
 8003dbc:	08003f0f 	.word	0x08003f0f
 8003dc0:	08003d65 	.word	0x08003d65
 8003dc4:	08003e15 	.word	0x08003e15
 8003dc8:	08003d65 	.word	0x08003d65
 8003dcc:	08003d65 	.word	0x08003d65
 8003dd0:	08003eaf 	.word	0x08003eaf
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	1d1a      	adds	r2, r3, #4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	602a      	str	r2, [r5, #0]
 8003ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003de4:	2301      	movs	r3, #1
 8003de6:	e09f      	b.n	8003f28 <_printf_i+0x1ec>
 8003de8:	6820      	ldr	r0, [r4, #0]
 8003dea:	682b      	ldr	r3, [r5, #0]
 8003dec:	0607      	lsls	r7, r0, #24
 8003dee:	f103 0104 	add.w	r1, r3, #4
 8003df2:	6029      	str	r1, [r5, #0]
 8003df4:	d501      	bpl.n	8003dfa <_printf_i+0xbe>
 8003df6:	681e      	ldr	r6, [r3, #0]
 8003df8:	e003      	b.n	8003e02 <_printf_i+0xc6>
 8003dfa:	0646      	lsls	r6, r0, #25
 8003dfc:	d5fb      	bpl.n	8003df6 <_printf_i+0xba>
 8003dfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e02:	2e00      	cmp	r6, #0
 8003e04:	da03      	bge.n	8003e0e <_printf_i+0xd2>
 8003e06:	232d      	movs	r3, #45	; 0x2d
 8003e08:	4276      	negs	r6, r6
 8003e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0e:	485a      	ldr	r0, [pc, #360]	; (8003f78 <_printf_i+0x23c>)
 8003e10:	230a      	movs	r3, #10
 8003e12:	e012      	b.n	8003e3a <_printf_i+0xfe>
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	6820      	ldr	r0, [r4, #0]
 8003e18:	1d19      	adds	r1, r3, #4
 8003e1a:	6029      	str	r1, [r5, #0]
 8003e1c:	0605      	lsls	r5, r0, #24
 8003e1e:	d501      	bpl.n	8003e24 <_printf_i+0xe8>
 8003e20:	681e      	ldr	r6, [r3, #0]
 8003e22:	e002      	b.n	8003e2a <_printf_i+0xee>
 8003e24:	0641      	lsls	r1, r0, #25
 8003e26:	d5fb      	bpl.n	8003e20 <_printf_i+0xe4>
 8003e28:	881e      	ldrh	r6, [r3, #0]
 8003e2a:	4853      	ldr	r0, [pc, #332]	; (8003f78 <_printf_i+0x23c>)
 8003e2c:	2f6f      	cmp	r7, #111	; 0x6f
 8003e2e:	bf0c      	ite	eq
 8003e30:	2308      	moveq	r3, #8
 8003e32:	230a      	movne	r3, #10
 8003e34:	2100      	movs	r1, #0
 8003e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e3a:	6865      	ldr	r5, [r4, #4]
 8003e3c:	60a5      	str	r5, [r4, #8]
 8003e3e:	2d00      	cmp	r5, #0
 8003e40:	bfa2      	ittt	ge
 8003e42:	6821      	ldrge	r1, [r4, #0]
 8003e44:	f021 0104 	bicge.w	r1, r1, #4
 8003e48:	6021      	strge	r1, [r4, #0]
 8003e4a:	b90e      	cbnz	r6, 8003e50 <_printf_i+0x114>
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	d04b      	beq.n	8003ee8 <_printf_i+0x1ac>
 8003e50:	4615      	mov	r5, r2
 8003e52:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e56:	fb03 6711 	mls	r7, r3, r1, r6
 8003e5a:	5dc7      	ldrb	r7, [r0, r7]
 8003e5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e60:	4637      	mov	r7, r6
 8003e62:	42bb      	cmp	r3, r7
 8003e64:	460e      	mov	r6, r1
 8003e66:	d9f4      	bls.n	8003e52 <_printf_i+0x116>
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d10b      	bne.n	8003e84 <_printf_i+0x148>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	07de      	lsls	r6, r3, #31
 8003e70:	d508      	bpl.n	8003e84 <_printf_i+0x148>
 8003e72:	6923      	ldr	r3, [r4, #16]
 8003e74:	6861      	ldr	r1, [r4, #4]
 8003e76:	4299      	cmp	r1, r3
 8003e78:	bfde      	ittt	le
 8003e7a:	2330      	movle	r3, #48	; 0x30
 8003e7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e84:	1b52      	subs	r2, r2, r5
 8003e86:	6122      	str	r2, [r4, #16]
 8003e88:	f8cd a000 	str.w	sl, [sp]
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	aa03      	add	r2, sp, #12
 8003e90:	4621      	mov	r1, r4
 8003e92:	4640      	mov	r0, r8
 8003e94:	f7ff fee4 	bl	8003c60 <_printf_common>
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d14a      	bne.n	8003f32 <_printf_i+0x1f6>
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	b004      	add	sp, #16
 8003ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	f043 0320 	orr.w	r3, r3, #32
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	4833      	ldr	r0, [pc, #204]	; (8003f7c <_printf_i+0x240>)
 8003eb0:	2778      	movs	r7, #120	; 0x78
 8003eb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	6829      	ldr	r1, [r5, #0]
 8003eba:	061f      	lsls	r7, r3, #24
 8003ebc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ec0:	d402      	bmi.n	8003ec8 <_printf_i+0x18c>
 8003ec2:	065f      	lsls	r7, r3, #25
 8003ec4:	bf48      	it	mi
 8003ec6:	b2b6      	uxthmi	r6, r6
 8003ec8:	07df      	lsls	r7, r3, #31
 8003eca:	bf48      	it	mi
 8003ecc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ed0:	6029      	str	r1, [r5, #0]
 8003ed2:	bf48      	it	mi
 8003ed4:	6023      	strmi	r3, [r4, #0]
 8003ed6:	b91e      	cbnz	r6, 8003ee0 <_printf_i+0x1a4>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	f023 0320 	bic.w	r3, r3, #32
 8003ede:	6023      	str	r3, [r4, #0]
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	e7a7      	b.n	8003e34 <_printf_i+0xf8>
 8003ee4:	4824      	ldr	r0, [pc, #144]	; (8003f78 <_printf_i+0x23c>)
 8003ee6:	e7e4      	b.n	8003eb2 <_printf_i+0x176>
 8003ee8:	4615      	mov	r5, r2
 8003eea:	e7bd      	b.n	8003e68 <_printf_i+0x12c>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	6826      	ldr	r6, [r4, #0]
 8003ef0:	6961      	ldr	r1, [r4, #20]
 8003ef2:	1d18      	adds	r0, r3, #4
 8003ef4:	6028      	str	r0, [r5, #0]
 8003ef6:	0635      	lsls	r5, r6, #24
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	d501      	bpl.n	8003f00 <_printf_i+0x1c4>
 8003efc:	6019      	str	r1, [r3, #0]
 8003efe:	e002      	b.n	8003f06 <_printf_i+0x1ca>
 8003f00:	0670      	lsls	r0, r6, #25
 8003f02:	d5fb      	bpl.n	8003efc <_printf_i+0x1c0>
 8003f04:	8019      	strh	r1, [r3, #0]
 8003f06:	2300      	movs	r3, #0
 8003f08:	6123      	str	r3, [r4, #16]
 8003f0a:	4615      	mov	r5, r2
 8003f0c:	e7bc      	b.n	8003e88 <_printf_i+0x14c>
 8003f0e:	682b      	ldr	r3, [r5, #0]
 8003f10:	1d1a      	adds	r2, r3, #4
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	681d      	ldr	r5, [r3, #0]
 8003f16:	6862      	ldr	r2, [r4, #4]
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f7fc f960 	bl	80001e0 <memchr>
 8003f20:	b108      	cbz	r0, 8003f26 <_printf_i+0x1ea>
 8003f22:	1b40      	subs	r0, r0, r5
 8003f24:	6060      	str	r0, [r4, #4]
 8003f26:	6863      	ldr	r3, [r4, #4]
 8003f28:	6123      	str	r3, [r4, #16]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f30:	e7aa      	b.n	8003e88 <_printf_i+0x14c>
 8003f32:	6923      	ldr	r3, [r4, #16]
 8003f34:	462a      	mov	r2, r5
 8003f36:	4649      	mov	r1, r9
 8003f38:	4640      	mov	r0, r8
 8003f3a:	47d0      	blx	sl
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d0ad      	beq.n	8003e9c <_printf_i+0x160>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	079b      	lsls	r3, r3, #30
 8003f44:	d413      	bmi.n	8003f6e <_printf_i+0x232>
 8003f46:	68e0      	ldr	r0, [r4, #12]
 8003f48:	9b03      	ldr	r3, [sp, #12]
 8003f4a:	4298      	cmp	r0, r3
 8003f4c:	bfb8      	it	lt
 8003f4e:	4618      	movlt	r0, r3
 8003f50:	e7a6      	b.n	8003ea0 <_printf_i+0x164>
 8003f52:	2301      	movs	r3, #1
 8003f54:	4632      	mov	r2, r6
 8003f56:	4649      	mov	r1, r9
 8003f58:	4640      	mov	r0, r8
 8003f5a:	47d0      	blx	sl
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d09d      	beq.n	8003e9c <_printf_i+0x160>
 8003f60:	3501      	adds	r5, #1
 8003f62:	68e3      	ldr	r3, [r4, #12]
 8003f64:	9903      	ldr	r1, [sp, #12]
 8003f66:	1a5b      	subs	r3, r3, r1
 8003f68:	42ab      	cmp	r3, r5
 8003f6a:	dcf2      	bgt.n	8003f52 <_printf_i+0x216>
 8003f6c:	e7eb      	b.n	8003f46 <_printf_i+0x20a>
 8003f6e:	2500      	movs	r5, #0
 8003f70:	f104 0619 	add.w	r6, r4, #25
 8003f74:	e7f5      	b.n	8003f62 <_printf_i+0x226>
 8003f76:	bf00      	nop
 8003f78:	080040b1 	.word	0x080040b1
 8003f7c:	080040c2 	.word	0x080040c2

08003f80 <memmove>:
 8003f80:	4288      	cmp	r0, r1
 8003f82:	b510      	push	{r4, lr}
 8003f84:	eb01 0402 	add.w	r4, r1, r2
 8003f88:	d902      	bls.n	8003f90 <memmove+0x10>
 8003f8a:	4284      	cmp	r4, r0
 8003f8c:	4623      	mov	r3, r4
 8003f8e:	d807      	bhi.n	8003fa0 <memmove+0x20>
 8003f90:	1e43      	subs	r3, r0, #1
 8003f92:	42a1      	cmp	r1, r4
 8003f94:	d008      	beq.n	8003fa8 <memmove+0x28>
 8003f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f9e:	e7f8      	b.n	8003f92 <memmove+0x12>
 8003fa0:	4402      	add	r2, r0
 8003fa2:	4601      	mov	r1, r0
 8003fa4:	428a      	cmp	r2, r1
 8003fa6:	d100      	bne.n	8003faa <memmove+0x2a>
 8003fa8:	bd10      	pop	{r4, pc}
 8003faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fb2:	e7f7      	b.n	8003fa4 <memmove+0x24>

08003fb4 <_realloc_r>:
 8003fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb8:	4680      	mov	r8, r0
 8003fba:	4614      	mov	r4, r2
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	b921      	cbnz	r1, 8003fca <_realloc_r+0x16>
 8003fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	f7ff bb95 	b.w	80036f4 <_malloc_r>
 8003fca:	b92a      	cbnz	r2, 8003fd8 <_realloc_r+0x24>
 8003fcc:	f7ff fca4 	bl	8003918 <_free_r>
 8003fd0:	4625      	mov	r5, r4
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd8:	f000 f81b 	bl	8004012 <_malloc_usable_size_r>
 8003fdc:	4284      	cmp	r4, r0
 8003fde:	4607      	mov	r7, r0
 8003fe0:	d802      	bhi.n	8003fe8 <_realloc_r+0x34>
 8003fe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fe6:	d812      	bhi.n	800400e <_realloc_r+0x5a>
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4640      	mov	r0, r8
 8003fec:	f7ff fb82 	bl	80036f4 <_malloc_r>
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d0ed      	beq.n	8003fd2 <_realloc_r+0x1e>
 8003ff6:	42bc      	cmp	r4, r7
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	bf28      	it	cs
 8003ffe:	463a      	movcs	r2, r7
 8004000:	f7ff fc7c 	bl	80038fc <memcpy>
 8004004:	4631      	mov	r1, r6
 8004006:	4640      	mov	r0, r8
 8004008:	f7ff fc86 	bl	8003918 <_free_r>
 800400c:	e7e1      	b.n	8003fd2 <_realloc_r+0x1e>
 800400e:	4635      	mov	r5, r6
 8004010:	e7df      	b.n	8003fd2 <_realloc_r+0x1e>

08004012 <_malloc_usable_size_r>:
 8004012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004016:	1f18      	subs	r0, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	bfbc      	itt	lt
 800401c:	580b      	ldrlt	r3, [r1, r0]
 800401e:	18c0      	addlt	r0, r0, r3
 8004020:	4770      	bx	lr
	...

08004024 <_init>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr

08004030 <_fini>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr
