
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004138  08004138  0002019c  2**0
                  CONTENTS
  4 .ARM          00000000  08004138  08004138  0002019c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004138  08004138  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08004140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  200001a0  080042dc  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  080042dc  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8d2  00000000  00000000  0002020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fcd  00000000  00000000  0002aae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  0002cab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072d  00000000  00000000  0002d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275af  00000000  00000000  0002db8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b399  00000000  00000000  0005513c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0dc1  00000000  00000000  000604d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a98  00000000  00000000  00151298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00153d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004088 	.word	0x08004088

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	08004088 	.word	0x08004088

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
uint8_t READ_CHAR_HANDLE[2];

uint16_t stackInitCompleteFlag=0;
uint8_t* rxEvent;

void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fa36 	bl	80036f8 <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	; (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	; (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	; (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f91f 	bl	80004e8 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	; (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	; (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f99e 	bl	80005fc <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	; (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	; (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fb10 	bl	80018fc <HAL_Delay>
	free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	; (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fa11 	bl	8003708 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	; (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	; (8000468 <ble_init+0x1e8>)
 80002f2:	f000 fa95 	bl	8000820 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	; (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	; (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	; (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 f9fa 	bl	8003708 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	; (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	; (8000470 <ble_init+0x1f0>)
 8000320:	f000 fa7e 	bl	8000820 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	; (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	; (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	; (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	; (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	; (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	; (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	; (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	; (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	; (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 f9ce 	bl	8003708 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	; (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2309      	movs	r3, #9
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	; (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	; (8000474 <ble_init+0x1f4>)
 8000378:	f000 fb18 	bl	80009ac <updateCharValue>
	stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	; (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	; (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	; (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 f9ba 	bl	8003708 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	; (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	; (8000488 <ble_init+0x208>)
 80003a0:	f000 fa3e 	bl	8000820 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	; (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 f9a3 	bl	8003708 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	; (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	; (8000490 <ble_init+0x210>)
 80003ce:	f000 fa27 	bl	8000820 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 f98c 	bl	8003708 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	; (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	; 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	; (8000498 <ble_init+0x218>)
 80003fc:	f000 fa10 	bl	8000820 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	; (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 f975 	bl	8003708 <free>

	//This will start the advertisment,
	setConnectable();
 800041e:	f000 f97d 	bl	800071c <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	; (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	; (80004a0 <ble_init+0x220>)
 8000428:	f000 fa46 	bl	80008b8 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	; (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	; (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	; (80004a8 <ble_init+0x228>)
 8000438:	f000 fa76 	bl	8000928 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	; (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	; (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	; (80004b0 <ble_init+0x230>)
 8000448:	f000 fa6e 	bl	8000928 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 800044c:	bf00      	nop
}
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002d4 	.word	0x200002d4
 8000458:	200002d8 	.word	0x200002d8
 800045c:	20000000 	.word	0x20000000
 8000460:	200002d2 	.word	0x200002d2
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001bc 	.word	0x200001bc
 8000478:	200001c0 	.word	0x200001c0
 800047c:	200001c4 	.word	0x200001c4
 8000480:	200000f8 	.word	0x200000f8
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	2000007c 	.word	0x2000007c
 8000498:	20000058 	.word	0x20000058
 800049c:	200002c8 	.word	0x200002c8
 80004a0:	20000104 	.word	0x20000104
 80004a4:	200002d0 	.word	0x200002d0
 80004a8:	20000124 	.word	0x20000124
 80004ac:	200002cc 	.word	0x200002cc
 80004b0:	20000114 	.word	0x20000114

080004b4 <standbyBle>:

void standbyBle() {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af02      	add	r7, sp, #8
	 //STANDBY MODE
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
 80004ba:	2300      	movs	r3, #0
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2307      	movs	r3, #7
 80004c0:	4a06      	ldr	r2, [pc, #24]	; (80004dc <standbyBle+0x28>)
 80004c2:	2104      	movs	r1, #4
 80004c4:	4806      	ldr	r0, [pc, #24]	; (80004e0 <standbyBle+0x2c>)
 80004c6:	f000 f9ab 	bl	8000820 <BLE_command>
	 }
	 free(rxEvent);
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <standbyBle+0x30>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f003 f91a 	bl	8003708 <free>
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000050 	.word	0x20000050
 80004e0:	2000004c 	.word	0x2000004c
 80004e4:	200002d4 	.word	0x200002d4

080004e8 <fetchBleEvent>:

int fetchBleEvent(uint8_t *container, int size){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	; 0x30
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004f2:	4a3d      	ldr	r2, [pc, #244]	; (80005e8 <fetchBleEvent+0x100>)
 80004f4:	f107 0318 	add.w	r3, r7, #24
 80004f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004fc:	6018      	str	r0, [r3, #0]
 80004fe:	3304      	adds	r3, #4
 8000500:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	4839      	ldr	r0, [pc, #228]	; (80005ec <fetchBleEvent+0x104>)
 8000506:	f001 fcd9 	bl	8001ebc <HAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d065      	beq.n	80005dc <fetchBleEvent+0xf4>

  HAL_Delay(5);
 8000510:	2005      	movs	r0, #5
 8000512:	f001 f9f3 	bl	80018fc <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051c:	4834      	ldr	r0, [pc, #208]	; (80005f0 <fetchBleEvent+0x108>)
 800051e:	f001 fce5 	bl	8001eec <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000522:	f107 0210 	add.w	r2, r7, #16
 8000526:	f107 0118 	add.w	r1, r7, #24
 800052a:	2301      	movs	r3, #1
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2305      	movs	r3, #5
 8000530:	4830      	ldr	r0, [pc, #192]	; (80005f4 <fetchBleEvent+0x10c>)
 8000532:	f002 fd5b 	bl	8002fec <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053c:	482c      	ldr	r0, [pc, #176]	; (80005f0 <fetchBleEvent+0x108>)
 800053e:	f001 fcd5 	bl	8001eec <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f001 f9da 	bl	80018fc <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	4828      	ldr	r0, [pc, #160]	; (80005f0 <fetchBleEvent+0x108>)
 8000550:	f001 fccc 	bl	8001eec <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000554:	f107 0210 	add.w	r2, r7, #16
 8000558:	f107 0118 	add.w	r1, r7, #24
 800055c:	2301      	movs	r3, #1
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2305      	movs	r3, #5
 8000562:	4824      	ldr	r0, [pc, #144]	; (80005f4 <fetchBleEvent+0x10c>)
 8000564:	f002 fd42 	bl	8002fec <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000568:	7cfb      	ldrb	r3, [r7, #19]
 800056a:	461a      	mov	r2, r3
 800056c:	7d3b      	ldrb	r3, [r7, #20]
 800056e:	021b      	lsls	r3, r3, #8
 8000570:	4313      	orrs	r3, r2
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
  int i;
  char dummy=0xff;
 8000574:	23ff      	movs	r3, #255	; 0xff
 8000576:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	dd01      	ble.n	8000584 <fetchBleEvent+0x9c>
	  dataSize=size;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(dataSize>0){
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	2b00      	cmp	r3, #0
 8000588:	dd1f      	ble.n	80005ca <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
 800058e:	e00d      	b.n	80005ac <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000590:	6a3b      	ldr	r3, [r7, #32]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	441a      	add	r2, r3
 8000596:	f107 010f 	add.w	r1, r7, #15
 800059a:	2301      	movs	r3, #1
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	4814      	ldr	r0, [pc, #80]	; (80005f4 <fetchBleEvent+0x10c>)
 80005a2:	f002 fd23 	bl	8002fec <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 80005a6:	6a3b      	ldr	r3, [r7, #32]
 80005a8:	3301      	adds	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
 80005ac:	6a3a      	ldr	r2, [r7, #32]
 80005ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dbed      	blt.n	8000590 <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	480d      	ldr	r0, [pc, #52]	; (80005f0 <fetchBleEvent+0x108>)
 80005bc:	f001 fc96 	bl	8001eec <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <fetchBleEvent+0x110>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e00a      	b.n	80005e0 <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <fetchBleEvent+0x108>)
 80005d2:	f001 fc8b 	bl	8001eec <HAL_GPIO_WritePin>
        return -1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e001      	b.n	80005e0 <fetchBleEvent+0xf8>
  }else{
  return -2;
 80005dc:	f06f 0301 	mvn.w	r3, #1
  }
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3728      	adds	r7, #40	; 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	080040a0 	.word	0x080040a0
 80005ec:	48001000 	.word	0x48001000
 80005f0:	48000c00 	.word	0x48000c00
 80005f4:	20000330 	.word	0x20000330
 80005f8:	200002d8 	.word	0x200002d8

080005fc <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005fc:	b480      	push	{r7}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
	int j=0;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	e00f      	b.n	8000632 <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	440b      	add	r3, r1
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d002      	beq.n	800062c <checkEventResp+0x30>
			return -1;
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	e007      	b.n	800063c <checkEventResp+0x40>
	for(j=0;j<size;j++){
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	3301      	adds	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	429a      	cmp	r2, r3
 8000638:	dbeb      	blt.n	8000612 <checkEventResp+0x16>
		}
	}

return BLE_OK;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	371c      	adds	r7, #28
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af02      	add	r7, sp, #8
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000652:	4a1f      	ldr	r2, [pc, #124]	; (80006d0 <sendCommand+0x88>)
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	6018      	str	r0, [r3, #0]
 800065e:	3304      	adds	r3, #4
 8000660:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	481a      	ldr	r0, [pc, #104]	; (80006d4 <sendCommand+0x8c>)
 800066a:	f001 fc3f 	bl	8001eec <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800066e:	f107 0208 	add.w	r2, r7, #8
 8000672:	f107 0110 	add.w	r1, r7, #16
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2305      	movs	r3, #5
 800067c:	4816      	ldr	r0, [pc, #88]	; (80006d8 <sendCommand+0x90>)
 800067e:	f002 fcb5 	bl	8002fec <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000682:	7abb      	ldrb	r3, [r7, #10]
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	7a7a      	ldrb	r2, [r7, #9]
 8000688:	4313      	orrs	r3, r2
 800068a:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	db09      	blt.n	80006a8 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b29a      	uxth	r2, r3
 8000698:	2301      	movs	r3, #1
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	480e      	ldr	r0, [pc, #56]	; (80006d8 <sendCommand+0x90>)
 800069e:	f002 fb30 	bl	8002d02 <HAL_SPI_Transmit>
		result=0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
 80006a6:	e002      	b.n	80006ae <sendCommand+0x66>
	  }else{
		result=-1;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <sendCommand+0x8c>)
 80006b6:	f001 fc19 	bl	8001eec <HAL_GPIO_WritePin>
	  dataAvailable=0;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <sendCommand+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1cd      	bne.n	8000662 <sendCommand+0x1a>

}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	080040a8 	.word	0x080040a8
 80006d4:	48000c00 	.word	0x48000c00
 80006d8:	20000330 	.word	0x20000330
 80006dc:	200002d8 	.word	0x200002d8

080006e0 <catchBLE>:

void catchBLE(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 80006e6:	217f      	movs	r1, #127	; 0x7f
 80006e8:	480a      	ldr	r0, [pc, #40]	; (8000714 <catchBLE+0x34>)
 80006ea:	f7ff fefd 	bl	80004e8 <fetchBleEvent>
 80006ee:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d109      	bne.n	800070a <catchBLE+0x2a>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006f6:	2203      	movs	r2, #3
 80006f8:	4907      	ldr	r1, [pc, #28]	; (8000718 <catchBLE+0x38>)
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <catchBLE+0x34>)
 80006fc:	f7ff ff7e 	bl	80005fc <checkEventResp>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d101      	bne.n	800070a <catchBLE+0x2a>
			  setConnectable();
 8000706:	f000 f809 	bl	800071c <setConnectable>
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200001c8 	.word	0x200001c8
 8000718:	200000f4 	.word	0x200000f4

0800071c <setConnectable>:

void setConnectable(){
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000722:	200e      	movs	r0, #14
 8000724:	f002 ffe8 	bl	80036f8 <malloc>
 8000728:	4603      	mov	r3, r0
 800072a:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4937      	ldr	r1, [pc, #220]	; (800080c <setConnectable+0xf0>)
 8000730:	461a      	mov	r2, r3
 8000732:	460b      	mov	r3, r1
 8000734:	cb03      	ldmia	r3!, {r0, r1}
 8000736:	6010      	str	r0, [r2, #0]
 8000738:	6051      	str	r1, [r2, #4]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	7213      	strb	r3, [r2, #8]
	   localname[sizeof(deviceName)+1]=0x00;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	330a      	adds	r3, #10
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	330b      	adds	r3, #11
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	330c      	adds	r3, #12
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	330d      	adds	r3, #13
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3309      	adds	r3, #9
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <setConnectable+0xf4>)
 8000768:	220a      	movs	r2, #10
 800076a:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <setConnectable+0xf4>)
 800076e:	2217      	movs	r2, #23
 8000770:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000772:	201b      	movs	r0, #27
 8000774:	f002 ffc0 	bl	80036f8 <malloc>
 8000778:	4603      	mov	r3, r0
 800077a:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	4a24      	ldr	r2, [pc, #144]	; (8000810 <setConnectable+0xf4>)
 8000780:	461c      	mov	r4, r3
 8000782:	4613      	mov	r3, r2
 8000784:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000786:	6020      	str	r0, [r4, #0]
 8000788:	6061      	str	r1, [r4, #4]
 800078a:	60a2      	str	r2, [r4, #8]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	330d      	adds	r3, #13
 8000794:	220e      	movs	r2, #14
 8000796:	68f9      	ldr	r1, [r7, #12]
 8000798:	4618      	mov	r0, r3
 800079a:	f003 f8e1 	bl	8003960 <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 800079e:	211b      	movs	r1, #27
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f7ff ff51 	bl	8000648 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 80007a6:	2007      	movs	r0, #7
 80007a8:	f002 ffa6 	bl	80036f8 <malloc>
 80007ac:	4603      	mov	r3, r0
 80007ae:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 80007b0:	bf00      	nop
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <setConnectable+0xf8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0fb      	beq.n	80007b2 <setConnectable+0x96>
	   res=fetchBleEvent(rxEvent,7);
 80007ba:	2107      	movs	r1, #7
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff fe93 	bl	80004e8 <fetchBleEvent>
 80007c2:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10f      	bne.n	80007ea <setConnectable+0xce>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80007ca:	2207      	movs	r2, #7
 80007cc:	4912      	ldr	r1, [pc, #72]	; (8000818 <setConnectable+0xfc>)
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff14 	bl	80005fc <checkEventResp>
 80007d4:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d106      	bne.n	80007ea <setConnectable+0xce>
		   stackInitCompleteFlag|=0x80;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <setConnectable+0x100>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <setConnectable+0x100>)
 80007e8:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f002 ff8c 	bl	8003708 <free>
	   free(discoverableCommand);
 80007f0:	68b8      	ldr	r0, [r7, #8]
 80007f2:	f002 ff89 	bl	8003708 <free>
	   free(localname);
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f002 ff86 	bl	8003708 <free>
	   HAL_Delay(10);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f001 f87d 	bl	80018fc <HAL_Delay>
}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	bd90      	pop	{r4, r7, pc}
 800080a:	bf00      	nop
 800080c:	200000f8 	.word	0x200000f8
 8000810:	20000084 	.word	0x20000084
 8000814:	200002d8 	.word	0x200002d8
 8000818:	20000094 	.word	0x20000094
 800081c:	200002d2 	.word	0x200002d2

08000820 <BLE_command>:

int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 800082e:	68b9      	ldr	r1, [r7, #8]
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f7ff ff09 	bl	8000648 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000836:	6a3b      	ldr	r3, [r7, #32]
 8000838:	005a      	lsls	r2, r3, #1
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	4413      	add	r3, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f002 ff5a 	bl	80036f8 <malloc>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <BLE_command+0x90>)
 800084a:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000850:	e007      	b.n	8000862 <BLE_command+0x42>
		   contatore++;
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	3301      	adds	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	f247 5230 	movw	r2, #30000	; 0x7530
 800085e:	4293      	cmp	r3, r2
 8000860:	dc07      	bgt.n	8000872 <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000862:	2140      	movs	r1, #64	; 0x40
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <BLE_command+0x94>)
 8000866:	f001 fb29 	bl	8001ebc <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0f0      	beq.n	8000852 <BLE_command+0x32>
 8000870:	e000      	b.n	8000874 <BLE_command+0x54>
			   break;
 8000872:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <BLE_command+0x90>)
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	6a3b      	ldr	r3, [r7, #32]
 800087a:	005a      	lsls	r2, r3, #1
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	4413      	add	r3, r2
 8000880:	4619      	mov	r1, r3
 8000882:	f7ff fe31 	bl	80004e8 <fetchBleEvent>
 8000886:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d107      	bne.n	800089e <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <BLE_command+0x90>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff feb0 	bl	80005fc <checkEventResp>
 800089c:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 800089e:	200a      	movs	r0, #10
 80008a0:	f001 f82c 	bl	80018fc <HAL_Delay>


	return response;
 80008a4:	697b      	ldr	r3, [r7, #20]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200002d4 	.word	0x200002d4
 80008b4:	48001000 	.word	0x48001000

080008b8 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af02      	add	r7, sp, #8
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <addService+0x60>)
 80008c6:	2210      	movs	r2, #16
 80008c8:	68f9      	ldr	r1, [r7, #12]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 f848 	bl	8003960 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <addService+0x64>)
 80008d6:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008d8:	2301      	movs	r3, #1
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2307      	movs	r3, #7
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <addService+0x68>)
 80008e0:	2117      	movs	r1, #23
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <addService+0x64>)
 80008e4:	f7ff ff9c 	bl	8000820 <BLE_command>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10a      	bne.n	8000904 <addService+0x4c>
		   handle[0]=rxEvent[7];
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <addService+0x6c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	79da      	ldrb	r2, [r3, #7]
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <addService+0x6c>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	3301      	adds	r3, #1
 8000900:	7a12      	ldrb	r2, [r2, #8]
 8000902:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <addService+0x6c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fefd 	bl	8003708 <free>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000a1 	.word	0x200000a1
 800091c:	2000009c 	.word	0x2000009c
 8000920:	200000b4 	.word	0x200000b4
 8000924:	200002d4 	.word	0x200002d4

08000928 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af02      	add	r7, sp, #8
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
 8000934:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <addCharacteristic+0x74>)
 8000938:	2210      	movs	r2, #16
 800093a:	68f9      	ldr	r1, [r7, #12]
 800093c:	4618      	mov	r0, r3
 800093e:	f003 f80f 	bl	8003960 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <addCharacteristic+0x78>)
 8000948:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	785a      	ldrb	r2, [r3, #1]
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <addCharacteristic+0x78>)
 8000950:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000952:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <addCharacteristic+0x78>)
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000958:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <addCharacteristic+0x78>)
 800095a:	7e3b      	ldrb	r3, [r7, #24]
 800095c:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 800095e:	2301      	movs	r3, #1
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2307      	movs	r3, #7
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <addCharacteristic+0x7c>)
 8000966:	211e      	movs	r1, #30
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <addCharacteristic+0x78>)
 800096a:	f7ff ff59 	bl	8000820 <BLE_command>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10a      	bne.n	800098a <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <addCharacteristic+0x80>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	79da      	ldrb	r2, [r3, #7]
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <addCharacteristic+0x80>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	3301      	adds	r3, #1
 8000986:	7a12      	ldrb	r2, [r2, #8]
 8000988:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <addCharacteristic+0x80>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f002 feba 	bl	8003708 <free>
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000c3 	.word	0x200000c3
 80009a0:	200000bc 	.word	0x200000bc
 80009a4:	200000dc 	.word	0x200000dc
 80009a8:	200002d4 	.word	0x200002d4

080009ac <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3306      	adds	r3, #6
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <updateCharValue+0x9c>)
 80009c4:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	781a      	ldrb	r2, [r3, #0]
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <updateCharValue+0x9c>)
 80009cc:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	785a      	ldrb	r2, [r3, #1]
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <updateCharValue+0x9c>)
 80009d4:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <updateCharValue+0x9c>)
 80009dc:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	785a      	ldrb	r2, [r3, #1]
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <updateCharValue+0x9c>)
 80009e4:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <updateCharValue+0x9c>)
 80009ec:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <updateCharValue+0x9c>)
 80009f4:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	330a      	adds	r3, #10
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fe7c 	bl	80036f8 <malloc>
 8000a00:	4603      	mov	r3, r0
 8000a02:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000a04:	220a      	movs	r2, #10
 8000a06:	4910      	ldr	r1, [pc, #64]	; (8000a48 <updateCharValue+0x9c>)
 8000a08:	6978      	ldr	r0, [r7, #20]
 8000a0a:	f002 ffa9 	bl	8003960 <memcpy>
	memcpy(commandComplete+10,data,size);
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	330a      	adds	r3, #10
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	6a39      	ldr	r1, [r7, #32]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 ffa2 	bl	8003960 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	f103 010a 	add.w	r1, r3, #10
 8000a22:	2300      	movs	r3, #0
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2307      	movs	r3, #7
 8000a28:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <updateCharValue+0xa0>)
 8000a2a:	6978      	ldr	r0, [r7, #20]
 8000a2c:	f7ff fef8 	bl	8000820 <BLE_command>

	free(commandComplete);
 8000a30:	6978      	ldr	r0, [r7, #20]
 8000a32:	f002 fe69 	bl	8003708 <free>
	free(rxEvent);
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <updateCharValue+0xa4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fe64 	bl	8003708 <free>
}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000e4 	.word	0x200000e4
 8000a4c:	200000dc 	.word	0x200000dc
 8000a50:	200002d4 	.word	0x200002d4

08000a54 <i2c_init>:
#include <stm32l475xx.h>

#include "stdio.h"

void i2c_init()
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
    // Enable I2C2 clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000a58:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <i2c_init+0xd4>)
 8000a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5c:	4a32      	ldr	r2, [pc, #200]	; (8000b28 <i2c_init+0xd4>)
 8000a5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a62:	6593      	str	r3, [r2, #88]	; 0x58
    // Enable clock for GPIOB
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000a64:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <i2c_init+0xd4>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	4a2f      	ldr	r2, [pc, #188]	; (8000b28 <i2c_init+0xd4>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
    // Clear PE bit in I2C_CR1
    I2C2->CR1 &= !I2C_CR1_PE;
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <i2c_init+0xd8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <i2c_init+0xd8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
    /*
     * Configure I2C2 SDA pin and I2C2 SCL pin.
     * Specifically, configure pins PB10 and PB11.
     */
    // Set PB10 and PB11 to alternate function mode
    GPIOB->MODER = (GPIOB->MODER & ~(GPIO_MODER_MODE10_Msk | GPIO_MODER_MODE11_Msk)) | (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <i2c_init+0xdc>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000a82:	4a2b      	ldr	r2, [pc, #172]	; (8000b30 <i2c_init+0xdc>)
 8000a84:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
 8000a88:	6013      	str	r3, [r2, #0]
    // Set PB10 and PB11 to output open-drain
    GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <i2c_init+0xdc>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	4a28      	ldr	r2, [pc, #160]	; (8000b30 <i2c_init+0xdc>)
 8000a90:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000a94:	6053      	str	r3, [r2, #4]
    // PB10-AF4, PB11-AF4
    GPIOB->AFR[1] |= (4 << GPIO_AFRH_AFSEL10_Pos | 4 << GPIO_AFRH_AFSEL11_Pos);
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <i2c_init+0xdc>)
 8000a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9a:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <i2c_init+0xdc>)
 8000a9c:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8000aa0:	6253      	str	r3, [r2, #36]	; 0x24
    // Pull-up
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 |GPIO_PUPDR_PUPD11_0 );
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <i2c_init+0xdc>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <i2c_init+0xdc>)
 8000aa8:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000aac:	60d3      	str	r3, [r2, #12]
     * Note: I2C APB clock (PCLK) default value 4 MHz, t_PCLK = 250 ns
     *
     */

    // Configure frequency of I2CCLK to 400 kHz
    RCC->CCIPR |= RCC_CCIPR_I2C2SEL_1; // Select HSI16 (16 MHz) as I2C2 clock, t_I2CCLK = 62.5 ns
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <i2c_init+0xd4>)
 8000ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab4:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <i2c_init+0xd4>)
 8000ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    RCC->CR |= RCC_CR_HSION; // Enable HSI16
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <i2c_init+0xd4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <i2c_init+0xd4>)
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac8:	6013      	str	r3, [r2, #0]
    I2C2->TIMINGR |= 1<<I2C_TIMINGR_PRESC_Pos;
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <i2c_init+0xd8>)
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <i2c_init+0xd8>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0x9<<I2C_TIMINGR_SCLL_Pos;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <i2c_init+0xd8>)
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <i2c_init+0xd8>)
 8000adc:	f043 0309 	orr.w	r3, r3, #9
 8000ae0:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0x3<<I2C_TIMINGR_SCLH_Pos;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <i2c_init+0xd8>)
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <i2c_init+0xd8>)
 8000ae8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000aec:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0x2<<I2C_TIMINGR_SDADEL_Pos;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <i2c_init+0xd8>)
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <i2c_init+0xd8>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= 0x3<<I2C_TIMINGR_SCLDEL_Pos;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <i2c_init+0xd8>)
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <i2c_init+0xd8>)
 8000b00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000b04:	6113      	str	r3, [r2, #16]

    // Configure NOSTRETCH in I2C_CR1
    I2C2->CR1 &= !I2C_CR1_NOSTRETCH;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <i2c_init+0xd8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <i2c_init+0xd8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]

    // Set PE bit in I2C_CR1
    I2C2->CR1 |= I2C_CR1_PE;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <i2c_init+0xd8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <i2c_init+0xd8>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6013      	str	r3, [r2, #0]

}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40005800 	.word	0x40005800
 8000b30:	48000400 	.word	0x48000400

08000b34 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	603a      	str	r2, [r7, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	460b      	mov	r3, r1
 8000b44:	71bb      	strb	r3, [r7, #6]
 8000b46:	4613      	mov	r3, r2
 8000b48:	717b      	strb	r3, [r7, #5]

    while (I2C2->ISR & I2C_ISR_BUSY) { } // Wait until I2C2 bus is free
 8000b4a:	bf00      	nop
 8000b4c:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <i2c_transaction+0x114>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f9      	bne.n	8000b4c <i2c_transaction+0x18>

	/* Master communication initialization */
    // Set 7-bit slave address, R/W bit to write, NBYTES, and START bit.
    I2C2->CR2 = (address << 1) | (0 << I2C_CR2_RD_WRN_Pos) | (len << I2C_CR2_NBYTES_Pos) | I2C_CR2_START;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	005a      	lsls	r2, r3, #1
 8000b5c:	797b      	ldrb	r3, [r7, #5]
 8000b5e:	041b      	lsls	r3, r3, #16
 8000b60:	4313      	orrs	r3, r2
 8000b62:	4a39      	ldr	r2, [pc, #228]	; (8000c48 <i2c_transaction+0x114>)
 8000b64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b68:	6053      	str	r3, [r2, #4]

    if (dir == 0) { // Write
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d116      	bne.n	8000b9e <i2c_transaction+0x6a>

    	// Write register address and other data to I2C bus
        for (uint8_t i = 0; i < len; i++) {
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e00f      	b.n	8000b96 <i2c_transaction+0x62>
            while (!(I2C2->ISR & I2C_ISR_TXIS)) { } // Wait for TXIS = 1
 8000b76:	bf00      	nop
 8000b78:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <i2c_transaction+0x114>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0f9      	beq.n	8000b78 <i2c_transaction+0x44>
            I2C2->TXDR = data[i];
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <i2c_transaction+0x114>)
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
        for (uint8_t i = 0; i < len; i++) {
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	3301      	adds	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	7bfa      	ldrb	r2, [r7, #15]
 8000b98:	797b      	ldrb	r3, [r7, #5]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d3eb      	bcc.n	8000b76 <i2c_transaction+0x42>
        }

    }
    if (dir == 1) { // Read
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d134      	bne.n	8000c0e <i2c_transaction+0xda>

    	// Wait for TXIS = 1
    	while (!(I2C2->ISR & I2C_ISR_TXIS)) { }
 8000ba4:	bf00      	nop
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <i2c_transaction+0x114>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f9      	beq.n	8000ba6 <i2c_transaction+0x72>
    	// Write register address to I2C bus
    	I2C2->TXDR = data[0];
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <i2c_transaction+0x114>)
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
    	// Wait for ACK
    	while(!(I2C2->ISR & I2C_ISR_TC));
 8000bba:	bf00      	nop
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <i2c_transaction+0x114>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f9      	beq.n	8000bbc <i2c_transaction+0x88>
    	// Set 7-bit slave address, R/W bit to read, NBYTES, and START bit.
        I2C2->CR2 = (address << 1) | (1 << I2C_CR2_RD_WRN_Pos) | (len << I2C_CR2_NBYTES_Pos) | I2C_CR2_START;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000bd0:	797b      	ldrb	r3, [r7, #5]
 8000bd2:	041b      	lsls	r3, r3, #16
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <i2c_transaction+0x114>)
 8000bd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bdc:	6053      	str	r3, [r2, #4]

    	// Read data from I2C bus
        for (uint8_t i = 0; i < len; i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	73bb      	strb	r3, [r7, #14]
 8000be2:	e010      	b.n	8000c06 <i2c_transaction+0xd2>
            while (!(I2C2->ISR & I2C_ISR_RXNE)) { } // Wait for RXNE = 1
 8000be4:	bf00      	nop
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <i2c_transaction+0x114>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f9      	beq.n	8000be6 <i2c_transaction+0xb2>
            data[i] = I2C2->RXDR;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <i2c_transaction+0x114>)
 8000bf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b2ca      	uxtb	r2, r1
 8000bfe:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	3301      	adds	r3, #1
 8000c04:	73bb      	strb	r3, [r7, #14]
 8000c06:	7bba      	ldrb	r2, [r7, #14]
 8000c08:	797b      	ldrb	r3, [r7, #5]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d3ea      	bcc.n	8000be4 <i2c_transaction+0xb0>
        }

    }

    // Wait for TC = 1
    while(!(I2C2->ISR & I2C_ISR_TC));
 8000c0e:	bf00      	nop
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <i2c_transaction+0x114>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f9      	beq.n	8000c10 <i2c_transaction+0xdc>

    if(I2C2->ISR & I2C_ISR_TC) {
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <i2c_transaction+0x114>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d007      	beq.n	8000c38 <i2c_transaction+0x104>
		I2C2->CR2 |= I2C_CR2_STOP;// Generate stop condition
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <i2c_transaction+0x114>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <i2c_transaction+0x114>)
 8000c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c32:	6053      	str	r3, [r2, #4]
		return 1; // Success
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <i2c_transaction+0x106>
    }
    else {
    	return 0;
 8000c38:	2300      	movs	r3, #0
    }
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40005800 	.word	0x40005800

08000c4c <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* Enable the GPIOA clock */
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000c50:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <leds_init+0xd0>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	4a31      	ldr	r2, [pc, #196]	; (8000d1c <leds_init+0xd0>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	64d3      	str	r3, [r2, #76]	; 0x4c

  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <leds_init+0xd0>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	4a2e      	ldr	r2, [pc, #184]	; (8000d1c <leds_init+0xd0>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* From schematic: LED 1 - PA5 (GPIO A Pin 5); LED2 - PB14 */
  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5; // GPIO_MODER_MODE5 has all bits set to 0 except those corresponding to pin 5 set to 1
 8000c68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c72:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000c76:	6013      	str	r3, [r2, #0]
  // Set bits corresponding to PA5 to 0 while other bits retain
  GPIOA->MODER |= GPIO_MODER_MODE5_0; // Set 01 to the position of PA5
 8000c78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c86:	6013      	str	r3, [r2, #0]

  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <leds_init+0xd4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a24      	ldr	r2, [pc, #144]	; (8000d20 <leds_init+0xd4>)
 8000c8e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000c92:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <leds_init+0xd4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <leds_init+0xd4>)
 8000c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000ca0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000caa:	f023 0320 	bic.w	r3, r3, #32
 8000cae:	6053      	str	r3, [r2, #4]

  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <leds_init+0xd4>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <leds_init+0xd4>)
 8000cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cba:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000cbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cc6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000cca:	60d3      	str	r3, [r2, #12]

  GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <leds_init+0xd4>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <leds_init+0xd4>)
 8000cd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000cd6:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO pin to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000cd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ce2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000ce6:	6093      	str	r3, [r2, #8]

  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <leds_init+0xd4>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <leds_init+0xd4>)
 8000cee:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000cf2:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000cf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cfe:	f023 0320 	bic.w	r3, r3, #32
 8000d02:	6153      	str	r3, [r2, #20]

  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <leds_init+0xd4>)
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <leds_init+0xd4>)
 8000d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d0e:	6153      	str	r3, [r2, #20]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000400 	.word	0x48000400

08000d24 <leds_set>:

void leds_set(uint8_t led)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]

	if(led == 0b01) {
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d10e      	bne.n	8000d52 <leds_set+0x2e>
		GPIOA->ODR |= GPIO_ODR_OD5;
 8000d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d3e:	f043 0320 	orr.w	r3, r3, #32
 8000d42:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <leds_set+0xa0>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <leds_set+0xa0>)
 8000d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d4e:	6153      	str	r3, [r2, #20]
	}
	else {
		GPIOA->ODR &= ~GPIO_ODR_OD5;
		GPIOB->ODR &= ~GPIO_ODR_OD14;
	}
}
 8000d50:	e031      	b.n	8000db6 <leds_set+0x92>
	else if(led == 0b10) {
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d10e      	bne.n	8000d76 <leds_set+0x52>
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d62:	f023 0320 	bic.w	r3, r3, #32
 8000d66:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= GPIO_ODR_OD14;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <leds_set+0xa0>)
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <leds_set+0xa0>)
 8000d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d72:	6153      	str	r3, [r2, #20]
}
 8000d74:	e01f      	b.n	8000db6 <leds_set+0x92>
	else if(led == 0b11){
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d10e      	bne.n	8000d9a <leds_set+0x76>
		GPIOA->ODR |= GPIO_ODR_OD5;
 8000d7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d86:	f043 0320 	orr.w	r3, r3, #32
 8000d8a:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= GPIO_ODR_OD14;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <leds_set+0xa0>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <leds_set+0xa0>)
 8000d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d96:	6153      	str	r3, [r2, #20]
}
 8000d98:	e00d      	b.n	8000db6 <leds_set+0x92>
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000da4:	f023 0320 	bic.w	r3, r3, #32
 8000da8:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <leds_set+0xa0>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <leds_set+0xa0>)
 8000db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000db4:	6153      	str	r3, [r2, #20]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <lsm6dsl_init>:
#include "i2c.h"
#include "stdio.h"

#define LSM6DSL_ADDRESS 0b1101010 // Slave address. SA0 connected to ground by default

void lsm6dsl_init() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

	// 1. Write CTRL1_XL = 60h, Acc = 416 Hz (High-Performance mode)
	uint8_t ctrl1_xl_data[2] = {0x10, 0x60}; // CTRL1_XL register address, value
 8000dce:	f246 0310 	movw	r3, #24592	; 0x6010
 8000dd2:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(LSM6DSL_ADDRESS, 0, ctrl1_xl_data, 2);
 8000dd4:	1d3a      	adds	r2, r7, #4
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	2100      	movs	r1, #0
 8000dda:	206a      	movs	r0, #106	; 0x6a
 8000ddc:	f7ff feaa 	bl	8000b34 <i2c_transaction>

	// 2. Write INT1_CTRL = 01h, Acc data-ready interrupt on INT1
	uint8_t int1_ctrl_data[2] = {0x0D, 0x01};
 8000de0:	f240 130d 	movw	r3, #269	; 0x10d
 8000de4:	803b      	strh	r3, [r7, #0]
	i2c_transaction(LSM6DSL_ADDRESS, 0, int1_ctrl_data, 2);
 8000de6:	463a      	mov	r2, r7
 8000de8:	2302      	movs	r3, #2
 8000dea:	2100      	movs	r1, #0
 8000dec:	206a      	movs	r0, #106	; 0x6a
 8000dee:	f7ff fea1 	bl	8000b34 <i2c_transaction>

}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b08a      	sub	sp, #40	; 0x28
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]

	/* Arrays initially filled with addresses of acceleration data registers,
	 * later used to store acceleration values
	 */
	uint8_t acceleration_x_l[1] = {0x28};
 8000e06:	2328      	movs	r3, #40	; 0x28
 8000e08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t acceleration_x_h[1] = {0x29};
 8000e0c:	2329      	movs	r3, #41	; 0x29
 8000e0e:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t acceleration_y_l[1] = {0x2A};
 8000e12:	232a      	movs	r3, #42	; 0x2a
 8000e14:	773b      	strb	r3, [r7, #28]
	uint8_t acceleration_y_h[1] = {0x2B};
 8000e16:	232b      	movs	r3, #43	; 0x2b
 8000e18:	763b      	strb	r3, [r7, #24]
	uint8_t acceleration_z_l[1] = {0x2C};
 8000e1a:	232c      	movs	r3, #44	; 0x2c
 8000e1c:	753b      	strb	r3, [r7, #20]
	uint8_t acceleration_z_h[1] = {0x2D};
 8000e1e:	232d      	movs	r3, #45	; 0x2d
 8000e20:	743b      	strb	r3, [r7, #16]

	// Write address of register for lower part of acceleration in x-direction
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_x_l, 1);
 8000e22:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e26:	2301      	movs	r3, #1
 8000e28:	2100      	movs	r1, #0
 8000e2a:	206a      	movs	r0, #106	; 0x6a
 8000e2c:	f7ff fe82 	bl	8000b34 <i2c_transaction>
	// Read lower part of acceleration in x-direction
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_x_l, 1);
 8000e30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e34:	2301      	movs	r3, #1
 8000e36:	2101      	movs	r1, #1
 8000e38:	206a      	movs	r0, #106	; 0x6a
 8000e3a:	f7ff fe7b 	bl	8000b34 <i2c_transaction>
	// Write address of register for higher part of acceleration in x-direction
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_x_h, 1);
 8000e3e:	f107 0220 	add.w	r2, r7, #32
 8000e42:	2301      	movs	r3, #1
 8000e44:	2100      	movs	r1, #0
 8000e46:	206a      	movs	r0, #106	; 0x6a
 8000e48:	f7ff fe74 	bl	8000b34 <i2c_transaction>
	// Read higher part of acceleration in x-direction
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_x_h, 1);
 8000e4c:	f107 0220 	add.w	r2, r7, #32
 8000e50:	2301      	movs	r3, #1
 8000e52:	2101      	movs	r1, #1
 8000e54:	206a      	movs	r0, #106	; 0x6a
 8000e56:	f7ff fe6d 	bl	8000b34 <i2c_transaction>

	/* Similar for acceleration in y-direction */
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_y_l, 1);
 8000e5a:	f107 021c 	add.w	r2, r7, #28
 8000e5e:	2301      	movs	r3, #1
 8000e60:	2100      	movs	r1, #0
 8000e62:	206a      	movs	r0, #106	; 0x6a
 8000e64:	f7ff fe66 	bl	8000b34 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_y_l, 1);
 8000e68:	f107 021c 	add.w	r2, r7, #28
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	2101      	movs	r1, #1
 8000e70:	206a      	movs	r0, #106	; 0x6a
 8000e72:	f7ff fe5f 	bl	8000b34 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_y_h, 1);
 8000e76:	f107 0218 	add.w	r2, r7, #24
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	206a      	movs	r0, #106	; 0x6a
 8000e80:	f7ff fe58 	bl	8000b34 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_y_h, 1);
 8000e84:	f107 0218 	add.w	r2, r7, #24
 8000e88:	2301      	movs	r3, #1
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	206a      	movs	r0, #106	; 0x6a
 8000e8e:	f7ff fe51 	bl	8000b34 <i2c_transaction>

	/* Similar for acceleration in z-direction */
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_z_l, 1);
 8000e92:	f107 0214 	add.w	r2, r7, #20
 8000e96:	2301      	movs	r3, #1
 8000e98:	2100      	movs	r1, #0
 8000e9a:	206a      	movs	r0, #106	; 0x6a
 8000e9c:	f7ff fe4a 	bl	8000b34 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_z_l, 1);
 8000ea0:	f107 0214 	add.w	r2, r7, #20
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	206a      	movs	r0, #106	; 0x6a
 8000eaa:	f7ff fe43 	bl	8000b34 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 0, acceleration_z_h, 1);
 8000eae:	f107 0210 	add.w	r2, r7, #16
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	206a      	movs	r0, #106	; 0x6a
 8000eb8:	f7ff fe3c 	bl	8000b34 <i2c_transaction>
	i2c_transaction(LSM6DSL_ADDRESS, 1, acceleration_z_h, 1);
 8000ebc:	f107 0210 	add.w	r2, r7, #16
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	206a      	movs	r0, #106	; 0x6a
 8000ec6:	f7ff fe35 	bl	8000b34 <i2c_transaction>

	/* Combine acceleration data and put them into pointers x, y, and z respectively */
	*x = (int16_t)((acceleration_x_h[0] << 8) | acceleration_x_l[0]);
 8000eca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)((acceleration_y_h[0] << 8) | acceleration_y_l[0]);
 8000ee0:	7e3b      	ldrb	r3, [r7, #24]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	7f3b      	ldrb	r3, [r7, #28]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)((acceleration_z_h[0] << 8) | acceleration_z_l[0]);
 8000ef2:	7c3b      	ldrb	r3, [r7, #16]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	7d3b      	ldrb	r3, [r7, #20]
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	801a      	strh	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <DisconnectAndSuspend>:
char message[60]; // Note: Adjust the buffer size as needed
uint8_t standby = 1; // Standby flag
volatile int flag_print = 0; // Signal bottom half of handler to print message
volatile int flag_ble_init = 0; // Signal bottom half of handler to activate BLE device

void DisconnectAndSuspend(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

	  // Reset BLE module
	  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f000 ffe7 	bl	8001eec <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000f1e:	200a      	movs	r0, #10
 8000f20:	f000 fcec 	bl	80018fc <HAL_Delay>
	  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f000 ffdd 	bl	8001eec <HAL_GPIO_WritePin>

	  // Enter standby mode
	  standbyBle();
 8000f32:	f7ff fabf 	bl	80004b4 <standbyBle>
	  standby = 1;
 8000f36:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <DisconnectAndSuspend+0x34>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000013c 	.word	0x2000013c

08000f44 <TIM2_IRQHandler>:
void TIM2_IRQHandler(){
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
	if((TIM2->SR & TIM_SR_UIF) == 1){
 8000f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f040 8082 	bne.w	800105e <TIM2_IRQHandler+0x11a>
		timer_reset(TIM2); // Reset the timer's counter
 8000f5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f5e:	f000 fc0d 	bl	800177c <timer_reset>
		TIM2->SR &= !TIM_SR_UIF; // Clear the update event flag
 8000f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]

		interval_count+=1;
 8000f70:	4b3d      	ldr	r3, [pc, #244]	; (8001068 <TIM2_IRQHandler+0x124>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	1c54      	adds	r4, r2, #1
 8000f78:	f143 0500 	adc.w	r5, r3, #0
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <TIM2_IRQHandler+0x124>)
 8000f7e:	e9c3 4500 	strd	r4, r5, [r3]

		/* At end of first minute */
		if(one_min_passed == 0 && interval_count == INTERVAL_COUNT_TEN_SEC){
 8000f82:	4b3a      	ldr	r3, [pc, #232]	; (800106c <TIM2_IRQHandler+0x128>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d113      	bne.n	8000fb2 <TIM2_IRQHandler+0x6e>
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <TIM2_IRQHandler+0x124>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 8000f94:	430b      	orrs	r3, r1
 8000f96:	d10c      	bne.n	8000fb2 <TIM2_IRQHandler+0x6e>
			one_min_passed = 1;
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <TIM2_IRQHandler+0x128>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
			interval_count = 0;
 8000f9e:	4932      	ldr	r1, [pc, #200]	; (8001068 <TIM2_IRQHandler+0x124>)
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	e9c1 2300 	strd	r2, r3, [r1]
			flag_ble_init = 1;
 8000fac:	4b30      	ldr	r3, [pc, #192]	; (8001070 <TIM2_IRQHandler+0x12c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
		}

		/* After first minute */
		if(one_min_passed) {
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <TIM2_IRQHandler+0x128>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d051      	beq.n	800105e <TIM2_IRQHandler+0x11a>
			/* Flash LEDs */
			if(ptr1 > 0) {
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <TIM2_IRQHandler+0x130>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d014      	beq.n	8000fec <TIM2_IRQHandler+0xa8>
				ptr1-=1;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <TIM2_IRQHandler+0x130>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <TIM2_IRQHandler+0x130>)
 8000fca:	6013      	str	r3, [r2, #0]
				// Find current pair of bits
				uint8_t value = (preamble >> (ptr1 * 2)) & 0b11;
 8000fcc:	2399      	movs	r3, #153	; 0x99
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <TIM2_IRQHandler+0x130>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa42 f303 	asr.w	r3, r2, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	71bb      	strb	r3, [r7, #6]
				// Set LEDs
				leds_set(value);
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe9d 	bl	8000d24 <leds_set>
 8000fea:	e022      	b.n	8001032 <TIM2_IRQHandler+0xee>
			}
			else {
				if(ptr2 > 0) {
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <TIM2_IRQHandler+0x134>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d01e      	beq.n	8001032 <TIM2_IRQHandler+0xee>
					ptr2-=1;
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <TIM2_IRQHandler+0x134>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <TIM2_IRQHandler+0x134>)
 8000ffc:	6013      	str	r3, [r2, #0]
					// Find current pair of bits
					uint8_t value = (pid >> (ptr2 * 2)) & 0b11;
 8000ffe:	f641 53fc 	movw	r3, #7676	; 0x1dfc
 8001002:	461a      	mov	r2, r3
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <TIM2_IRQHandler+0x134>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa42 f303 	asr.w	r3, r2, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	71fb      	strb	r3, [r7, #7]
					// Set LEDs
					leds_set(value);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe83 	bl	8000d24 <leds_set>
					/* If all bits are iterated, reset ptr1 and ptr2 to prepare
					 * for next iteration
					 */
					if(ptr2 == 0) {
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <TIM2_IRQHandler+0x134>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d105      	bne.n	8001032 <TIM2_IRQHandler+0xee>
						ptr1 = 4;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <TIM2_IRQHandler+0x130>)
 8001028:	2204      	movs	r2, #4
 800102a:	601a      	str	r2, [r3, #0]
						ptr2 = 8;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <TIM2_IRQHandler+0x134>)
 800102e:	2208      	movs	r2, #8
 8001030:	601a      	str	r2, [r3, #0]
					}
				}
			}

			/* When ten seconds have passed */
			if(interval_count == INTERVAL_COUNT_TEN_SEC) {
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <TIM2_IRQHandler+0x124>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 800103c:	430b      	orrs	r3, r1
 800103e:	d10e      	bne.n	800105e <TIM2_IRQHandler+0x11a>
				interval_count = 0;
 8001040:	4909      	ldr	r1, [pc, #36]	; (8001068 <TIM2_IRQHandler+0x124>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	e9c1 2300 	strd	r2, r3, [r1]
				loss_time_passed+=10;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <TIM2_IRQHandler+0x138>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	330a      	adds	r3, #10
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <TIM2_IRQHandler+0x138>)
 8001056:	6013      	str	r3, [r2, #0]
				flag_print = 1; // Signal message printing
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <TIM2_IRQHandler+0x13c>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bdb0      	pop	{r4, r5, r7, pc}
 8001066:	bf00      	nop
 8001068:	200002e0 	.word	0x200002e0
 800106c:	200002dc 	.word	0x200002dc
 8001070:	2000032c 	.word	0x2000032c
 8001074:	20000134 	.word	0x20000134
 8001078:	20000138 	.word	0x20000138
 800107c:	200002e8 	.word	0x200002e8
 8001080:	20000328 	.word	0x20000328

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108a:	f000 fbc2 	bl	8001812 <HAL_Init>
  //project 2 init

  leds_init();
 800108e:	f7ff fddd 	bl	8000c4c <leds_init>
  	i2c_init();
 8001092:	f7ff fcdf 	bl	8000a54 <i2c_init>
  	lsm6dsl_init();
 8001096:	f7ff fe97 	bl	8000dc8 <lsm6dsl_init>
  	timer_init(TIM2);
 800109a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800109e:	f000 fb17 	bl	80016d0 <timer_init>

  	timer_set_ms(TIM2, 50); // Set time interval to 50 ms
 80010a2:	2132      	movs	r1, #50	; 0x32
 80010a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010a8:	f000 fb75 	bl	8001796 <timer_set_ms>
  	int16_t acceleration_x;
  	int16_t acceleration_y;
  	int16_t acceleration_z;
  	// project 2 init end
  /* Configure the system clock */
  SystemClock_Config();
 80010ac:	f000 f8a6 	bl	80011fc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b0:	f000 f928 	bl	8001304 <MX_GPIO_Init>
  MX_SPI3_Init();
 80010b4:	f000 f8e8 	bl	8001288 <MX_SPI3_Init>



  while (1)
  {
	  lsm6dsl_read_xyz(&acceleration_x, &acceleration_y, &acceleration_z);
 80010b8:	1dba      	adds	r2, r7, #6
 80010ba:	f107 0108 	add.w	r1, r7, #8
 80010be:	f107 030a 	add.w	r3, r7, #10
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fe99 	bl	8000dfa <lsm6dsl_read_xyz>

	  int32_t net_acceleration_squared = acceleration_x * acceleration_x
 80010c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80010d0:	fb03 f202 	mul.w	r2, r3, r2
	  		+ acceleration_y * acceleration_y + acceleration_z * acceleration_z;
 80010d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80010d8:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80010dc:	fb01 f303 	mul.w	r3, r1, r3
 80010e0:	441a      	add	r2, r3
 80010e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010ea:	fb01 f303 	mul.w	r3, r1, r3
	  int32_t net_acceleration_squared = acceleration_x * acceleration_x
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]

	  // Activate
	  if(flag_ble_init) {
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <main+0x144>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d01b      	beq.n	8001132 <main+0xae>
		  flag_ble_init = 0;
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <main+0x144>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
		  standby = 0;
 8001100:	4b32      	ldr	r3, [pc, #200]	; (80011cc <main+0x148>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]

		  //RESET BLE MODULE
		  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f000 feec 	bl	8001eec <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8001114:	200a      	movs	r0, #10
 8001116:	f000 fbf1 	bl	80018fc <HAL_Delay>
		  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f000 fee2 	bl	8001eec <HAL_GPIO_WritePin>

		  ble_init();
 8001128:	f7ff f8aa 	bl	8000280 <ble_init>
		  HAL_Delay(10);
 800112c:	200a      	movs	r0, #10
 800112e:	f000 fbe5 	bl	80018fc <HAL_Delay>
	  }

	  // Stationary
	  if(net_acceleration_squared >= 113550336 && net_acceleration_squared <= 489736900) {
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <main+0x14c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	dd2d      	ble.n	8001196 <main+0x112>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4a25      	ldr	r2, [pc, #148]	; (80011d4 <main+0x150>)
 800113e:	4293      	cmp	r3, r2
 8001140:	dc29      	bgt.n	8001196 <main+0x112>
		  // If not in standby mode
		  if(!standby) {
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <main+0x148>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d13c      	bne.n	80011c4 <main+0x140>
			  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	4822      	ldr	r0, [pc, #136]	; (80011d8 <main+0x154>)
 800114e:	f000 feb5 	bl	8001ebc <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <main+0xda>
				  catchBLE();
 8001158:	f7ff fac2 	bl	80006e0 <catchBLE>
		  if(!standby) {
 800115c:	e032      	b.n	80011c4 <main+0x140>
			  }
			  else {
				  // When printing flag is set
				  if(flag_print == 1) {
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <main+0x158>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d12e      	bne.n	80011c4 <main+0x140>
					  flag_print = 0;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <main+0x158>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
					  // Print message. Note: Adjust the buffer size as needed
					  snprintf(message, sizeof(message), "Missing %d seconds", loss_time_passed);
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <main+0x15c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <main+0x160>)
 8001172:	213c      	movs	r1, #60	; 0x3c
 8001174:	481c      	ldr	r0, [pc, #112]	; (80011e8 <main+0x164>)
 8001176:	f002 fb7b 	bl	8003870 <sniprintf>
					  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(message), (uint8_t*)message);
 800117a:	481b      	ldr	r0, [pc, #108]	; (80011e8 <main+0x164>)
 800117c:	f7ff f828 	bl	80001d0 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <main+0x164>)
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4613      	mov	r3, r2
 800118a:	2200      	movs	r2, #0
 800118c:	4917      	ldr	r1, [pc, #92]	; (80011ec <main+0x168>)
 800118e:	4818      	ldr	r0, [pc, #96]	; (80011f0 <main+0x16c>)
 8001190:	f7ff fc0c 	bl	80009ac <updateCharValue>
		  if(!standby) {
 8001194:	e016      	b.n	80011c4 <main+0x140>
			  }
		  }
	  }
	  else{ // Moving
		// Disconnect from BLE and move to standby mode
		DisconnectAndSuspend();
 8001196:	f7ff feb9 	bl	8000f0c <DisconnectAndSuspend>

	  	// Reset counters and time status
	  	timer_reset(TIM2);
 800119a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800119e:	f000 faed 	bl	800177c <timer_reset>
	  	interval_count = 0;
 80011a2:	4914      	ldr	r1, [pc, #80]	; (80011f4 <main+0x170>)
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	e9c1 2300 	strd	r2, r3, [r1]
	  	one_min_passed = 0;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <main+0x174>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
	  	loss_time_passed = 0;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <main+0x15c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

	  	leds_set(0b00); // Turn off LEDs
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fdb1 	bl	8000d24 <leds_set>
 80011c2:	e779      	b.n	80010b8 <main+0x34>
		  if(!standby) {
 80011c4:	bf00      	nop
  {
 80011c6:	e777      	b.n	80010b8 <main+0x34>
 80011c8:	2000032c 	.word	0x2000032c
 80011cc:	2000013c 	.word	0x2000013c
 80011d0:	06c4a3ff 	.word	0x06c4a3ff
 80011d4:	1d30cac4 	.word	0x1d30cac4
 80011d8:	48001000 	.word	0x48001000
 80011dc:	20000328 	.word	0x20000328
 80011e0:	200002e8 	.word	0x200002e8
 80011e4:	080040b0 	.word	0x080040b0
 80011e8:	200002ec 	.word	0x200002ec
 80011ec:	200002d0 	.word	0x200002d0
 80011f0:	200002c8 	.word	0x200002c8
 80011f4:	200002e0 	.word	0x200002e0
 80011f8:	200002dc 	.word	0x200002dc

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b096      	sub	sp, #88	; 0x58
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2244      	movs	r2, #68	; 0x44
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fb64 	bl	80038d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800121e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001222:	f000 fead 	bl	8001f80 <HAL_PWREx_ControlVoltageScaling>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800122c:	f000 f902 	bl	8001434 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001230:	2310      	movs	r3, #16
 8001232:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 800123c:	2370      	movs	r3, #112	; 0x70
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4618      	mov	r0, r3
 800124a:	f000 feef 	bl	800202c <HAL_RCC_OscConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001254:	f000 f8ee 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001258:	230f      	movs	r3, #15
 800125a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f001 fab7 	bl	80027e4 <HAL_RCC_ClockConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800127c:	f000 f8da 	bl	8001434 <Error_Handler>
  }
}
 8001280:	bf00      	nop
 8001282:	3758      	adds	r7, #88	; 0x58
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_SPI3_Init+0x74>)
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <MX_SPI3_Init+0x78>)
 8001290:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_SPI3_Init+0x74>)
 8001294:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001298:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_SPI3_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_SPI3_Init+0x74>)
 80012a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_SPI3_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_SPI3_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_SPI3_Init+0x74>)
 80012b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_SPI3_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_SPI3_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_SPI3_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_SPI3_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_SPI3_Init+0x74>)
 80012d6:	2207      	movs	r2, #7
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_SPI3_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_SPI3_Init+0x74>)
 80012e2:	2208      	movs	r2, #8
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_SPI3_Init+0x74>)
 80012e8:	f001 fc68 	bl	8002bbc <HAL_SPI_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f000 f89f 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000330 	.word	0x20000330
 8001300:	40003c00 	.word	0x40003c00

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <MX_GPIO_Init+0x124>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a42      	ldr	r2, [pc, #264]	; (8001428 <MX_GPIO_Init+0x124>)
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b40      	ldr	r3, [pc, #256]	; (8001428 <MX_GPIO_Init+0x124>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <MX_GPIO_Init+0x124>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a3c      	ldr	r2, [pc, #240]	; (8001428 <MX_GPIO_Init+0x124>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <MX_GPIO_Init+0x124>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <MX_GPIO_Init+0x124>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a36      	ldr	r2, [pc, #216]	; (8001428 <MX_GPIO_Init+0x124>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b34      	ldr	r3, [pc, #208]	; (8001428 <MX_GPIO_Init+0x124>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001362:	4b31      	ldr	r3, [pc, #196]	; (8001428 <MX_GPIO_Init+0x124>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a30      	ldr	r2, [pc, #192]	; (8001428 <MX_GPIO_Init+0x124>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <MX_GPIO_Init+0x124>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <MX_GPIO_Init+0x124>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <MX_GPIO_Init+0x124>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <MX_GPIO_Init+0x124>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2120      	movs	r1, #32
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f000 fda7 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a4:	4821      	ldr	r0, [pc, #132]	; (800142c <MX_GPIO_Init+0x128>)
 80013a6:	f000 fda1 	bl	8001eec <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f000 fd9a 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80013b8:	2340      	movs	r3, #64	; 0x40
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4818      	ldr	r0, [pc, #96]	; (8001430 <MX_GPIO_Init+0x12c>)
 80013ce:	f000 fbcb 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 80013d2:	f44f 7390 	mov.w	r3, #288	; 0x120
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f000 fbbb 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 80013f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <MX_GPIO_Init+0x128>)
 800140c:	f000 fbac 	bl	8001b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2017      	movs	r0, #23
 8001416:	f000 fb70 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800141a:	2017      	movs	r0, #23
 800141c:	f000 fb89 	bl	8001b32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000
 800142c:	48000c00 	.word	0x48000c00
 8001430:	48001000 	.word	0x48001000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_MspInit+0x44>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6613      	str	r3, [r2, #96]	; 0x60
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_MspInit+0x44>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x44>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6593      	str	r3, [r2, #88]	; 0x58
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x44>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_SPI_MspInit+0x7c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d128      	bne.n	80014fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b4:	6593      	str	r3, [r2, #88]	; 0x58
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ec:	2306      	movs	r3, #6
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <HAL_SPI_MspInit+0x84>)
 80014f8:	f000 fb36 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40003c00 	.word	0x40003c00
 8001508:	40021000 	.word	0x40021000
 800150c:	48000800 	.word	0x48000800

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <NMI_Handler+0x4>

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <MemManage_Handler+0x4>

08001522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler+0x4>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <UsageFault_Handler+0x4>

0800152e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 f9ae 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <EXTI9_5_IRQHandler+0x14>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 800156e:	2040      	movs	r0, #64	; 0x40
 8001570:	f000 fcd4 	bl	8001f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200002d8 	.word	0x200002d8

0800157c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_sbrk+0x50>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x16>
		heap_end = &end;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <_sbrk+0x50>)
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <_sbrk+0x54>)
 8001590:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <_sbrk+0x50>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <_sbrk+0x50>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	466a      	mov	r2, sp
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d907      	bls.n	80015b6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80015a6:	f002 f9af 	bl	8003908 <__errno>
 80015aa:	4603      	mov	r3, r0
 80015ac:	220c      	movs	r2, #12
 80015ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
 80015b4:	e006      	b.n	80015c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <_sbrk+0x50>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a03      	ldr	r2, [pc, #12]	; (80015cc <_sbrk+0x50>)
 80015c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000394 	.word	0x20000394
 80015d0:	200004e8 	.word	0x200004e8

080015d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <SystemInit+0x64>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <SystemInit+0x64>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <SystemInit+0x68>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <SystemInit+0x68>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <SystemInit+0x68>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <SystemInit+0x68>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <SystemInit+0x68>)
 8001600:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001604:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001608:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <SystemInit+0x68>)
 800160c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001610:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <SystemInit+0x68>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <SystemInit+0x68>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <SystemInit+0x68>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SystemInit+0x64>)
 8001626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162a:	609a      	str	r2, [r3, #8]
#endif
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00
 800163c:	40021000 	.word	0x40021000

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4907      	ldr	r1, [pc, #28]	; (8001678 <__NVIC_EnableIRQ+0x38>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

	if(timer == TIM2) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016de:	d105      	bne.n	80016ec <timer_init+0x1c>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // Enable TIM2 clock
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <timer_init+0xa4>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	4a23      	ldr	r2, [pc, #140]	; (8001774 <timer_init+0xa4>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6593      	str	r3, [r2, #88]	; 0x58
	}

	if(timer == TIM3) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a22      	ldr	r2, [pc, #136]	; (8001778 <timer_init+0xa8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d105      	bne.n	8001700 <timer_init+0x30>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN; // Enable TIM3 clock
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <timer_init+0xa4>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <timer_init+0xa4>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	6593      	str	r3, [r2, #88]	; 0x58
	}

	timer->CR1 &= ~TIM_CR1_CEN; // Stop timer
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 0201 	bic.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	601a      	str	r2, [r3, #0]
	timer->SR = 0; // Clear timer status register
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
	timer->CNT = 0; // Clear timer count register
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	; 0x24

	timer->ARR = 0xFFFFFFFF; // Set auto-reload value to maximum (32-bit timer, upcounting)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f04f 32ff 	mov.w	r2, #4294967295
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c

	timer->DIER |= TIM_DIER_UIE; // Enable timer update interrupt internally
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	60da      	str	r2, [r3, #12]

	if(timer == TIM2) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001732:	d106      	bne.n	8001742 <timer_init+0x72>
		NVIC_EnableIRQ(TIM2_IRQn); // Enable TIM2 update interrupt NVIC
 8001734:	201c      	movs	r0, #28
 8001736:	f7ff ff83 	bl	8001640 <__NVIC_EnableIRQ>
		NVIC_SetPriority(TIM2_IRQn, 0); // Set priority of the interrupt
 800173a:	2100      	movs	r1, #0
 800173c:	201c      	movs	r0, #28
 800173e:	f7ff ff9d 	bl	800167c <__NVIC_SetPriority>
	}

	if(timer == TIM3) {
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <timer_init+0xa8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d106      	bne.n	8001758 <timer_init+0x88>
		NVIC_EnableIRQ(TIM3_IRQn); // Enable TIM3 update interrupt NVIC
 800174a:	201d      	movs	r0, #29
 800174c:	f7ff ff78 	bl	8001640 <__NVIC_EnableIRQ>
		NVIC_SetPriority(TIM3_IRQn, 0); // Set priority of the interrupt
 8001750:	2100      	movs	r1, #0
 8001752:	201d      	movs	r0, #29
 8001754:	f7ff ff92 	bl	800167c <__NVIC_SetPriority>
	}

	timer->PSC = 200;// Decrease timer frequency to 8000000 / 200 = 40000 Hz
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	22c8      	movs	r2, #200	; 0xc8
 800175c:	629a      	str	r2, [r3, #40]	; 0x28

	timer->CR1 |= TIM_CR1_CEN; // Enable timer
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]

}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	40000400 	.word	0x40000400

0800177c <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	timer->CNT = 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	807b      	strh	r3, [r7, #2]
	timer->ARR = 20 * period_ms - 1; // In each cycle, timer counts {ARR} times to reach {peroid_ms}/2 ms
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	3b01      	subs	r3, #1
 80017ae:	461a      	mov	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c4:	f7ff ff06 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <LoopForever+0x6>)
  ldr r1, =_edata
 80017ca:	490d      	ldr	r1, [pc, #52]	; (8001800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <LoopForever+0xe>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e0:	4c0a      	ldr	r4, [pc, #40]	; (800180c <LoopForever+0x16>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ee:	f002 f891 	bl	8003914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017f2:	f7ff fc47 	bl	8001084 <main>

080017f6 <LoopForever>:

LoopForever:
    b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8001804:	08004140 	.word	0x08004140
  ldr r2, =_sbss
 8001808:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 800180c:	200004e4 	.word	0x200004e4

08001810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC1_2_IRQHandler>

08001812 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f961 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f80e 	bl	8001844 <HAL_InitTick>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	e001      	b.n	8001838 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001834:	f7ff fe04 	bl	8001440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001838:	79fb      	ldrb	r3, [r7, #7]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_InitTick+0x6c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d023      	beq.n	80018a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_InitTick+0x70>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_InitTick+0x6c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f96d 	bl	8001b4e <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10f      	bne.n	800189a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d809      	bhi.n	8001894 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f937 	bl	8001afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_InitTick+0x74>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e007      	b.n	80018a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
 8001898:	e004      	b.n	80018a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	e001      	b.n	80018a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000148 	.word	0x20000148
 80018b4:	20000140 	.word	0x20000140
 80018b8:	20000144 	.word	0x20000144

080018bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000148 	.word	0x20000148
 80018e0:	20000398 	.word	0x20000398

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000398 	.word	0x20000398

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001914:	d005      	beq.n	8001922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_Delay+0x44>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001922:	bf00      	nop
 8001924:	f7ff ffde 	bl	80018e4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f7      	bhi.n	8001924 <HAL_Delay+0x28>
  {
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000148 	.word	0x20000148

08001944 <__NVIC_SetPriorityGrouping>:
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800196c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_GetPriorityGrouping>:
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f7ff ff8e 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff29 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0c:	f7ff ff3e 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	6978      	ldr	r0, [r7, #20]
 8001b18:	f7ff ff8e 	bl	8001a38 <NVIC_EncodePriority>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff5d 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff31 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffa2 	bl	8001aa0 <SysTick_Config>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b76:	e17f      	b.n	8001e78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8171 	beq.w	8001e72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d005      	beq.n	8001ba8 <HAL_GPIO_Init+0x40>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d130      	bne.n	8001c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bde:	2201      	movs	r2, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 0201 	and.w	r2, r3, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d118      	bne.n	8001c48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	08db      	lsrs	r3, r3, #3
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d017      	beq.n	8001c84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	6939      	ldr	r1, [r7, #16]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80ac 	beq.w	8001e72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	4a5e      	ldr	r2, [pc, #376]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6613      	str	r3, [r2, #96]	; 0x60
 8001d26:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d32:	4a5a      	ldr	r2, [pc, #360]	; (8001e9c <HAL_GPIO_Init+0x334>)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d5c:	d025      	beq.n	8001daa <HAL_GPIO_Init+0x242>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4f      	ldr	r2, [pc, #316]	; (8001ea0 <HAL_GPIO_Init+0x338>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d01f      	beq.n	8001da6 <HAL_GPIO_Init+0x23e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4e      	ldr	r2, [pc, #312]	; (8001ea4 <HAL_GPIO_Init+0x33c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0x23a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4d      	ldr	r2, [pc, #308]	; (8001ea8 <HAL_GPIO_Init+0x340>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x236>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4c      	ldr	r2, [pc, #304]	; (8001eac <HAL_GPIO_Init+0x344>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x232>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4b      	ldr	r2, [pc, #300]	; (8001eb0 <HAL_GPIO_Init+0x348>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x22e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4a      	ldr	r2, [pc, #296]	; (8001eb4 <HAL_GPIO_Init+0x34c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x22a>
 8001d8e:	2306      	movs	r3, #6
 8001d90:	e00c      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e00a      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001d96:	2305      	movs	r3, #5
 8001d98:	e008      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e004      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001daa:	2300      	movs	r3, #0
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	f002 0203 	and.w	r2, r2, #3
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	4093      	lsls	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dbc:	4937      	ldr	r1, [pc, #220]	; (8001e9c <HAL_GPIO_Init+0x334>)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dca:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <HAL_GPIO_Init+0x350>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dee:	4a32      	ldr	r2, [pc, #200]	; (8001eb8 <HAL_GPIO_Init+0x350>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001df4:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <HAL_GPIO_Init+0x350>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e18:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <HAL_GPIO_Init+0x350>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_GPIO_Init+0x350>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e42:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <HAL_GPIO_Init+0x350>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_GPIO_Init+0x350>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e6c:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <HAL_GPIO_Init+0x350>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f47f ae78 	bne.w	8001b78 <HAL_GPIO_Init+0x10>
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	48000400 	.word	0x48000400
 8001ea4:	48000800 	.word	0x48000800
 8001ea8:	48000c00 	.word	0x48000c00
 8001eac:	48001000 	.word	0x48001000
 8001eb0:	48001400 	.word	0x48001400
 8001eb4:	48001800 	.word	0x48001800
 8001eb8:	40010400 	.word	0x40010400

08001ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	887b      	ldrh	r3, [r7, #2]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e001      	b.n	8001ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f806 	bl	8001f4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40007000 	.word	0x40007000

08001f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8e:	d130      	bne.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9c:	d038      	beq.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2232      	movs	r2, #50	; 0x32
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0c9b      	lsrs	r3, r3, #18
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc4:	e002      	b.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd8:	d102      	bne.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f2      	bne.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fec:	d110      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e00f      	b.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffe:	d007      	beq.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002008:	4a05      	ldr	r2, [pc, #20]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40007000 	.word	0x40007000
 8002024:	20000140 	.word	0x20000140
 8002028:	431bde83 	.word	0x431bde83

0800202c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e3ca      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203e:	4b97      	ldr	r3, [pc, #604]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002048:	4b94      	ldr	r3, [pc, #592]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80e4 	beq.w	8002228 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_RCC_OscConfig+0x4a>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	f040 808b 	bne.w	8002184 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 8087 	bne.w	8002184 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002076:	4b89      	ldr	r3, [pc, #548]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x62>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e3a2      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	4b82      	ldr	r3, [pc, #520]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_RCC_OscConfig+0x7c>
 800209e:	4b7f      	ldr	r3, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a6:	e005      	b.n	80020b4 <HAL_RCC_OscConfig+0x88>
 80020a8:	4b7c      	ldr	r3, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d223      	bcs.n	8002100 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fd1d 	bl	8002afc <RCC_SetFlashLatencyFromMSIRange>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e383      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020cc:	4b73      	ldr	r3, [pc, #460]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a72      	ldr	r2, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b70      	ldr	r3, [pc, #448]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	496d      	ldr	r1, [pc, #436]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ea:	4b6c      	ldr	r3, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	4968      	ldr	r1, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
 80020fe:	e025      	b.n	800214c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002100:	4b66      	ldr	r3, [pc, #408]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a65      	ldr	r2, [pc, #404]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4960      	ldr	r1, [pc, #384]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211e:	4b5f      	ldr	r3, [pc, #380]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	495b      	ldr	r1, [pc, #364]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fcdd 	bl	8002afc <RCC_SetFlashLatencyFromMSIRange>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e343      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800214c:	f000 fc4a 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b52      	ldr	r3, [pc, #328]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	4950      	ldr	r1, [pc, #320]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	4a4e      	ldr	r2, [pc, #312]	; (80022a4 <HAL_RCC_OscConfig+0x278>)
 800216a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800216c:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <HAL_RCC_OscConfig+0x27c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fb67 	bl	8001844 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d052      	beq.n	8002226 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	e327      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d032      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800218c:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a42      	ldr	r2, [pc, #264]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002198:	f7ff fba4 	bl	80018e4 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a0:	f7ff fba0 	bl	80018e4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e310      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b2:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a36      	ldr	r2, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4931      	ldr	r1, [pc, #196]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	492c      	ldr	r1, [pc, #176]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	e01a      	b.n	8002228 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fb71 	bl	80018e4 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002206:	f7ff fb6d 	bl	80018e4 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e2dd      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x1da>
 8002224:	e000      	b.n	8002228 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002226:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d074      	beq.n	800231e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b08      	cmp	r3, #8
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x21a>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d10e      	bne.n	800225e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d10b      	bne.n	800225e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d064      	beq.n	800231c <HAL_RCC_OscConfig+0x2f0>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d160      	bne.n	800231c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e2ba      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x24a>
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e026      	b.n	80022c4 <HAL_RCC_OscConfig+0x298>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227e:	d115      	bne.n	80022ac <HAL_RCC_OscConfig+0x280>
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a05      	ldr	r2, [pc, #20]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a02      	ldr	r2, [pc, #8]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e014      	b.n	80022c4 <HAL_RCC_OscConfig+0x298>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	080040c4 	.word	0x080040c4
 80022a4:	20000140 	.word	0x20000140
 80022a8:	20000144 	.word	0x20000144
 80022ac:	4ba0      	ldr	r3, [pc, #640]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a9f      	ldr	r2, [pc, #636]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b9d      	ldr	r3, [pc, #628]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a9c      	ldr	r2, [pc, #624]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fb0a 	bl	80018e4 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff fb06 	bl	80018e4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e276      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	4b92      	ldr	r3, [pc, #584]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x2a8>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff faf6 	bl	80018e4 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff faf2 	bl	80018e4 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e262      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x2d0>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d060      	beq.n	80023ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x310>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d119      	bne.n	800236a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d116      	bne.n	800236a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800233c:	4b7c      	ldr	r3, [pc, #496]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x328>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e23f      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b76      	ldr	r3, [pc, #472]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	4973      	ldr	r1, [pc, #460]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	e040      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d023      	beq.n	80023ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002372:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6e      	ldr	r2, [pc, #440]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7ff fab1 	bl	80018e4 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002386:	f7ff faad 	bl	80018e4 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e21d      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	4b65      	ldr	r3, [pc, #404]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b62      	ldr	r3, [pc, #392]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	495f      	ldr	r1, [pc, #380]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e018      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7ff fa8d 	bl	80018e4 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7ff fa89 	bl	80018e4 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1f9      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d03c      	beq.n	8002472 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01c      	beq.n	800243a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002400:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	4a4a      	ldr	r2, [pc, #296]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7ff fa68 	bl	80018e4 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002418:	f7ff fa64 	bl	80018e4 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e1d4      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800242c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ef      	beq.n	8002418 <HAL_RCC_OscConfig+0x3ec>
 8002438:	e01b      	b.n	8002472 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800243c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002440:	4a3b      	ldr	r2, [pc, #236]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7ff fa4b 	bl	80018e4 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7ff fa47 	bl	80018e4 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1b7      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ef      	bne.n	8002452 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80a6 	beq.w	80025cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10d      	bne.n	80024ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	; 0x58
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a8:	2301      	movs	r3, #1
 80024aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d118      	bne.n	80024ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c4:	f7ff fa0e 	bl	80018e4 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7ff fa0a 	bl	80018e4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e17a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_RCC_OscConfig+0x4d8>
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002502:	e029      	b.n	8002558 <HAL_RCC_OscConfig+0x52c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d115      	bne.n	8002538 <HAL_RCC_OscConfig+0x50c>
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	4a03      	ldr	r2, [pc, #12]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800252c:	e014      	b.n	8002558 <HAL_RCC_OscConfig+0x52c>
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	40007000 	.word	0x40007000
 8002538:	4b9c      	ldr	r3, [pc, #624]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a9b      	ldr	r2, [pc, #620]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002548:	4b98      	ldr	r3, [pc, #608]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	4a97      	ldr	r2, [pc, #604]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d016      	beq.n	800258e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7ff f9c0 	bl	80018e4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7ff f9bc 	bl	80018e4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e12a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	4b8b      	ldr	r3, [pc, #556]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ed      	beq.n	8002568 <HAL_RCC_OscConfig+0x53c>
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7ff f9a9 	bl	80018e4 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7ff f9a5 	bl	80018e4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e113      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ac:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ed      	bne.n	8002596 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b7a      	ldr	r3, [pc, #488]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	4a79      	ldr	r2, [pc, #484]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80fe 	beq.w	80027d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	2b02      	cmp	r3, #2
 80025dc:	f040 80d0 	bne.w	8002780 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025e0:	4b72      	ldr	r3, [pc, #456]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0203 	and.w	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d130      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	3b01      	subs	r3, #1
 8002600:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d127      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d11f      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002620:	2a07      	cmp	r2, #7
 8002622:	bf14      	ite	ne
 8002624:	2201      	movne	r2, #1
 8002626:	2200      	moveq	r2, #0
 8002628:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800262a:	4293      	cmp	r3, r2
 800262c:	d113      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d109      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d06e      	beq.n	8002734 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d069      	beq.n	8002730 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0ad      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002678:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a4b      	ldr	r2, [pc, #300]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002684:	f7ff f92e 	bl	80018e4 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7ff f92a 	bl	80018e4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e09a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269e:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026aa:	4b40      	ldr	r3, [pc, #256]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026ba:	3a01      	subs	r2, #1
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c4:	0212      	lsls	r2, r2, #8
 80026c6:	4311      	orrs	r1, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026cc:	0852      	lsrs	r2, r2, #1
 80026ce:	3a01      	subs	r2, #1
 80026d0:	0552      	lsls	r2, r2, #21
 80026d2:	4311      	orrs	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026d8:	0852      	lsrs	r2, r2, #1
 80026da:	3a01      	subs	r2, #1
 80026dc:	0652      	lsls	r2, r2, #25
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026e4:	0912      	lsrs	r2, r2, #4
 80026e6:	0452      	lsls	r2, r2, #17
 80026e8:	430a      	orrs	r2, r1
 80026ea:	4930      	ldr	r1, [pc, #192]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026f0:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026fc:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a2a      	ldr	r2, [pc, #168]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002706:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002708:	f7ff f8ec 	bl	80018e4 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7ff f8e8 	bl	80018e4 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e058      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800272e:	e050      	b.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e04f      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d148      	bne.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a16      	ldr	r2, [pc, #88]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002756:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002758:	f7ff f8c4 	bl	80018e4 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7ff f8c0 	bl	80018e4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e030      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x734>
 800277e:	e028      	b.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d023      	beq.n	80027ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a08      	ldr	r2, [pc, #32]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800278c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7ff f8a7 	bl	80018e4 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002798:	e00c      	b.n	80027b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7ff f8a3 	bl	80018e4 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d905      	bls.n	80027b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e013      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
 80027ac:	40021000 	.word	0x40021000
 80027b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_OscConfig+0x7b0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ec      	bne.n	800279a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x7b0>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	4905      	ldr	r1, [pc, #20]	; (80027dc <HAL_RCC_OscConfig+0x7b0>)
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_RCC_OscConfig+0x7b4>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
 80027cc:	e001      	b.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	feeefffc 	.word	0xfeeefffc

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0e7      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4970      	ldr	r1, [pc, #448]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b6e      	ldr	r3, [pc, #440]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0cf      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d010      	beq.n	8002856 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002840:	429a      	cmp	r2, r3
 8002842:	d908      	bls.n	8002856 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002844:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4960      	ldr	r1, [pc, #384]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d04c      	beq.n	80028fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	4b5a      	ldr	r3, [pc, #360]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d121      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0a6      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002882:	4b54      	ldr	r3, [pc, #336]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e09a      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800289a:	4b4e      	ldr	r3, [pc, #312]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e08e      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028aa:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e086      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4943      	ldr	r1, [pc, #268]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7ff f80a 	bl	80018e4 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7ff f806 	bl	80018e4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e06e      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d010      	beq.n	800292a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002914:	429a      	cmp	r2, r3
 8002916:	d208      	bcs.n	800292a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	492b      	ldr	r1, [pc, #172]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800292a:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d210      	bcs.n	800295a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002938:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 0207 	bic.w	r2, r3, #7
 8002940:	4923      	ldr	r1, [pc, #140]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e036      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	4918      	ldr	r1, [pc, #96]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4910      	ldr	r1, [pc, #64]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002998:	f000 f824 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	490b      	ldr	r1, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x1f4>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1f8>)
 80029b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1fc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe ff41 	bl	8001844 <HAL_InitTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80029c6:	7afb      	ldrb	r3, [r7, #11]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	080040c4 	.word	0x080040c4
 80029dc:	20000140 	.word	0x20000140
 80029e0:	20000144 	.word	0x20000144

080029e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f2:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029fc:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d121      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d11e      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a18:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a24:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e005      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a40:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d102      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e004      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d134      	bne.n	8002adc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d003      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0xac>
 8002a88:	e005      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a8c:	617b      	str	r3, [r7, #20]
      break;
 8002a8e:	e005      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a92:	617b      	str	r3, [r7, #20]
      break;
 8002a94:	e002      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	617b      	str	r3, [r7, #20]
      break;
 8002a9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a9c:	4b13      	ldr	r3, [pc, #76]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	fb03 f202 	mul.w	r2, r3, r2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	0e5b      	lsrs	r3, r3, #25
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	3301      	adds	r3, #1
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002adc:	69bb      	ldr	r3, [r7, #24]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3724      	adds	r7, #36	; 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	080040d4 	.word	0x080040d4
 8002af4:	00f42400 	.word	0x00f42400
 8002af8:	007a1200 	.word	0x007a1200

08002afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b08:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b14:	f7ff fa26 	bl	8001f64 <HAL_PWREx_GetVoltageRange>
 8002b18:	6178      	str	r0, [r7, #20]
 8002b1a:	e014      	b.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b26:	6593      	str	r3, [r2, #88]	; 0x58
 8002b28:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b34:	f7ff fa16 	bl	8001f64 <HAL_PWREx_GetVoltageRange>
 8002b38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	d10b      	bne.n	8002b66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d919      	bls.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2ba0      	cmp	r3, #160	; 0xa0
 8002b58:	d902      	bls.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	e013      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b60:	2301      	movs	r3, #1
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e010      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b80      	cmp	r3, #128	; 0x80
 8002b6a:	d902      	bls.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	e00a      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b80      	cmp	r3, #128	; 0x80
 8002b76:	d102      	bne.n	8002b7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b78:	2302      	movs	r3, #2
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e004      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b70      	cmp	r3, #112	; 0x70
 8002b82:	d101      	bne.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b84:	2301      	movs	r3, #1
 8002b86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 0207 	bic.w	r2, r3, #7
 8002b90:	4909      	ldr	r1, [pc, #36]	; (8002bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b98:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40022000 	.word	0x40022000

08002bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e095      	b.n	8002cfa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d108      	bne.n	8002be8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bde:	d009      	beq.n	8002bf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
 8002be6:	e005      	b.n	8002bf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fc3a 	bl	8001488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c34:	d902      	bls.n	8002c3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e002      	b.n	8002c42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c4a:	d007      	beq.n	8002c5c <HAL_SPI_Init+0xa0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c54:	d002      	beq.n	8002c5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	ea42 0103 	orr.w	r1, r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	0c1b      	lsrs	r3, r3, #16
 8002cb8:	f003 0204 	and.w	r2, r3, #4
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cd8:	ea42 0103 	orr.w	r1, r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b088      	sub	sp, #32
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_SPI_Transmit+0x22>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e15f      	b.n	8002fe4 <HAL_SPI_Transmit+0x2e2>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d2c:	f7fe fdda 	bl	80018e4 <HAL_GetTick>
 8002d30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d002      	beq.n	8002d48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
 8002d44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d46:	e148      	b.n	8002fda <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_SPI_Transmit+0x52>
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d58:	e13f      	b.n	8002fda <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da4:	d10f      	bne.n	8002dc6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d007      	beq.n	8002de4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dec:	d94f      	bls.n	8002e8e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_SPI_Transmit+0xfa>
 8002df6:	8afb      	ldrh	r3, [r7, #22]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d142      	bne.n	8002e82 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	881a      	ldrh	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	1c9a      	adds	r2, r3, #2
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e20:	e02f      	b.n	8002e82 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d112      	bne.n	8002e56 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	881a      	ldrh	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	1c9a      	adds	r2, r3, #2
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e54:	e015      	b.n	8002e82 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e56:	f7fe fd45 	bl	80018e4 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d803      	bhi.n	8002e6e <HAL_SPI_Transmit+0x16c>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d102      	bne.n	8002e74 <HAL_SPI_Transmit+0x172>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002e80:	e0ab      	b.n	8002fda <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ca      	bne.n	8002e22 <HAL_SPI_Transmit+0x120>
 8002e8c:	e080      	b.n	8002f90 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_SPI_Transmit+0x19a>
 8002e96:	8afb      	ldrh	r3, [r7, #22]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d174      	bne.n	8002f86 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d912      	bls.n	8002ecc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	881a      	ldrh	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	1c9a      	adds	r2, r3, #2
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b02      	subs	r3, #2
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eca:	e05c      	b.n	8002f86 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ef2:	e048      	b.n	8002f86 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d12b      	bne.n	8002f5a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d912      	bls.n	8002f32 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b02      	subs	r3, #2
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f30:	e029      	b.n	8002f86 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f58:	e015      	b.n	8002f86 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f5a:	f7fe fcc3 	bl	80018e4 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d803      	bhi.n	8002f72 <HAL_SPI_Transmit+0x270>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d102      	bne.n	8002f78 <HAL_SPI_Transmit+0x276>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d106      	bne.n	8002f86 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002f84:	e029      	b.n	8002fda <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1b1      	bne.n	8002ef4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	6839      	ldr	r1, [r7, #0]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fb69 	bl	800366c <SPI_EndRxTxTransaction>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e003      	b.n	8002fda <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fe2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_SPI_TransmitReceive+0x26>
 800300e:	2302      	movs	r3, #2
 8003010:	e20a      	b.n	8003428 <HAL_SPI_TransmitReceive+0x43c>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800301a:	f7fe fc63 	bl	80018e4 <HAL_GetTick>
 800301e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003026:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003036:	7efb      	ldrb	r3, [r7, #27]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d00e      	beq.n	800305a <HAL_SPI_TransmitReceive+0x6e>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003042:	d106      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x66>
 800304c:	7efb      	ldrb	r3, [r7, #27]
 800304e:	2b04      	cmp	r3, #4
 8003050:	d003      	beq.n	800305a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003058:	e1e0      	b.n	800341c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_SPI_TransmitReceive+0x80>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_SPI_TransmitReceive+0x80>
 8003066:	887b      	ldrh	r3, [r7, #2]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d103      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003072:	e1d3      	b.n	800341c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b04      	cmp	r3, #4
 800307e:	d003      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2205      	movs	r2, #5
 8003084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	887a      	ldrh	r2, [r7, #2]
 80030a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	887a      	ldrh	r2, [r7, #2]
 80030ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ca:	d802      	bhi.n	80030d2 <HAL_SPI_TransmitReceive+0xe6>
 80030cc:	8a3b      	ldrh	r3, [r7, #16]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d908      	bls.n	80030e4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	e007      	b.n	80030f4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d007      	beq.n	8003112 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003110:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800311a:	f240 8081 	bls.w	8003220 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_SPI_TransmitReceive+0x140>
 8003126:	8a7b      	ldrh	r3, [r7, #18]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d16d      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	881a      	ldrh	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	1c9a      	adds	r2, r3, #2
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003150:	e05a      	b.n	8003208 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b02      	cmp	r3, #2
 800315e:	d11b      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x1ac>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x1ac>
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	2b01      	cmp	r3, #1
 800316e:	d113      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	881a      	ldrh	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	1c9a      	adds	r2, r3, #2
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d11c      	bne.n	80031e0 <HAL_SPI_TransmitReceive+0x1f4>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	b292      	uxth	r2, r2
 80031be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	1c9a      	adds	r2, r3, #2
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031dc:	2301      	movs	r3, #1
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031e0:	f7fe fb80 	bl	80018e4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d80b      	bhi.n	8003208 <HAL_SPI_TransmitReceive+0x21c>
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d007      	beq.n	8003208 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003206:	e109      	b.n	800341c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d19f      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x166>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d199      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x166>
 800321e:	e0e3      	b.n	80033e8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x244>
 8003228:	8a7b      	ldrh	r3, [r7, #18]
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 80cf 	bne.w	80033ce <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d912      	bls.n	8003260 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	1c9a      	adds	r2, r3, #2
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b02      	subs	r3, #2
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800325e:	e0b6      	b.n	80033ce <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	7812      	ldrb	r2, [r2, #0]
 800326c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003286:	e0a2      	b.n	80033ce <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b02      	cmp	r3, #2
 8003294:	d134      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x314>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02f      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x314>
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d12c      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d912      	bls.n	80032d6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b02      	subs	r3, #2
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032d4:	e012      	b.n	80032fc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	7812      	ldrb	r2, [r2, #0]
 80032e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d148      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x3b4>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d042      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d923      	bls.n	800336e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	b292      	uxth	r2, r2
 8003332:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	1c9a      	adds	r2, r3, #2
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b02      	subs	r3, #2
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d81f      	bhi.n	800339c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	e016      	b.n	800339c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f103 020c 	add.w	r2, r3, #12
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	7812      	ldrb	r2, [r2, #0]
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800339c:	2301      	movs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033a0:	f7fe faa0 	bl	80018e4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d803      	bhi.n	80033b8 <HAL_SPI_TransmitReceive+0x3cc>
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d102      	bne.n	80033be <HAL_SPI_TransmitReceive+0x3d2>
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d107      	bne.n	80033ce <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80033cc:	e026      	b.n	800341c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f47f af57 	bne.w	8003288 <HAL_SPI_TransmitReceive+0x29c>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f47f af50 	bne.w	8003288 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f93d 	bl	800366c <SPI_EndRxTxTransaction>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e003      	b.n	800341c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003428:	4618      	mov	r0, r3
 800342a:	3728      	adds	r7, #40	; 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003440:	f7fe fa50 	bl	80018e4 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4413      	add	r3, r2
 800344e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003450:	f7fe fa48 	bl	80018e4 <HAL_GetTick>
 8003454:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003456:	4b39      	ldr	r3, [pc, #228]	; (800353c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	015b      	lsls	r3, r3, #5
 800345c:	0d1b      	lsrs	r3, r3, #20
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003466:	e054      	b.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d050      	beq.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003470:	f7fe fa38 	bl	80018e4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	429a      	cmp	r2, r3
 800347e:	d902      	bls.n	8003486 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d13d      	bne.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003494:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349e:	d111      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a8:	d004      	beq.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b2:	d107      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034cc:	d10f      	bne.n	80034ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e017      	b.n	8003532 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	3b01      	subs	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d19b      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000140 	.word	0x20000140

08003540 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003552:	f7fe f9c7 	bl	80018e4 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	4413      	add	r3, r2
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003562:	f7fe f9bf 	bl	80018e4 <HAL_GetTick>
 8003566:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003570:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00da      	lsls	r2, r3, #3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	0d1b      	lsrs	r3, r3, #20
 8003580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003588:	e060      	b.n	800364c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003590:	d107      	bne.n	80035a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d050      	beq.n	800364c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035aa:	f7fe f99b 	bl	80018e4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d902      	bls.n	80035c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d13d      	bne.n	800363c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d8:	d111      	bne.n	80035fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e2:	d004      	beq.n	80035ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ec:	d107      	bne.n	80035fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003606:	d10f      	bne.n	8003628 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003626:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e010      	b.n	800365e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	3b01      	subs	r3, #1
 800364a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d196      	bne.n	800358a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3728      	adds	r7, #40	; 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000140 	.word	0x20000140

0800366c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2200      	movs	r2, #0
 8003680:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff ff5b 	bl	8003540 <SPI_WaitFifoStateUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e027      	b.n	80036f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2200      	movs	r2, #0
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff fec0 	bl	8003430 <SPI_WaitFlagStateUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e014      	b.n	80036f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f7ff ff34 	bl	8003540 <SPI_WaitFifoStateUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e2:	f043 0220 	orr.w	r2, r3, #32
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e000      	b.n	80036f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <malloc>:
 80036f8:	4b02      	ldr	r3, [pc, #8]	; (8003704 <malloc+0xc>)
 80036fa:	4601      	mov	r1, r0
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	f000 b82b 	b.w	8003758 <_malloc_r>
 8003702:	bf00      	nop
 8003704:	20000198 	.word	0x20000198

08003708 <free>:
 8003708:	4b02      	ldr	r3, [pc, #8]	; (8003714 <free+0xc>)
 800370a:	4601      	mov	r1, r0
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	f000 b935 	b.w	800397c <_free_r>
 8003712:	bf00      	nop
 8003714:	20000198 	.word	0x20000198

08003718 <sbrk_aligned>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	4e0e      	ldr	r6, [pc, #56]	; (8003754 <sbrk_aligned+0x3c>)
 800371c:	460c      	mov	r4, r1
 800371e:	6831      	ldr	r1, [r6, #0]
 8003720:	4605      	mov	r5, r0
 8003722:	b911      	cbnz	r1, 800372a <sbrk_aligned+0x12>
 8003724:	f000 f8e0 	bl	80038e8 <_sbrk_r>
 8003728:	6030      	str	r0, [r6, #0]
 800372a:	4621      	mov	r1, r4
 800372c:	4628      	mov	r0, r5
 800372e:	f000 f8db 	bl	80038e8 <_sbrk_r>
 8003732:	1c43      	adds	r3, r0, #1
 8003734:	d00a      	beq.n	800374c <sbrk_aligned+0x34>
 8003736:	1cc4      	adds	r4, r0, #3
 8003738:	f024 0403 	bic.w	r4, r4, #3
 800373c:	42a0      	cmp	r0, r4
 800373e:	d007      	beq.n	8003750 <sbrk_aligned+0x38>
 8003740:	1a21      	subs	r1, r4, r0
 8003742:	4628      	mov	r0, r5
 8003744:	f000 f8d0 	bl	80038e8 <_sbrk_r>
 8003748:	3001      	adds	r0, #1
 800374a:	d101      	bne.n	8003750 <sbrk_aligned+0x38>
 800374c:	f04f 34ff 	mov.w	r4, #4294967295
 8003750:	4620      	mov	r0, r4
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	200003a0 	.word	0x200003a0

08003758 <_malloc_r>:
 8003758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800375c:	1ccd      	adds	r5, r1, #3
 800375e:	f025 0503 	bic.w	r5, r5, #3
 8003762:	3508      	adds	r5, #8
 8003764:	2d0c      	cmp	r5, #12
 8003766:	bf38      	it	cc
 8003768:	250c      	movcc	r5, #12
 800376a:	2d00      	cmp	r5, #0
 800376c:	4607      	mov	r7, r0
 800376e:	db01      	blt.n	8003774 <_malloc_r+0x1c>
 8003770:	42a9      	cmp	r1, r5
 8003772:	d905      	bls.n	8003780 <_malloc_r+0x28>
 8003774:	230c      	movs	r3, #12
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	2600      	movs	r6, #0
 800377a:	4630      	mov	r0, r6
 800377c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003780:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003854 <_malloc_r+0xfc>
 8003784:	f000 f868 	bl	8003858 <__malloc_lock>
 8003788:	f8d8 3000 	ldr.w	r3, [r8]
 800378c:	461c      	mov	r4, r3
 800378e:	bb5c      	cbnz	r4, 80037e8 <_malloc_r+0x90>
 8003790:	4629      	mov	r1, r5
 8003792:	4638      	mov	r0, r7
 8003794:	f7ff ffc0 	bl	8003718 <sbrk_aligned>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	4604      	mov	r4, r0
 800379c:	d155      	bne.n	800384a <_malloc_r+0xf2>
 800379e:	f8d8 4000 	ldr.w	r4, [r8]
 80037a2:	4626      	mov	r6, r4
 80037a4:	2e00      	cmp	r6, #0
 80037a6:	d145      	bne.n	8003834 <_malloc_r+0xdc>
 80037a8:	2c00      	cmp	r4, #0
 80037aa:	d048      	beq.n	800383e <_malloc_r+0xe6>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	4631      	mov	r1, r6
 80037b0:	4638      	mov	r0, r7
 80037b2:	eb04 0903 	add.w	r9, r4, r3
 80037b6:	f000 f897 	bl	80038e8 <_sbrk_r>
 80037ba:	4581      	cmp	r9, r0
 80037bc:	d13f      	bne.n	800383e <_malloc_r+0xe6>
 80037be:	6821      	ldr	r1, [r4, #0]
 80037c0:	1a6d      	subs	r5, r5, r1
 80037c2:	4629      	mov	r1, r5
 80037c4:	4638      	mov	r0, r7
 80037c6:	f7ff ffa7 	bl	8003718 <sbrk_aligned>
 80037ca:	3001      	adds	r0, #1
 80037cc:	d037      	beq.n	800383e <_malloc_r+0xe6>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	442b      	add	r3, r5
 80037d2:	6023      	str	r3, [r4, #0]
 80037d4:	f8d8 3000 	ldr.w	r3, [r8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d038      	beq.n	800384e <_malloc_r+0xf6>
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	42a2      	cmp	r2, r4
 80037e0:	d12b      	bne.n	800383a <_malloc_r+0xe2>
 80037e2:	2200      	movs	r2, #0
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	e00f      	b.n	8003808 <_malloc_r+0xb0>
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	1b52      	subs	r2, r2, r5
 80037ec:	d41f      	bmi.n	800382e <_malloc_r+0xd6>
 80037ee:	2a0b      	cmp	r2, #11
 80037f0:	d917      	bls.n	8003822 <_malloc_r+0xca>
 80037f2:	1961      	adds	r1, r4, r5
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	6025      	str	r5, [r4, #0]
 80037f8:	bf18      	it	ne
 80037fa:	6059      	strne	r1, [r3, #4]
 80037fc:	6863      	ldr	r3, [r4, #4]
 80037fe:	bf08      	it	eq
 8003800:	f8c8 1000 	streq.w	r1, [r8]
 8003804:	5162      	str	r2, [r4, r5]
 8003806:	604b      	str	r3, [r1, #4]
 8003808:	4638      	mov	r0, r7
 800380a:	f104 060b 	add.w	r6, r4, #11
 800380e:	f000 f829 	bl	8003864 <__malloc_unlock>
 8003812:	f026 0607 	bic.w	r6, r6, #7
 8003816:	1d23      	adds	r3, r4, #4
 8003818:	1af2      	subs	r2, r6, r3
 800381a:	d0ae      	beq.n	800377a <_malloc_r+0x22>
 800381c:	1b9b      	subs	r3, r3, r6
 800381e:	50a3      	str	r3, [r4, r2]
 8003820:	e7ab      	b.n	800377a <_malloc_r+0x22>
 8003822:	42a3      	cmp	r3, r4
 8003824:	6862      	ldr	r2, [r4, #4]
 8003826:	d1dd      	bne.n	80037e4 <_malloc_r+0x8c>
 8003828:	f8c8 2000 	str.w	r2, [r8]
 800382c:	e7ec      	b.n	8003808 <_malloc_r+0xb0>
 800382e:	4623      	mov	r3, r4
 8003830:	6864      	ldr	r4, [r4, #4]
 8003832:	e7ac      	b.n	800378e <_malloc_r+0x36>
 8003834:	4634      	mov	r4, r6
 8003836:	6876      	ldr	r6, [r6, #4]
 8003838:	e7b4      	b.n	80037a4 <_malloc_r+0x4c>
 800383a:	4613      	mov	r3, r2
 800383c:	e7cc      	b.n	80037d8 <_malloc_r+0x80>
 800383e:	230c      	movs	r3, #12
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4638      	mov	r0, r7
 8003844:	f000 f80e 	bl	8003864 <__malloc_unlock>
 8003848:	e797      	b.n	800377a <_malloc_r+0x22>
 800384a:	6025      	str	r5, [r4, #0]
 800384c:	e7dc      	b.n	8003808 <_malloc_r+0xb0>
 800384e:	605b      	str	r3, [r3, #4]
 8003850:	deff      	udf	#255	; 0xff
 8003852:	bf00      	nop
 8003854:	2000039c 	.word	0x2000039c

08003858 <__malloc_lock>:
 8003858:	4801      	ldr	r0, [pc, #4]	; (8003860 <__malloc_lock+0x8>)
 800385a:	f000 b87f 	b.w	800395c <__retarget_lock_acquire_recursive>
 800385e:	bf00      	nop
 8003860:	200004e0 	.word	0x200004e0

08003864 <__malloc_unlock>:
 8003864:	4801      	ldr	r0, [pc, #4]	; (800386c <__malloc_unlock+0x8>)
 8003866:	f000 b87a 	b.w	800395e <__retarget_lock_release_recursive>
 800386a:	bf00      	nop
 800386c:	200004e0 	.word	0x200004e0

08003870 <sniprintf>:
 8003870:	b40c      	push	{r2, r3}
 8003872:	b530      	push	{r4, r5, lr}
 8003874:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <sniprintf+0x64>)
 8003876:	1e0c      	subs	r4, r1, #0
 8003878:	681d      	ldr	r5, [r3, #0]
 800387a:	b09d      	sub	sp, #116	; 0x74
 800387c:	da08      	bge.n	8003890 <sniprintf+0x20>
 800387e:	238b      	movs	r3, #139	; 0x8b
 8003880:	602b      	str	r3, [r5, #0]
 8003882:	f04f 30ff 	mov.w	r0, #4294967295
 8003886:	b01d      	add	sp, #116	; 0x74
 8003888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800388c:	b002      	add	sp, #8
 800388e:	4770      	bx	lr
 8003890:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003894:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003898:	bf14      	ite	ne
 800389a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800389e:	4623      	moveq	r3, r4
 80038a0:	9304      	str	r3, [sp, #16]
 80038a2:	9307      	str	r3, [sp, #28]
 80038a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038a8:	9002      	str	r0, [sp, #8]
 80038aa:	9006      	str	r0, [sp, #24]
 80038ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80038b2:	ab21      	add	r3, sp, #132	; 0x84
 80038b4:	a902      	add	r1, sp, #8
 80038b6:	4628      	mov	r0, r5
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	f000 f905 	bl	8003ac8 <_svfiprintf_r>
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	bfbc      	itt	lt
 80038c2:	238b      	movlt	r3, #139	; 0x8b
 80038c4:	602b      	strlt	r3, [r5, #0]
 80038c6:	2c00      	cmp	r4, #0
 80038c8:	d0dd      	beq.n	8003886 <sniprintf+0x16>
 80038ca:	9b02      	ldr	r3, [sp, #8]
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	e7d9      	b.n	8003886 <sniprintf+0x16>
 80038d2:	bf00      	nop
 80038d4:	20000198 	.word	0x20000198

080038d8 <memset>:
 80038d8:	4402      	add	r2, r0
 80038da:	4603      	mov	r3, r0
 80038dc:	4293      	cmp	r3, r2
 80038de:	d100      	bne.n	80038e2 <memset+0xa>
 80038e0:	4770      	bx	lr
 80038e2:	f803 1b01 	strb.w	r1, [r3], #1
 80038e6:	e7f9      	b.n	80038dc <memset+0x4>

080038e8 <_sbrk_r>:
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	4d06      	ldr	r5, [pc, #24]	; (8003904 <_sbrk_r+0x1c>)
 80038ec:	2300      	movs	r3, #0
 80038ee:	4604      	mov	r4, r0
 80038f0:	4608      	mov	r0, r1
 80038f2:	602b      	str	r3, [r5, #0]
 80038f4:	f7fd fe42 	bl	800157c <_sbrk>
 80038f8:	1c43      	adds	r3, r0, #1
 80038fa:	d102      	bne.n	8003902 <_sbrk_r+0x1a>
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	b103      	cbz	r3, 8003902 <_sbrk_r+0x1a>
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	bd38      	pop	{r3, r4, r5, pc}
 8003904:	200004dc 	.word	0x200004dc

08003908 <__errno>:
 8003908:	4b01      	ldr	r3, [pc, #4]	; (8003910 <__errno+0x8>)
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000198 	.word	0x20000198

08003914 <__libc_init_array>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4d0d      	ldr	r5, [pc, #52]	; (800394c <__libc_init_array+0x38>)
 8003918:	4c0d      	ldr	r4, [pc, #52]	; (8003950 <__libc_init_array+0x3c>)
 800391a:	1b64      	subs	r4, r4, r5
 800391c:	10a4      	asrs	r4, r4, #2
 800391e:	2600      	movs	r6, #0
 8003920:	42a6      	cmp	r6, r4
 8003922:	d109      	bne.n	8003938 <__libc_init_array+0x24>
 8003924:	4d0b      	ldr	r5, [pc, #44]	; (8003954 <__libc_init_array+0x40>)
 8003926:	4c0c      	ldr	r4, [pc, #48]	; (8003958 <__libc_init_array+0x44>)
 8003928:	f000 fbae 	bl	8004088 <_init>
 800392c:	1b64      	subs	r4, r4, r5
 800392e:	10a4      	asrs	r4, r4, #2
 8003930:	2600      	movs	r6, #0
 8003932:	42a6      	cmp	r6, r4
 8003934:	d105      	bne.n	8003942 <__libc_init_array+0x2e>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	f855 3b04 	ldr.w	r3, [r5], #4
 800393c:	4798      	blx	r3
 800393e:	3601      	adds	r6, #1
 8003940:	e7ee      	b.n	8003920 <__libc_init_array+0xc>
 8003942:	f855 3b04 	ldr.w	r3, [r5], #4
 8003946:	4798      	blx	r3
 8003948:	3601      	adds	r6, #1
 800394a:	e7f2      	b.n	8003932 <__libc_init_array+0x1e>
 800394c:	08004138 	.word	0x08004138
 8003950:	08004138 	.word	0x08004138
 8003954:	08004138 	.word	0x08004138
 8003958:	0800413c 	.word	0x0800413c

0800395c <__retarget_lock_acquire_recursive>:
 800395c:	4770      	bx	lr

0800395e <__retarget_lock_release_recursive>:
 800395e:	4770      	bx	lr

08003960 <memcpy>:
 8003960:	440a      	add	r2, r1
 8003962:	4291      	cmp	r1, r2
 8003964:	f100 33ff 	add.w	r3, r0, #4294967295
 8003968:	d100      	bne.n	800396c <memcpy+0xc>
 800396a:	4770      	bx	lr
 800396c:	b510      	push	{r4, lr}
 800396e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003976:	4291      	cmp	r1, r2
 8003978:	d1f9      	bne.n	800396e <memcpy+0xe>
 800397a:	bd10      	pop	{r4, pc}

0800397c <_free_r>:
 800397c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800397e:	2900      	cmp	r1, #0
 8003980:	d044      	beq.n	8003a0c <_free_r+0x90>
 8003982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003986:	9001      	str	r0, [sp, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f1a1 0404 	sub.w	r4, r1, #4
 800398e:	bfb8      	it	lt
 8003990:	18e4      	addlt	r4, r4, r3
 8003992:	f7ff ff61 	bl	8003858 <__malloc_lock>
 8003996:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <_free_r+0x94>)
 8003998:	9801      	ldr	r0, [sp, #4]
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	b933      	cbnz	r3, 80039ac <_free_r+0x30>
 800399e:	6063      	str	r3, [r4, #4]
 80039a0:	6014      	str	r4, [r2, #0]
 80039a2:	b003      	add	sp, #12
 80039a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039a8:	f7ff bf5c 	b.w	8003864 <__malloc_unlock>
 80039ac:	42a3      	cmp	r3, r4
 80039ae:	d908      	bls.n	80039c2 <_free_r+0x46>
 80039b0:	6825      	ldr	r5, [r4, #0]
 80039b2:	1961      	adds	r1, r4, r5
 80039b4:	428b      	cmp	r3, r1
 80039b6:	bf01      	itttt	eq
 80039b8:	6819      	ldreq	r1, [r3, #0]
 80039ba:	685b      	ldreq	r3, [r3, #4]
 80039bc:	1949      	addeq	r1, r1, r5
 80039be:	6021      	streq	r1, [r4, #0]
 80039c0:	e7ed      	b.n	800399e <_free_r+0x22>
 80039c2:	461a      	mov	r2, r3
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	b10b      	cbz	r3, 80039cc <_free_r+0x50>
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	d9fa      	bls.n	80039c2 <_free_r+0x46>
 80039cc:	6811      	ldr	r1, [r2, #0]
 80039ce:	1855      	adds	r5, r2, r1
 80039d0:	42a5      	cmp	r5, r4
 80039d2:	d10b      	bne.n	80039ec <_free_r+0x70>
 80039d4:	6824      	ldr	r4, [r4, #0]
 80039d6:	4421      	add	r1, r4
 80039d8:	1854      	adds	r4, r2, r1
 80039da:	42a3      	cmp	r3, r4
 80039dc:	6011      	str	r1, [r2, #0]
 80039de:	d1e0      	bne.n	80039a2 <_free_r+0x26>
 80039e0:	681c      	ldr	r4, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	6053      	str	r3, [r2, #4]
 80039e6:	440c      	add	r4, r1
 80039e8:	6014      	str	r4, [r2, #0]
 80039ea:	e7da      	b.n	80039a2 <_free_r+0x26>
 80039ec:	d902      	bls.n	80039f4 <_free_r+0x78>
 80039ee:	230c      	movs	r3, #12
 80039f0:	6003      	str	r3, [r0, #0]
 80039f2:	e7d6      	b.n	80039a2 <_free_r+0x26>
 80039f4:	6825      	ldr	r5, [r4, #0]
 80039f6:	1961      	adds	r1, r4, r5
 80039f8:	428b      	cmp	r3, r1
 80039fa:	bf04      	itt	eq
 80039fc:	6819      	ldreq	r1, [r3, #0]
 80039fe:	685b      	ldreq	r3, [r3, #4]
 8003a00:	6063      	str	r3, [r4, #4]
 8003a02:	bf04      	itt	eq
 8003a04:	1949      	addeq	r1, r1, r5
 8003a06:	6021      	streq	r1, [r4, #0]
 8003a08:	6054      	str	r4, [r2, #4]
 8003a0a:	e7ca      	b.n	80039a2 <_free_r+0x26>
 8003a0c:	b003      	add	sp, #12
 8003a0e:	bd30      	pop	{r4, r5, pc}
 8003a10:	2000039c 	.word	0x2000039c

08003a14 <__ssputs_r>:
 8003a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a18:	688e      	ldr	r6, [r1, #8]
 8003a1a:	461f      	mov	r7, r3
 8003a1c:	42be      	cmp	r6, r7
 8003a1e:	680b      	ldr	r3, [r1, #0]
 8003a20:	4682      	mov	sl, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	4690      	mov	r8, r2
 8003a26:	d82c      	bhi.n	8003a82 <__ssputs_r+0x6e>
 8003a28:	898a      	ldrh	r2, [r1, #12]
 8003a2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a2e:	d026      	beq.n	8003a7e <__ssputs_r+0x6a>
 8003a30:	6965      	ldr	r5, [r4, #20]
 8003a32:	6909      	ldr	r1, [r1, #16]
 8003a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a38:	eba3 0901 	sub.w	r9, r3, r1
 8003a3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a40:	1c7b      	adds	r3, r7, #1
 8003a42:	444b      	add	r3, r9
 8003a44:	106d      	asrs	r5, r5, #1
 8003a46:	429d      	cmp	r5, r3
 8003a48:	bf38      	it	cc
 8003a4a:	461d      	movcc	r5, r3
 8003a4c:	0553      	lsls	r3, r2, #21
 8003a4e:	d527      	bpl.n	8003aa0 <__ssputs_r+0x8c>
 8003a50:	4629      	mov	r1, r5
 8003a52:	f7ff fe81 	bl	8003758 <_malloc_r>
 8003a56:	4606      	mov	r6, r0
 8003a58:	b360      	cbz	r0, 8003ab4 <__ssputs_r+0xa0>
 8003a5a:	6921      	ldr	r1, [r4, #16]
 8003a5c:	464a      	mov	r2, r9
 8003a5e:	f7ff ff7f 	bl	8003960 <memcpy>
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	6126      	str	r6, [r4, #16]
 8003a70:	6165      	str	r5, [r4, #20]
 8003a72:	444e      	add	r6, r9
 8003a74:	eba5 0509 	sub.w	r5, r5, r9
 8003a78:	6026      	str	r6, [r4, #0]
 8003a7a:	60a5      	str	r5, [r4, #8]
 8003a7c:	463e      	mov	r6, r7
 8003a7e:	42be      	cmp	r6, r7
 8003a80:	d900      	bls.n	8003a84 <__ssputs_r+0x70>
 8003a82:	463e      	mov	r6, r7
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	4632      	mov	r2, r6
 8003a88:	4641      	mov	r1, r8
 8003a8a:	f000 faab 	bl	8003fe4 <memmove>
 8003a8e:	68a3      	ldr	r3, [r4, #8]
 8003a90:	1b9b      	subs	r3, r3, r6
 8003a92:	60a3      	str	r3, [r4, #8]
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	4433      	add	r3, r6
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	f000 fab9 	bl	8004018 <_realloc_r>
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d1e0      	bne.n	8003a6e <__ssputs_r+0x5a>
 8003aac:	6921      	ldr	r1, [r4, #16]
 8003aae:	4650      	mov	r0, sl
 8003ab0:	f7ff ff64 	bl	800397c <_free_r>
 8003ab4:	230c      	movs	r3, #12
 8003ab6:	f8ca 3000 	str.w	r3, [sl]
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac0:	81a3      	strh	r3, [r4, #12]
 8003ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac6:	e7e9      	b.n	8003a9c <__ssputs_r+0x88>

08003ac8 <_svfiprintf_r>:
 8003ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003acc:	4698      	mov	r8, r3
 8003ace:	898b      	ldrh	r3, [r1, #12]
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	b09d      	sub	sp, #116	; 0x74
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	460d      	mov	r5, r1
 8003ad8:	4614      	mov	r4, r2
 8003ada:	d50e      	bpl.n	8003afa <_svfiprintf_r+0x32>
 8003adc:	690b      	ldr	r3, [r1, #16]
 8003ade:	b963      	cbnz	r3, 8003afa <_svfiprintf_r+0x32>
 8003ae0:	2140      	movs	r1, #64	; 0x40
 8003ae2:	f7ff fe39 	bl	8003758 <_malloc_r>
 8003ae6:	6028      	str	r0, [r5, #0]
 8003ae8:	6128      	str	r0, [r5, #16]
 8003aea:	b920      	cbnz	r0, 8003af6 <_svfiprintf_r+0x2e>
 8003aec:	230c      	movs	r3, #12
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	e0d0      	b.n	8003c98 <_svfiprintf_r+0x1d0>
 8003af6:	2340      	movs	r3, #64	; 0x40
 8003af8:	616b      	str	r3, [r5, #20]
 8003afa:	2300      	movs	r3, #0
 8003afc:	9309      	str	r3, [sp, #36]	; 0x24
 8003afe:	2320      	movs	r3, #32
 8003b00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b08:	2330      	movs	r3, #48	; 0x30
 8003b0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003cb0 <_svfiprintf_r+0x1e8>
 8003b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b12:	f04f 0901 	mov.w	r9, #1
 8003b16:	4623      	mov	r3, r4
 8003b18:	469a      	mov	sl, r3
 8003b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b1e:	b10a      	cbz	r2, 8003b24 <_svfiprintf_r+0x5c>
 8003b20:	2a25      	cmp	r2, #37	; 0x25
 8003b22:	d1f9      	bne.n	8003b18 <_svfiprintf_r+0x50>
 8003b24:	ebba 0b04 	subs.w	fp, sl, r4
 8003b28:	d00b      	beq.n	8003b42 <_svfiprintf_r+0x7a>
 8003b2a:	465b      	mov	r3, fp
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	4629      	mov	r1, r5
 8003b30:	4638      	mov	r0, r7
 8003b32:	f7ff ff6f 	bl	8003a14 <__ssputs_r>
 8003b36:	3001      	adds	r0, #1
 8003b38:	f000 80a9 	beq.w	8003c8e <_svfiprintf_r+0x1c6>
 8003b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b3e:	445a      	add	r2, fp
 8003b40:	9209      	str	r2, [sp, #36]	; 0x24
 8003b42:	f89a 3000 	ldrb.w	r3, [sl]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80a1 	beq.w	8003c8e <_svfiprintf_r+0x1c6>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b56:	f10a 0a01 	add.w	sl, sl, #1
 8003b5a:	9304      	str	r3, [sp, #16]
 8003b5c:	9307      	str	r3, [sp, #28]
 8003b5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b62:	931a      	str	r3, [sp, #104]	; 0x68
 8003b64:	4654      	mov	r4, sl
 8003b66:	2205      	movs	r2, #5
 8003b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b6c:	4850      	ldr	r0, [pc, #320]	; (8003cb0 <_svfiprintf_r+0x1e8>)
 8003b6e:	f7fc fb37 	bl	80001e0 <memchr>
 8003b72:	9a04      	ldr	r2, [sp, #16]
 8003b74:	b9d8      	cbnz	r0, 8003bae <_svfiprintf_r+0xe6>
 8003b76:	06d0      	lsls	r0, r2, #27
 8003b78:	bf44      	itt	mi
 8003b7a:	2320      	movmi	r3, #32
 8003b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b80:	0711      	lsls	r1, r2, #28
 8003b82:	bf44      	itt	mi
 8003b84:	232b      	movmi	r3, #43	; 0x2b
 8003b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b90:	d015      	beq.n	8003bbe <_svfiprintf_r+0xf6>
 8003b92:	9a07      	ldr	r2, [sp, #28]
 8003b94:	4654      	mov	r4, sl
 8003b96:	2000      	movs	r0, #0
 8003b98:	f04f 0c0a 	mov.w	ip, #10
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ba2:	3b30      	subs	r3, #48	; 0x30
 8003ba4:	2b09      	cmp	r3, #9
 8003ba6:	d94d      	bls.n	8003c44 <_svfiprintf_r+0x17c>
 8003ba8:	b1b0      	cbz	r0, 8003bd8 <_svfiprintf_r+0x110>
 8003baa:	9207      	str	r2, [sp, #28]
 8003bac:	e014      	b.n	8003bd8 <_svfiprintf_r+0x110>
 8003bae:	eba0 0308 	sub.w	r3, r0, r8
 8003bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	46a2      	mov	sl, r4
 8003bbc:	e7d2      	b.n	8003b64 <_svfiprintf_r+0x9c>
 8003bbe:	9b03      	ldr	r3, [sp, #12]
 8003bc0:	1d19      	adds	r1, r3, #4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	9103      	str	r1, [sp, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bfbb      	ittet	lt
 8003bca:	425b      	neglt	r3, r3
 8003bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8003bd0:	9307      	strge	r3, [sp, #28]
 8003bd2:	9307      	strlt	r3, [sp, #28]
 8003bd4:	bfb8      	it	lt
 8003bd6:	9204      	strlt	r2, [sp, #16]
 8003bd8:	7823      	ldrb	r3, [r4, #0]
 8003bda:	2b2e      	cmp	r3, #46	; 0x2e
 8003bdc:	d10c      	bne.n	8003bf8 <_svfiprintf_r+0x130>
 8003bde:	7863      	ldrb	r3, [r4, #1]
 8003be0:	2b2a      	cmp	r3, #42	; 0x2a
 8003be2:	d134      	bne.n	8003c4e <_svfiprintf_r+0x186>
 8003be4:	9b03      	ldr	r3, [sp, #12]
 8003be6:	1d1a      	adds	r2, r3, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	9203      	str	r2, [sp, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bfb8      	it	lt
 8003bf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bf4:	3402      	adds	r4, #2
 8003bf6:	9305      	str	r3, [sp, #20]
 8003bf8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003cc0 <_svfiprintf_r+0x1f8>
 8003bfc:	7821      	ldrb	r1, [r4, #0]
 8003bfe:	2203      	movs	r2, #3
 8003c00:	4650      	mov	r0, sl
 8003c02:	f7fc faed 	bl	80001e0 <memchr>
 8003c06:	b138      	cbz	r0, 8003c18 <_svfiprintf_r+0x150>
 8003c08:	9b04      	ldr	r3, [sp, #16]
 8003c0a:	eba0 000a 	sub.w	r0, r0, sl
 8003c0e:	2240      	movs	r2, #64	; 0x40
 8003c10:	4082      	lsls	r2, r0
 8003c12:	4313      	orrs	r3, r2
 8003c14:	3401      	adds	r4, #1
 8003c16:	9304      	str	r3, [sp, #16]
 8003c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c1c:	4825      	ldr	r0, [pc, #148]	; (8003cb4 <_svfiprintf_r+0x1ec>)
 8003c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c22:	2206      	movs	r2, #6
 8003c24:	f7fc fadc 	bl	80001e0 <memchr>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d038      	beq.n	8003c9e <_svfiprintf_r+0x1d6>
 8003c2c:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <_svfiprintf_r+0x1f0>)
 8003c2e:	bb1b      	cbnz	r3, 8003c78 <_svfiprintf_r+0x1b0>
 8003c30:	9b03      	ldr	r3, [sp, #12]
 8003c32:	3307      	adds	r3, #7
 8003c34:	f023 0307 	bic.w	r3, r3, #7
 8003c38:	3308      	adds	r3, #8
 8003c3a:	9303      	str	r3, [sp, #12]
 8003c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c3e:	4433      	add	r3, r6
 8003c40:	9309      	str	r3, [sp, #36]	; 0x24
 8003c42:	e768      	b.n	8003b16 <_svfiprintf_r+0x4e>
 8003c44:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c48:	460c      	mov	r4, r1
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	e7a6      	b.n	8003b9c <_svfiprintf_r+0xd4>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	3401      	adds	r4, #1
 8003c52:	9305      	str	r3, [sp, #20]
 8003c54:	4619      	mov	r1, r3
 8003c56:	f04f 0c0a 	mov.w	ip, #10
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c60:	3a30      	subs	r2, #48	; 0x30
 8003c62:	2a09      	cmp	r2, #9
 8003c64:	d903      	bls.n	8003c6e <_svfiprintf_r+0x1a6>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0c6      	beq.n	8003bf8 <_svfiprintf_r+0x130>
 8003c6a:	9105      	str	r1, [sp, #20]
 8003c6c:	e7c4      	b.n	8003bf8 <_svfiprintf_r+0x130>
 8003c6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c72:	4604      	mov	r4, r0
 8003c74:	2301      	movs	r3, #1
 8003c76:	e7f0      	b.n	8003c5a <_svfiprintf_r+0x192>
 8003c78:	ab03      	add	r3, sp, #12
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	462a      	mov	r2, r5
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <_svfiprintf_r+0x1f4>)
 8003c80:	a904      	add	r1, sp, #16
 8003c82:	4638      	mov	r0, r7
 8003c84:	f3af 8000 	nop.w
 8003c88:	1c42      	adds	r2, r0, #1
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	d1d6      	bne.n	8003c3c <_svfiprintf_r+0x174>
 8003c8e:	89ab      	ldrh	r3, [r5, #12]
 8003c90:	065b      	lsls	r3, r3, #25
 8003c92:	f53f af2d 	bmi.w	8003af0 <_svfiprintf_r+0x28>
 8003c96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c98:	b01d      	add	sp, #116	; 0x74
 8003c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9e:	ab03      	add	r3, sp, #12
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	462a      	mov	r2, r5
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <_svfiprintf_r+0x1f4>)
 8003ca6:	a904      	add	r1, sp, #16
 8003ca8:	4638      	mov	r0, r7
 8003caa:	f000 f879 	bl	8003da0 <_printf_i>
 8003cae:	e7eb      	b.n	8003c88 <_svfiprintf_r+0x1c0>
 8003cb0:	08004104 	.word	0x08004104
 8003cb4:	0800410e 	.word	0x0800410e
 8003cb8:	00000000 	.word	0x00000000
 8003cbc:	08003a15 	.word	0x08003a15
 8003cc0:	0800410a 	.word	0x0800410a

08003cc4 <_printf_common>:
 8003cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc8:	4616      	mov	r6, r2
 8003cca:	4699      	mov	r9, r3
 8003ccc:	688a      	ldr	r2, [r1, #8]
 8003cce:	690b      	ldr	r3, [r1, #16]
 8003cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	bfb8      	it	lt
 8003cd8:	4613      	movlt	r3, r2
 8003cda:	6033      	str	r3, [r6, #0]
 8003cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	b10a      	cbz	r2, 8003cea <_printf_common+0x26>
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	6033      	str	r3, [r6, #0]
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	0699      	lsls	r1, r3, #26
 8003cee:	bf42      	ittt	mi
 8003cf0:	6833      	ldrmi	r3, [r6, #0]
 8003cf2:	3302      	addmi	r3, #2
 8003cf4:	6033      	strmi	r3, [r6, #0]
 8003cf6:	6825      	ldr	r5, [r4, #0]
 8003cf8:	f015 0506 	ands.w	r5, r5, #6
 8003cfc:	d106      	bne.n	8003d0c <_printf_common+0x48>
 8003cfe:	f104 0a19 	add.w	sl, r4, #25
 8003d02:	68e3      	ldr	r3, [r4, #12]
 8003d04:	6832      	ldr	r2, [r6, #0]
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	42ab      	cmp	r3, r5
 8003d0a:	dc26      	bgt.n	8003d5a <_printf_common+0x96>
 8003d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d10:	1e13      	subs	r3, r2, #0
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	bf18      	it	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	0692      	lsls	r2, r2, #26
 8003d1a:	d42b      	bmi.n	8003d74 <_printf_common+0xb0>
 8003d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d20:	4649      	mov	r1, r9
 8003d22:	4638      	mov	r0, r7
 8003d24:	47c0      	blx	r8
 8003d26:	3001      	adds	r0, #1
 8003d28:	d01e      	beq.n	8003d68 <_printf_common+0xa4>
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	6922      	ldr	r2, [r4, #16]
 8003d2e:	f003 0306 	and.w	r3, r3, #6
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	bf02      	ittt	eq
 8003d36:	68e5      	ldreq	r5, [r4, #12]
 8003d38:	6833      	ldreq	r3, [r6, #0]
 8003d3a:	1aed      	subeq	r5, r5, r3
 8003d3c:	68a3      	ldr	r3, [r4, #8]
 8003d3e:	bf0c      	ite	eq
 8003d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d44:	2500      	movne	r5, #0
 8003d46:	4293      	cmp	r3, r2
 8003d48:	bfc4      	itt	gt
 8003d4a:	1a9b      	subgt	r3, r3, r2
 8003d4c:	18ed      	addgt	r5, r5, r3
 8003d4e:	2600      	movs	r6, #0
 8003d50:	341a      	adds	r4, #26
 8003d52:	42b5      	cmp	r5, r6
 8003d54:	d11a      	bne.n	8003d8c <_printf_common+0xc8>
 8003d56:	2000      	movs	r0, #0
 8003d58:	e008      	b.n	8003d6c <_printf_common+0xa8>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4652      	mov	r2, sl
 8003d5e:	4649      	mov	r1, r9
 8003d60:	4638      	mov	r0, r7
 8003d62:	47c0      	blx	r8
 8003d64:	3001      	adds	r0, #1
 8003d66:	d103      	bne.n	8003d70 <_printf_common+0xac>
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d70:	3501      	adds	r5, #1
 8003d72:	e7c6      	b.n	8003d02 <_printf_common+0x3e>
 8003d74:	18e1      	adds	r1, r4, r3
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	2030      	movs	r0, #48	; 0x30
 8003d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d7e:	4422      	add	r2, r4
 8003d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d88:	3302      	adds	r3, #2
 8003d8a:	e7c7      	b.n	8003d1c <_printf_common+0x58>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4622      	mov	r2, r4
 8003d90:	4649      	mov	r1, r9
 8003d92:	4638      	mov	r0, r7
 8003d94:	47c0      	blx	r8
 8003d96:	3001      	adds	r0, #1
 8003d98:	d0e6      	beq.n	8003d68 <_printf_common+0xa4>
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7d9      	b.n	8003d52 <_printf_common+0x8e>
	...

08003da0 <_printf_i>:
 8003da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003da4:	7e0f      	ldrb	r7, [r1, #24]
 8003da6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003da8:	2f78      	cmp	r7, #120	; 0x78
 8003daa:	4691      	mov	r9, r2
 8003dac:	4680      	mov	r8, r0
 8003dae:	460c      	mov	r4, r1
 8003db0:	469a      	mov	sl, r3
 8003db2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003db6:	d807      	bhi.n	8003dc8 <_printf_i+0x28>
 8003db8:	2f62      	cmp	r7, #98	; 0x62
 8003dba:	d80a      	bhi.n	8003dd2 <_printf_i+0x32>
 8003dbc:	2f00      	cmp	r7, #0
 8003dbe:	f000 80d4 	beq.w	8003f6a <_printf_i+0x1ca>
 8003dc2:	2f58      	cmp	r7, #88	; 0x58
 8003dc4:	f000 80c0 	beq.w	8003f48 <_printf_i+0x1a8>
 8003dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dd0:	e03a      	b.n	8003e48 <_printf_i+0xa8>
 8003dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dd6:	2b15      	cmp	r3, #21
 8003dd8:	d8f6      	bhi.n	8003dc8 <_printf_i+0x28>
 8003dda:	a101      	add	r1, pc, #4	; (adr r1, 8003de0 <_printf_i+0x40>)
 8003ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003de0:	08003e39 	.word	0x08003e39
 8003de4:	08003e4d 	.word	0x08003e4d
 8003de8:	08003dc9 	.word	0x08003dc9
 8003dec:	08003dc9 	.word	0x08003dc9
 8003df0:	08003dc9 	.word	0x08003dc9
 8003df4:	08003dc9 	.word	0x08003dc9
 8003df8:	08003e4d 	.word	0x08003e4d
 8003dfc:	08003dc9 	.word	0x08003dc9
 8003e00:	08003dc9 	.word	0x08003dc9
 8003e04:	08003dc9 	.word	0x08003dc9
 8003e08:	08003dc9 	.word	0x08003dc9
 8003e0c:	08003f51 	.word	0x08003f51
 8003e10:	08003e79 	.word	0x08003e79
 8003e14:	08003f0b 	.word	0x08003f0b
 8003e18:	08003dc9 	.word	0x08003dc9
 8003e1c:	08003dc9 	.word	0x08003dc9
 8003e20:	08003f73 	.word	0x08003f73
 8003e24:	08003dc9 	.word	0x08003dc9
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003dc9 	.word	0x08003dc9
 8003e30:	08003dc9 	.word	0x08003dc9
 8003e34:	08003f13 	.word	0x08003f13
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	1d1a      	adds	r2, r3, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	602a      	str	r2, [r5, #0]
 8003e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e09f      	b.n	8003f8c <_printf_i+0x1ec>
 8003e4c:	6820      	ldr	r0, [r4, #0]
 8003e4e:	682b      	ldr	r3, [r5, #0]
 8003e50:	0607      	lsls	r7, r0, #24
 8003e52:	f103 0104 	add.w	r1, r3, #4
 8003e56:	6029      	str	r1, [r5, #0]
 8003e58:	d501      	bpl.n	8003e5e <_printf_i+0xbe>
 8003e5a:	681e      	ldr	r6, [r3, #0]
 8003e5c:	e003      	b.n	8003e66 <_printf_i+0xc6>
 8003e5e:	0646      	lsls	r6, r0, #25
 8003e60:	d5fb      	bpl.n	8003e5a <_printf_i+0xba>
 8003e62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e66:	2e00      	cmp	r6, #0
 8003e68:	da03      	bge.n	8003e72 <_printf_i+0xd2>
 8003e6a:	232d      	movs	r3, #45	; 0x2d
 8003e6c:	4276      	negs	r6, r6
 8003e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e72:	485a      	ldr	r0, [pc, #360]	; (8003fdc <_printf_i+0x23c>)
 8003e74:	230a      	movs	r3, #10
 8003e76:	e012      	b.n	8003e9e <_printf_i+0xfe>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	1d19      	adds	r1, r3, #4
 8003e7e:	6029      	str	r1, [r5, #0]
 8003e80:	0605      	lsls	r5, r0, #24
 8003e82:	d501      	bpl.n	8003e88 <_printf_i+0xe8>
 8003e84:	681e      	ldr	r6, [r3, #0]
 8003e86:	e002      	b.n	8003e8e <_printf_i+0xee>
 8003e88:	0641      	lsls	r1, r0, #25
 8003e8a:	d5fb      	bpl.n	8003e84 <_printf_i+0xe4>
 8003e8c:	881e      	ldrh	r6, [r3, #0]
 8003e8e:	4853      	ldr	r0, [pc, #332]	; (8003fdc <_printf_i+0x23c>)
 8003e90:	2f6f      	cmp	r7, #111	; 0x6f
 8003e92:	bf0c      	ite	eq
 8003e94:	2308      	moveq	r3, #8
 8003e96:	230a      	movne	r3, #10
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e9e:	6865      	ldr	r5, [r4, #4]
 8003ea0:	60a5      	str	r5, [r4, #8]
 8003ea2:	2d00      	cmp	r5, #0
 8003ea4:	bfa2      	ittt	ge
 8003ea6:	6821      	ldrge	r1, [r4, #0]
 8003ea8:	f021 0104 	bicge.w	r1, r1, #4
 8003eac:	6021      	strge	r1, [r4, #0]
 8003eae:	b90e      	cbnz	r6, 8003eb4 <_printf_i+0x114>
 8003eb0:	2d00      	cmp	r5, #0
 8003eb2:	d04b      	beq.n	8003f4c <_printf_i+0x1ac>
 8003eb4:	4615      	mov	r5, r2
 8003eb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003eba:	fb03 6711 	mls	r7, r3, r1, r6
 8003ebe:	5dc7      	ldrb	r7, [r0, r7]
 8003ec0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ec4:	4637      	mov	r7, r6
 8003ec6:	42bb      	cmp	r3, r7
 8003ec8:	460e      	mov	r6, r1
 8003eca:	d9f4      	bls.n	8003eb6 <_printf_i+0x116>
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d10b      	bne.n	8003ee8 <_printf_i+0x148>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	07de      	lsls	r6, r3, #31
 8003ed4:	d508      	bpl.n	8003ee8 <_printf_i+0x148>
 8003ed6:	6923      	ldr	r3, [r4, #16]
 8003ed8:	6861      	ldr	r1, [r4, #4]
 8003eda:	4299      	cmp	r1, r3
 8003edc:	bfde      	ittt	le
 8003ede:	2330      	movle	r3, #48	; 0x30
 8003ee0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ee4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ee8:	1b52      	subs	r2, r2, r5
 8003eea:	6122      	str	r2, [r4, #16]
 8003eec:	f8cd a000 	str.w	sl, [sp]
 8003ef0:	464b      	mov	r3, r9
 8003ef2:	aa03      	add	r2, sp, #12
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	f7ff fee4 	bl	8003cc4 <_printf_common>
 8003efc:	3001      	adds	r0, #1
 8003efe:	d14a      	bne.n	8003f96 <_printf_i+0x1f6>
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	b004      	add	sp, #16
 8003f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	f043 0320 	orr.w	r3, r3, #32
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	4833      	ldr	r0, [pc, #204]	; (8003fe0 <_printf_i+0x240>)
 8003f14:	2778      	movs	r7, #120	; 0x78
 8003f16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	6829      	ldr	r1, [r5, #0]
 8003f1e:	061f      	lsls	r7, r3, #24
 8003f20:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f24:	d402      	bmi.n	8003f2c <_printf_i+0x18c>
 8003f26:	065f      	lsls	r7, r3, #25
 8003f28:	bf48      	it	mi
 8003f2a:	b2b6      	uxthmi	r6, r6
 8003f2c:	07df      	lsls	r7, r3, #31
 8003f2e:	bf48      	it	mi
 8003f30:	f043 0320 	orrmi.w	r3, r3, #32
 8003f34:	6029      	str	r1, [r5, #0]
 8003f36:	bf48      	it	mi
 8003f38:	6023      	strmi	r3, [r4, #0]
 8003f3a:	b91e      	cbnz	r6, 8003f44 <_printf_i+0x1a4>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	f023 0320 	bic.w	r3, r3, #32
 8003f42:	6023      	str	r3, [r4, #0]
 8003f44:	2310      	movs	r3, #16
 8003f46:	e7a7      	b.n	8003e98 <_printf_i+0xf8>
 8003f48:	4824      	ldr	r0, [pc, #144]	; (8003fdc <_printf_i+0x23c>)
 8003f4a:	e7e4      	b.n	8003f16 <_printf_i+0x176>
 8003f4c:	4615      	mov	r5, r2
 8003f4e:	e7bd      	b.n	8003ecc <_printf_i+0x12c>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	6826      	ldr	r6, [r4, #0]
 8003f54:	6961      	ldr	r1, [r4, #20]
 8003f56:	1d18      	adds	r0, r3, #4
 8003f58:	6028      	str	r0, [r5, #0]
 8003f5a:	0635      	lsls	r5, r6, #24
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	d501      	bpl.n	8003f64 <_printf_i+0x1c4>
 8003f60:	6019      	str	r1, [r3, #0]
 8003f62:	e002      	b.n	8003f6a <_printf_i+0x1ca>
 8003f64:	0670      	lsls	r0, r6, #25
 8003f66:	d5fb      	bpl.n	8003f60 <_printf_i+0x1c0>
 8003f68:	8019      	strh	r1, [r3, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	6123      	str	r3, [r4, #16]
 8003f6e:	4615      	mov	r5, r2
 8003f70:	e7bc      	b.n	8003eec <_printf_i+0x14c>
 8003f72:	682b      	ldr	r3, [r5, #0]
 8003f74:	1d1a      	adds	r2, r3, #4
 8003f76:	602a      	str	r2, [r5, #0]
 8003f78:	681d      	ldr	r5, [r3, #0]
 8003f7a:	6862      	ldr	r2, [r4, #4]
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7fc f92e 	bl	80001e0 <memchr>
 8003f84:	b108      	cbz	r0, 8003f8a <_printf_i+0x1ea>
 8003f86:	1b40      	subs	r0, r0, r5
 8003f88:	6060      	str	r0, [r4, #4]
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	6123      	str	r3, [r4, #16]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f94:	e7aa      	b.n	8003eec <_printf_i+0x14c>
 8003f96:	6923      	ldr	r3, [r4, #16]
 8003f98:	462a      	mov	r2, r5
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	47d0      	blx	sl
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d0ad      	beq.n	8003f00 <_printf_i+0x160>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	079b      	lsls	r3, r3, #30
 8003fa8:	d413      	bmi.n	8003fd2 <_printf_i+0x232>
 8003faa:	68e0      	ldr	r0, [r4, #12]
 8003fac:	9b03      	ldr	r3, [sp, #12]
 8003fae:	4298      	cmp	r0, r3
 8003fb0:	bfb8      	it	lt
 8003fb2:	4618      	movlt	r0, r3
 8003fb4:	e7a6      	b.n	8003f04 <_printf_i+0x164>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	4632      	mov	r2, r6
 8003fba:	4649      	mov	r1, r9
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	47d0      	blx	sl
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d09d      	beq.n	8003f00 <_printf_i+0x160>
 8003fc4:	3501      	adds	r5, #1
 8003fc6:	68e3      	ldr	r3, [r4, #12]
 8003fc8:	9903      	ldr	r1, [sp, #12]
 8003fca:	1a5b      	subs	r3, r3, r1
 8003fcc:	42ab      	cmp	r3, r5
 8003fce:	dcf2      	bgt.n	8003fb6 <_printf_i+0x216>
 8003fd0:	e7eb      	b.n	8003faa <_printf_i+0x20a>
 8003fd2:	2500      	movs	r5, #0
 8003fd4:	f104 0619 	add.w	r6, r4, #25
 8003fd8:	e7f5      	b.n	8003fc6 <_printf_i+0x226>
 8003fda:	bf00      	nop
 8003fdc:	08004115 	.word	0x08004115
 8003fe0:	08004126 	.word	0x08004126

08003fe4 <memmove>:
 8003fe4:	4288      	cmp	r0, r1
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	eb01 0402 	add.w	r4, r1, r2
 8003fec:	d902      	bls.n	8003ff4 <memmove+0x10>
 8003fee:	4284      	cmp	r4, r0
 8003ff0:	4623      	mov	r3, r4
 8003ff2:	d807      	bhi.n	8004004 <memmove+0x20>
 8003ff4:	1e43      	subs	r3, r0, #1
 8003ff6:	42a1      	cmp	r1, r4
 8003ff8:	d008      	beq.n	800400c <memmove+0x28>
 8003ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004002:	e7f8      	b.n	8003ff6 <memmove+0x12>
 8004004:	4402      	add	r2, r0
 8004006:	4601      	mov	r1, r0
 8004008:	428a      	cmp	r2, r1
 800400a:	d100      	bne.n	800400e <memmove+0x2a>
 800400c:	bd10      	pop	{r4, pc}
 800400e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004016:	e7f7      	b.n	8004008 <memmove+0x24>

08004018 <_realloc_r>:
 8004018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800401c:	4680      	mov	r8, r0
 800401e:	4614      	mov	r4, r2
 8004020:	460e      	mov	r6, r1
 8004022:	b921      	cbnz	r1, 800402e <_realloc_r+0x16>
 8004024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004028:	4611      	mov	r1, r2
 800402a:	f7ff bb95 	b.w	8003758 <_malloc_r>
 800402e:	b92a      	cbnz	r2, 800403c <_realloc_r+0x24>
 8004030:	f7ff fca4 	bl	800397c <_free_r>
 8004034:	4625      	mov	r5, r4
 8004036:	4628      	mov	r0, r5
 8004038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800403c:	f000 f81b 	bl	8004076 <_malloc_usable_size_r>
 8004040:	4284      	cmp	r4, r0
 8004042:	4607      	mov	r7, r0
 8004044:	d802      	bhi.n	800404c <_realloc_r+0x34>
 8004046:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800404a:	d812      	bhi.n	8004072 <_realloc_r+0x5a>
 800404c:	4621      	mov	r1, r4
 800404e:	4640      	mov	r0, r8
 8004050:	f7ff fb82 	bl	8003758 <_malloc_r>
 8004054:	4605      	mov	r5, r0
 8004056:	2800      	cmp	r0, #0
 8004058:	d0ed      	beq.n	8004036 <_realloc_r+0x1e>
 800405a:	42bc      	cmp	r4, r7
 800405c:	4622      	mov	r2, r4
 800405e:	4631      	mov	r1, r6
 8004060:	bf28      	it	cs
 8004062:	463a      	movcs	r2, r7
 8004064:	f7ff fc7c 	bl	8003960 <memcpy>
 8004068:	4631      	mov	r1, r6
 800406a:	4640      	mov	r0, r8
 800406c:	f7ff fc86 	bl	800397c <_free_r>
 8004070:	e7e1      	b.n	8004036 <_realloc_r+0x1e>
 8004072:	4635      	mov	r5, r6
 8004074:	e7df      	b.n	8004036 <_realloc_r+0x1e>

08004076 <_malloc_usable_size_r>:
 8004076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800407a:	1f18      	subs	r0, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	bfbc      	itt	lt
 8004080:	580b      	ldrlt	r3, [r1, r0]
 8004082:	18c0      	addlt	r0, r0, r3
 8004084:	4770      	bx	lr
	...

08004088 <_init>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr

08004094 <_fini>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr
